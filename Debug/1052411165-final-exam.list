
1052411165-final-exam.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004098  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000013b4  08004220  08004220  00014220  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080055d4  080055d4  00020014  2**0
                  CONTENTS
  4 .ARM          00000000  080055d4  080055d4  00020014  2**0
                  CONTENTS
  5 .preinit_array 00000000  080055d4  080055d4  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080055d4  080055d4  000155d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080055d8  080055d8  000155d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  080055dc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000494  20000014  080055f0  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200004a8  080055f0  000204a8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000d5a0  00000000  00000000  00020087  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000026f1  00000000  00000000  0002d627  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ec8  00000000  00000000  0002fd18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000b20  00000000  00000000  00030be0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00028b87  00000000  00000000  00031700  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00011290  00000000  00000000  0005a287  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f207a  00000000  00000000  0006b517  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003b60  00000000  00000000  0015d594  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007a  00000000  00000000  001610f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000014 	.word	0x20000014
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08004208 	.word	0x08004208

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000018 	.word	0x20000018
 80001c4:	08004208 	.word	0x08004208

080001c8 <LL_USART_IsActiveFlag_RXNE>:
  * @rmtoll ISR          RXNE          LL_USART_IsActiveFlag_RXNE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_RXNE(const USART_TypeDef *USARTx)
{
 80001c8:	b480      	push	{r7}
 80001ca:	b083      	sub	sp, #12
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_RXNE) == (USART_ISR_RXNE)) ? 1UL : 0UL);
 80001d0:	687b      	ldr	r3, [r7, #4]
 80001d2:	69db      	ldr	r3, [r3, #28]
 80001d4:	f003 0320 	and.w	r3, r3, #32
 80001d8:	2b20      	cmp	r3, #32
 80001da:	d101      	bne.n	80001e0 <LL_USART_IsActiveFlag_RXNE+0x18>
 80001dc:	2301      	movs	r3, #1
 80001de:	e000      	b.n	80001e2 <LL_USART_IsActiveFlag_RXNE+0x1a>
 80001e0:	2300      	movs	r3, #0
}
 80001e2:	4618      	mov	r0, r3
 80001e4:	370c      	adds	r7, #12
 80001e6:	46bd      	mov	sp, r7
 80001e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001ec:	4770      	bx	lr

080001ee <LL_USART_ReceiveData8>:
  * @rmtoll RDR          RDR           LL_USART_ReceiveData8
  * @param  USARTx USART Instance
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_USART_ReceiveData8(const USART_TypeDef *USARTx)
{
 80001ee:	b480      	push	{r7}
 80001f0:	b083      	sub	sp, #12
 80001f2:	af00      	add	r7, sp, #0
 80001f4:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(USARTx->RDR, USART_RDR_RDR) & 0xFFU);
 80001f6:	687b      	ldr	r3, [r7, #4]
 80001f8:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80001fa:	b29b      	uxth	r3, r3
 80001fc:	b2db      	uxtb	r3, r3
}
 80001fe:	4618      	mov	r0, r3
 8000200:	370c      	adds	r7, #12
 8000202:	46bd      	mov	sp, r7
 8000204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000208:	4770      	bx	lr

0800020a <Rx_USART2_init>:
#include "main.h"



void Rx_USART2_init(USART2_t *ring_buffer, uint8_t *buffer, uint16_t capacity)
{
 800020a:	b480      	push	{r7}
 800020c:	b085      	sub	sp, #20
 800020e:	af00      	add	r7, sp, #0
 8000210:	60f8      	str	r0, [r7, #12]
 8000212:	60b9      	str	r1, [r7, #8]
 8000214:	4613      	mov	r3, r2
 8000216:	80fb      	strh	r3, [r7, #6]
	ring_buffer->buffer = buffer;
 8000218:	68fb      	ldr	r3, [r7, #12]
 800021a:	68ba      	ldr	r2, [r7, #8]
 800021c:	601a      	str	r2, [r3, #0]
	ring_buffer->capacity = capacity;
 800021e:	68fb      	ldr	r3, [r7, #12]
 8000220:	88fa      	ldrh	r2, [r7, #6]
 8000222:	811a      	strh	r2, [r3, #8]

	ring_buffer->head = 0;
 8000224:	68fb      	ldr	r3, [r7, #12]
 8000226:	2200      	movs	r2, #0
 8000228:	809a      	strh	r2, [r3, #4]
	ring_buffer->tail = 0;
 800022a:	68fb      	ldr	r3, [r7, #12]
 800022c:	2200      	movs	r2, #0
 800022e:	80da      	strh	r2, [r3, #6]
	ring_buffer->is_full = 0;
 8000230:	68fb      	ldr	r3, [r7, #12]
 8000232:	2200      	movs	r2, #0
 8000234:	729a      	strb	r2, [r3, #10]
}
 8000236:	bf00      	nop
 8000238:	3714      	adds	r7, #20
 800023a:	46bd      	mov	sp, r7
 800023c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000240:	4770      	bx	lr

08000242 <Rx_USART2_put>:
uint8_t Rx_USART2_put(USART2_t *ring_buffer, uint8_t data)
{
 8000242:	b480      	push	{r7}
 8000244:	b083      	sub	sp, #12
 8000246:	af00      	add	r7, sp, #0
 8000248:	6078      	str	r0, [r7, #4]
 800024a:	460b      	mov	r3, r1
 800024c:	70fb      	strb	r3, [r7, #3]
	ring_buffer->buffer[ring_buffer->head] = data;
 800024e:	687b      	ldr	r3, [r7, #4]
 8000250:	681b      	ldr	r3, [r3, #0]
 8000252:	687a      	ldr	r2, [r7, #4]
 8000254:	8892      	ldrh	r2, [r2, #4]
 8000256:	4413      	add	r3, r2
 8000258:	78fa      	ldrb	r2, [r7, #3]
 800025a:	701a      	strb	r2, [r3, #0]
	ring_buffer->head = (ring_buffer->head + 1) % ring_buffer->capacity;
 800025c:	687b      	ldr	r3, [r7, #4]
 800025e:	889b      	ldrh	r3, [r3, #4]
 8000260:	3301      	adds	r3, #1
 8000262:	687a      	ldr	r2, [r7, #4]
 8000264:	8912      	ldrh	r2, [r2, #8]
 8000266:	fb93 f1f2 	sdiv	r1, r3, r2
 800026a:	fb01 f202 	mul.w	r2, r1, r2
 800026e:	1a9b      	subs	r3, r3, r2
 8000270:	b29a      	uxth	r2, r3
 8000272:	687b      	ldr	r3, [r7, #4]
 8000274:	809a      	strh	r2, [r3, #4]

	if (ring_buffer->is_full != 0) {
 8000276:	687b      	ldr	r3, [r7, #4]
 8000278:	7a9b      	ldrb	r3, [r3, #10]
 800027a:	2b00      	cmp	r3, #0
 800027c:	d00c      	beq.n	8000298 <Rx_USART2_put+0x56>
		ring_buffer->tail = (ring_buffer->tail + 1) % ring_buffer->capacity;
 800027e:	687b      	ldr	r3, [r7, #4]
 8000280:	88db      	ldrh	r3, [r3, #6]
 8000282:	3301      	adds	r3, #1
 8000284:	687a      	ldr	r2, [r7, #4]
 8000286:	8912      	ldrh	r2, [r2, #8]
 8000288:	fb93 f1f2 	sdiv	r1, r3, r2
 800028c:	fb01 f202 	mul.w	r2, r1, r2
 8000290:	1a9b      	subs	r3, r3, r2
 8000292:	b29a      	uxth	r2, r3
 8000294:	687b      	ldr	r3, [r7, #4]
 8000296:	80da      	strh	r2, [r3, #6]
	}

	if (ring_buffer->head == ring_buffer->tail) {
 8000298:	687b      	ldr	r3, [r7, #4]
 800029a:	889a      	ldrh	r2, [r3, #4]
 800029c:	687b      	ldr	r3, [r7, #4]
 800029e:	88db      	ldrh	r3, [r3, #6]
 80002a0:	429a      	cmp	r2, r3
 80002a2:	d104      	bne.n	80002ae <Rx_USART2_put+0x6c>
		ring_buffer->is_full = 1;
 80002a4:	687b      	ldr	r3, [r7, #4]
 80002a6:	2201      	movs	r2, #1
 80002a8:	729a      	strb	r2, [r3, #10]
		return 0;
 80002aa:	2300      	movs	r3, #0
 80002ac:	e000      	b.n	80002b0 <Rx_USART2_put+0x6e>
	}
	return 1;
 80002ae:	2301      	movs	r3, #1
}
 80002b0:	4618      	mov	r0, r3
 80002b2:	370c      	adds	r7, #12
 80002b4:	46bd      	mov	sp, r7
 80002b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002ba:	4770      	bx	lr

080002bc <Rx_USART2>:
	}

	return size;
}

void Rx_USART2(USART2_t *ring_buffer) {
 80002bc:	b580      	push	{r7, lr}
 80002be:	b084      	sub	sp, #16
 80002c0:	af00      	add	r7, sp, #0
 80002c2:	6078      	str	r0, [r7, #4]
    if (LL_USART_IsActiveFlag_RXNE(USART2)){
 80002c4:	4809      	ldr	r0, [pc, #36]	; (80002ec <Rx_USART2+0x30>)
 80002c6:	f7ff ff7f 	bl	80001c8 <LL_USART_IsActiveFlag_RXNE>
 80002ca:	4603      	mov	r3, r0
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d009      	beq.n	80002e4 <Rx_USART2+0x28>
        uint8_t received_data = LL_USART_ReceiveData8(USART2);
 80002d0:	4806      	ldr	r0, [pc, #24]	; (80002ec <Rx_USART2+0x30>)
 80002d2:	f7ff ff8c 	bl	80001ee <LL_USART_ReceiveData8>
 80002d6:	4603      	mov	r3, r0
 80002d8:	73fb      	strb	r3, [r7, #15]
        Rx_USART2_put(ring_buffer, received_data); // Sin desreferenciar
 80002da:	7bfb      	ldrb	r3, [r7, #15]
 80002dc:	4619      	mov	r1, r3
 80002de:	6878      	ldr	r0, [r7, #4]
 80002e0:	f7ff ffaf 	bl	8000242 <Rx_USART2_put>
        //printf("data %x \r\n", received_data);
    }
}
 80002e4:	bf00      	nop
 80002e6:	3710      	adds	r7, #16
 80002e8:	46bd      	mov	sp, r7
 80002ea:	bd80      	pop	{r7, pc}
 80002ec:	40004400 	.word	0x40004400

080002f0 <Rx_USART2_reset>:

void Rx_USART2_reset(USART2_t *ring_buffer)
{
 80002f0:	b480      	push	{r7}
 80002f2:	b083      	sub	sp, #12
 80002f4:	af00      	add	r7, sp, #0
 80002f6:	6078      	str	r0, [r7, #4]
	ring_buffer->tail = 0;
 80002f8:	687b      	ldr	r3, [r7, #4]
 80002fa:	2200      	movs	r2, #0
 80002fc:	80da      	strh	r2, [r3, #6]
	ring_buffer->head = 0;
 80002fe:	687b      	ldr	r3, [r7, #4]
 8000300:	2200      	movs	r2, #0
 8000302:	809a      	strh	r2, [r3, #4]
	ring_buffer->is_full = 0;
 8000304:	687b      	ldr	r3, [r7, #4]
 8000306:	2200      	movs	r2, #0
 8000308:	729a      	strb	r2, [r3, #10]
}
 800030a:	bf00      	nop
 800030c:	370c      	adds	r7, #12
 800030e:	46bd      	mov	sp, r7
 8000310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000314:	4770      	bx	lr
	...

08000318 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000318:	b480      	push	{r7}
 800031a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800031c:	4b04      	ldr	r3, [pc, #16]	; (8000330 <__NVIC_GetPriorityGrouping+0x18>)
 800031e:	68db      	ldr	r3, [r3, #12]
 8000320:	0a1b      	lsrs	r3, r3, #8
 8000322:	f003 0307 	and.w	r3, r3, #7
}
 8000326:	4618      	mov	r0, r3
 8000328:	46bd      	mov	sp, r7
 800032a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800032e:	4770      	bx	lr
 8000330:	e000ed00 	.word	0xe000ed00

08000334 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000334:	b480      	push	{r7}
 8000336:	b083      	sub	sp, #12
 8000338:	af00      	add	r7, sp, #0
 800033a:	4603      	mov	r3, r0
 800033c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800033e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000342:	2b00      	cmp	r3, #0
 8000344:	db0b      	blt.n	800035e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000346:	79fb      	ldrb	r3, [r7, #7]
 8000348:	f003 021f 	and.w	r2, r3, #31
 800034c:	4907      	ldr	r1, [pc, #28]	; (800036c <__NVIC_EnableIRQ+0x38>)
 800034e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000352:	095b      	lsrs	r3, r3, #5
 8000354:	2001      	movs	r0, #1
 8000356:	fa00 f202 	lsl.w	r2, r0, r2
 800035a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800035e:	bf00      	nop
 8000360:	370c      	adds	r7, #12
 8000362:	46bd      	mov	sp, r7
 8000364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000368:	4770      	bx	lr
 800036a:	bf00      	nop
 800036c:	e000e100 	.word	0xe000e100

08000370 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000370:	b480      	push	{r7}
 8000372:	b083      	sub	sp, #12
 8000374:	af00      	add	r7, sp, #0
 8000376:	4603      	mov	r3, r0
 8000378:	6039      	str	r1, [r7, #0]
 800037a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800037c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000380:	2b00      	cmp	r3, #0
 8000382:	db0a      	blt.n	800039a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000384:	683b      	ldr	r3, [r7, #0]
 8000386:	b2da      	uxtb	r2, r3
 8000388:	490c      	ldr	r1, [pc, #48]	; (80003bc <__NVIC_SetPriority+0x4c>)
 800038a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800038e:	0112      	lsls	r2, r2, #4
 8000390:	b2d2      	uxtb	r2, r2
 8000392:	440b      	add	r3, r1
 8000394:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000398:	e00a      	b.n	80003b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800039a:	683b      	ldr	r3, [r7, #0]
 800039c:	b2da      	uxtb	r2, r3
 800039e:	4908      	ldr	r1, [pc, #32]	; (80003c0 <__NVIC_SetPriority+0x50>)
 80003a0:	79fb      	ldrb	r3, [r7, #7]
 80003a2:	f003 030f 	and.w	r3, r3, #15
 80003a6:	3b04      	subs	r3, #4
 80003a8:	0112      	lsls	r2, r2, #4
 80003aa:	b2d2      	uxtb	r2, r2
 80003ac:	440b      	add	r3, r1
 80003ae:	761a      	strb	r2, [r3, #24]
}
 80003b0:	bf00      	nop
 80003b2:	370c      	adds	r7, #12
 80003b4:	46bd      	mov	sp, r7
 80003b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003ba:	4770      	bx	lr
 80003bc:	e000e100 	.word	0xe000e100
 80003c0:	e000ed00 	.word	0xe000ed00

080003c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80003c4:	b480      	push	{r7}
 80003c6:	b089      	sub	sp, #36	; 0x24
 80003c8:	af00      	add	r7, sp, #0
 80003ca:	60f8      	str	r0, [r7, #12]
 80003cc:	60b9      	str	r1, [r7, #8]
 80003ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80003d0:	68fb      	ldr	r3, [r7, #12]
 80003d2:	f003 0307 	and.w	r3, r3, #7
 80003d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80003d8:	69fb      	ldr	r3, [r7, #28]
 80003da:	f1c3 0307 	rsb	r3, r3, #7
 80003de:	2b04      	cmp	r3, #4
 80003e0:	bf28      	it	cs
 80003e2:	2304      	movcs	r3, #4
 80003e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80003e6:	69fb      	ldr	r3, [r7, #28]
 80003e8:	3304      	adds	r3, #4
 80003ea:	2b06      	cmp	r3, #6
 80003ec:	d902      	bls.n	80003f4 <NVIC_EncodePriority+0x30>
 80003ee:	69fb      	ldr	r3, [r7, #28]
 80003f0:	3b03      	subs	r3, #3
 80003f2:	e000      	b.n	80003f6 <NVIC_EncodePriority+0x32>
 80003f4:	2300      	movs	r3, #0
 80003f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80003f8:	f04f 32ff 	mov.w	r2, #4294967295
 80003fc:	69bb      	ldr	r3, [r7, #24]
 80003fe:	fa02 f303 	lsl.w	r3, r2, r3
 8000402:	43da      	mvns	r2, r3
 8000404:	68bb      	ldr	r3, [r7, #8]
 8000406:	401a      	ands	r2, r3
 8000408:	697b      	ldr	r3, [r7, #20]
 800040a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800040c:	f04f 31ff 	mov.w	r1, #4294967295
 8000410:	697b      	ldr	r3, [r7, #20]
 8000412:	fa01 f303 	lsl.w	r3, r1, r3
 8000416:	43d9      	mvns	r1, r3
 8000418:	687b      	ldr	r3, [r7, #4]
 800041a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800041c:	4313      	orrs	r3, r2
         );
}
 800041e:	4618      	mov	r0, r3
 8000420:	3724      	adds	r7, #36	; 0x24
 8000422:	46bd      	mov	sp, r7
 8000424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000428:	4770      	bx	lr

0800042a <LL_USART_Enable>:
{
 800042a:	b480      	push	{r7}
 800042c:	b083      	sub	sp, #12
 800042e:	af00      	add	r7, sp, #0
 8000430:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8000432:	687b      	ldr	r3, [r7, #4]
 8000434:	681b      	ldr	r3, [r3, #0]
 8000436:	f043 0201 	orr.w	r2, r3, #1
 800043a:	687b      	ldr	r3, [r7, #4]
 800043c:	601a      	str	r2, [r3, #0]
}
 800043e:	bf00      	nop
 8000440:	370c      	adds	r7, #12
 8000442:	46bd      	mov	sp, r7
 8000444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000448:	4770      	bx	lr

0800044a <LL_USART_ConfigAsyncMode>:
{
 800044a:	b480      	push	{r7}
 800044c:	b083      	sub	sp, #12
 800044e:	af00      	add	r7, sp, #0
 8000450:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8000452:	687b      	ldr	r3, [r7, #4]
 8000454:	685b      	ldr	r3, [r3, #4]
 8000456:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 800045a:	687b      	ldr	r3, [r7, #4]
 800045c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 800045e:	687b      	ldr	r3, [r7, #4]
 8000460:	689b      	ldr	r3, [r3, #8]
 8000462:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 8000466:	687b      	ldr	r3, [r7, #4]
 8000468:	609a      	str	r2, [r3, #8]
}
 800046a:	bf00      	nop
 800046c:	370c      	adds	r7, #12
 800046e:	46bd      	mov	sp, r7
 8000470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000474:	4770      	bx	lr
	...

08000478 <LL_AHB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000478:	b480      	push	{r7}
 800047a:	b085      	sub	sp, #20
 800047c:	af00      	add	r7, sp, #0
 800047e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000480:	4b08      	ldr	r3, [pc, #32]	; (80004a4 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8000482:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000484:	4907      	ldr	r1, [pc, #28]	; (80004a4 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8000486:	687b      	ldr	r3, [r7, #4]
 8000488:	4313      	orrs	r3, r2
 800048a:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800048c:	4b05      	ldr	r3, [pc, #20]	; (80004a4 <LL_AHB2_GRP1_EnableClock+0x2c>)
 800048e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000490:	687b      	ldr	r3, [r7, #4]
 8000492:	4013      	ands	r3, r2
 8000494:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000496:	68fb      	ldr	r3, [r7, #12]
}
 8000498:	bf00      	nop
 800049a:	3714      	adds	r7, #20
 800049c:	46bd      	mov	sp, r7
 800049e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004a2:	4770      	bx	lr
 80004a4:	40021000 	.word	0x40021000

080004a8 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 80004a8:	b480      	push	{r7}
 80004aa:	b085      	sub	sp, #20
 80004ac:	af00      	add	r7, sp, #0
 80004ae:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 80004b0:	4b08      	ldr	r3, [pc, #32]	; (80004d4 <LL_APB1_GRP1_EnableClock+0x2c>)
 80004b2:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80004b4:	4907      	ldr	r1, [pc, #28]	; (80004d4 <LL_APB1_GRP1_EnableClock+0x2c>)
 80004b6:	687b      	ldr	r3, [r7, #4]
 80004b8:	4313      	orrs	r3, r2
 80004ba:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80004bc:	4b05      	ldr	r3, [pc, #20]	; (80004d4 <LL_APB1_GRP1_EnableClock+0x2c>)
 80004be:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80004c0:	687b      	ldr	r3, [r7, #4]
 80004c2:	4013      	ands	r3, r2
 80004c4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80004c6:	68fb      	ldr	r3, [r7, #12]
}
 80004c8:	bf00      	nop
 80004ca:	3714      	adds	r7, #20
 80004cc:	46bd      	mov	sp, r7
 80004ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004d2:	4770      	bx	lr
 80004d4:	40021000 	.word	0x40021000

080004d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	b082      	sub	sp, #8
 80004dc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004de:	f000 faeb 	bl	8000ab8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004e2:	f000 f841 	bl	8000568 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004e6:	f000 f953 	bl	8000790 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80004ea:	f000 f8cf 	bl	800068c <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80004ee:	f000 f88d 	bl	800060c <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  GUI_init();
 80004f2:	f000 f9b8 	bl	8000866 <GUI_init>
  Rx_USART2_init(&Rx_data, message, 10);
 80004f6:	220a      	movs	r2, #10
 80004f8:	4918      	ldr	r1, [pc, #96]	; (800055c <main+0x84>)
 80004fa:	4819      	ldr	r0, [pc, #100]	; (8000560 <main+0x88>)
 80004fc:	f7ff fe85 	bl	800020a <Rx_USART2_init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  Rx_USART2(&Rx_data);
 8000500:	4817      	ldr	r0, [pc, #92]	; (8000560 <main+0x88>)
 8000502:	f7ff fedb 	bl	80002bc <Rx_USART2>
	  int numero = 0;
 8000506:	2300      	movs	r3, #0
 8000508:	607b      	str	r3, [r7, #4]
	  for (int i = 0; i < 10; i++)
 800050a:	2300      	movs	r3, #0
 800050c:	603b      	str	r3, [r7, #0]
 800050e:	e00e      	b.n	800052e <main+0x56>
	  {
		numero = numero * 10 + (message[i]-0); // hex to dec
 8000510:	687a      	ldr	r2, [r7, #4]
 8000512:	4613      	mov	r3, r2
 8000514:	009b      	lsls	r3, r3, #2
 8000516:	4413      	add	r3, r2
 8000518:	005b      	lsls	r3, r3, #1
 800051a:	4619      	mov	r1, r3
 800051c:	4a0f      	ldr	r2, [pc, #60]	; (800055c <main+0x84>)
 800051e:	683b      	ldr	r3, [r7, #0]
 8000520:	4413      	add	r3, r2
 8000522:	781b      	ldrb	r3, [r3, #0]
 8000524:	440b      	add	r3, r1
 8000526:	607b      	str	r3, [r7, #4]
	  for (int i = 0; i < 10; i++)
 8000528:	683b      	ldr	r3, [r7, #0]
 800052a:	3301      	adds	r3, #1
 800052c:	603b      	str	r3, [r7, #0]
 800052e:	683b      	ldr	r3, [r7, #0]
 8000530:	2b09      	cmp	r3, #9
 8000532:	dded      	ble.n	8000510 <main+0x38>
	  }

		  if(numero == password){
 8000534:	687b      	ldr	r3, [r7, #4]
 8000536:	4a0b      	ldr	r2, [pc, #44]	; (8000564 <main+0x8c>)
 8000538:	4293      	cmp	r3, r2
 800053a:	d1e1      	bne.n	8000500 <main+0x28>
			  GUI_Success();
 800053c:	f000 f9b4 	bl	80008a8 <GUI_Success>
			  HAL_Delay(10000);
 8000540:	f242 7010 	movw	r0, #10000	; 0x2710
 8000544:	f000 fb34 	bl	8000bb0 <HAL_Delay>
			  Rx_USART2_reset(&Rx_data);
 8000548:	4805      	ldr	r0, [pc, #20]	; (8000560 <main+0x88>)
 800054a:	f7ff fed1 	bl	80002f0 <Rx_USART2_reset>
			  memset(message, 0, sizeof(message));
 800054e:	220a      	movs	r2, #10
 8000550:	2100      	movs	r1, #0
 8000552:	4802      	ldr	r0, [pc, #8]	; (800055c <main+0x84>)
 8000554:	f003 fe2c 	bl	80041b0 <memset>
  {
 8000558:	e7d2      	b.n	8000500 <main+0x28>
 800055a:	bf00      	nop
 800055c:	20000084 	.word	0x20000084
 8000560:	20000090 	.word	0x20000090
 8000564:	3eba851d 	.word	0x3eba851d

08000568 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	b096      	sub	sp, #88	; 0x58
 800056c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800056e:	f107 0314 	add.w	r3, r7, #20
 8000572:	2244      	movs	r2, #68	; 0x44
 8000574:	2100      	movs	r1, #0
 8000576:	4618      	mov	r0, r3
 8000578:	f003 fe1a 	bl	80041b0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800057c:	463b      	mov	r3, r7
 800057e:	2200      	movs	r2, #0
 8000580:	601a      	str	r2, [r3, #0]
 8000582:	605a      	str	r2, [r3, #4]
 8000584:	609a      	str	r2, [r3, #8]
 8000586:	60da      	str	r2, [r3, #12]
 8000588:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800058a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800058e:	f001 fa95 	bl	8001abc <HAL_PWREx_ControlVoltageScaling>
 8000592:	4603      	mov	r3, r0
 8000594:	2b00      	cmp	r3, #0
 8000596:	d001      	beq.n	800059c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000598:	f000 f960 	bl	800085c <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800059c:	2302      	movs	r3, #2
 800059e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005a0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80005a4:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005a6:	2310      	movs	r3, #16
 80005a8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005aa:	2302      	movs	r3, #2
 80005ac:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005ae:	2302      	movs	r3, #2
 80005b0:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80005b2:	2301      	movs	r3, #1
 80005b4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 80005b6:	230a      	movs	r3, #10
 80005b8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80005ba:	2307      	movs	r3, #7
 80005bc:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80005be:	2302      	movs	r3, #2
 80005c0:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80005c2:	2302      	movs	r3, #2
 80005c4:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005c6:	f107 0314 	add.w	r3, r7, #20
 80005ca:	4618      	mov	r0, r3
 80005cc:	f001 facc 	bl	8001b68 <HAL_RCC_OscConfig>
 80005d0:	4603      	mov	r3, r0
 80005d2:	2b00      	cmp	r3, #0
 80005d4:	d001      	beq.n	80005da <SystemClock_Config+0x72>
  {
    Error_Handler();
 80005d6:	f000 f941 	bl	800085c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005da:	230f      	movs	r3, #15
 80005dc:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005de:	2303      	movs	r3, #3
 80005e0:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005e2:	2300      	movs	r3, #0
 80005e4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005e6:	2300      	movs	r3, #0
 80005e8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005ea:	2300      	movs	r3, #0
 80005ec:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80005ee:	463b      	mov	r3, r7
 80005f0:	2104      	movs	r1, #4
 80005f2:	4618      	mov	r0, r3
 80005f4:	f001 fe94 	bl	8002320 <HAL_RCC_ClockConfig>
 80005f8:	4603      	mov	r3, r0
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	d001      	beq.n	8000602 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80005fe:	f000 f92d 	bl	800085c <Error_Handler>
  }
}
 8000602:	bf00      	nop
 8000604:	3758      	adds	r7, #88	; 0x58
 8000606:	46bd      	mov	sp, r7
 8000608:	bd80      	pop	{r7, pc}
	...

0800060c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000610:	4b1b      	ldr	r3, [pc, #108]	; (8000680 <MX_I2C1_Init+0x74>)
 8000612:	4a1c      	ldr	r2, [pc, #112]	; (8000684 <MX_I2C1_Init+0x78>)
 8000614:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10909CEC;
 8000616:	4b1a      	ldr	r3, [pc, #104]	; (8000680 <MX_I2C1_Init+0x74>)
 8000618:	4a1b      	ldr	r2, [pc, #108]	; (8000688 <MX_I2C1_Init+0x7c>)
 800061a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800061c:	4b18      	ldr	r3, [pc, #96]	; (8000680 <MX_I2C1_Init+0x74>)
 800061e:	2200      	movs	r2, #0
 8000620:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000622:	4b17      	ldr	r3, [pc, #92]	; (8000680 <MX_I2C1_Init+0x74>)
 8000624:	2201      	movs	r2, #1
 8000626:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000628:	4b15      	ldr	r3, [pc, #84]	; (8000680 <MX_I2C1_Init+0x74>)
 800062a:	2200      	movs	r2, #0
 800062c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800062e:	4b14      	ldr	r3, [pc, #80]	; (8000680 <MX_I2C1_Init+0x74>)
 8000630:	2200      	movs	r2, #0
 8000632:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000634:	4b12      	ldr	r3, [pc, #72]	; (8000680 <MX_I2C1_Init+0x74>)
 8000636:	2200      	movs	r2, #0
 8000638:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800063a:	4b11      	ldr	r3, [pc, #68]	; (8000680 <MX_I2C1_Init+0x74>)
 800063c:	2200      	movs	r2, #0
 800063e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000640:	4b0f      	ldr	r3, [pc, #60]	; (8000680 <MX_I2C1_Init+0x74>)
 8000642:	2200      	movs	r2, #0
 8000644:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000646:	480e      	ldr	r0, [pc, #56]	; (8000680 <MX_I2C1_Init+0x74>)
 8000648:	f000 fd7e 	bl	8001148 <HAL_I2C_Init>
 800064c:	4603      	mov	r3, r0
 800064e:	2b00      	cmp	r3, #0
 8000650:	d001      	beq.n	8000656 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000652:	f000 f903 	bl	800085c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000656:	2100      	movs	r1, #0
 8000658:	4809      	ldr	r0, [pc, #36]	; (8000680 <MX_I2C1_Init+0x74>)
 800065a:	f001 f989 	bl	8001970 <HAL_I2CEx_ConfigAnalogFilter>
 800065e:	4603      	mov	r3, r0
 8000660:	2b00      	cmp	r3, #0
 8000662:	d001      	beq.n	8000668 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000664:	f000 f8fa 	bl	800085c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000668:	2100      	movs	r1, #0
 800066a:	4805      	ldr	r0, [pc, #20]	; (8000680 <MX_I2C1_Init+0x74>)
 800066c:	f001 f9cb 	bl	8001a06 <HAL_I2CEx_ConfigDigitalFilter>
 8000670:	4603      	mov	r3, r0
 8000672:	2b00      	cmp	r3, #0
 8000674:	d001      	beq.n	800067a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000676:	f000 f8f1 	bl	800085c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800067a:	bf00      	nop
 800067c:	bd80      	pop	{r7, pc}
 800067e:	bf00      	nop
 8000680:	20000030 	.word	0x20000030
 8000684:	40005400 	.word	0x40005400
 8000688:	10909cec 	.word	0x10909cec

0800068c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	b0b0      	sub	sp, #192	; 0xc0
 8000690:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART2_Init 0 */

  /* USER CODE END USART2_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 8000692:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000696:	2200      	movs	r2, #0
 8000698:	601a      	str	r2, [r3, #0]
 800069a:	605a      	str	r2, [r3, #4]
 800069c:	609a      	str	r2, [r3, #8]
 800069e:	60da      	str	r2, [r3, #12]
 80006a0:	611a      	str	r2, [r3, #16]
 80006a2:	615a      	str	r2, [r3, #20]
 80006a4:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006a6:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80006aa:	2200      	movs	r2, #0
 80006ac:	601a      	str	r2, [r3, #0]
 80006ae:	605a      	str	r2, [r3, #4]
 80006b0:	609a      	str	r2, [r3, #8]
 80006b2:	60da      	str	r2, [r3, #12]
 80006b4:	611a      	str	r2, [r3, #16]
 80006b6:	615a      	str	r2, [r3, #20]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80006b8:	1d3b      	adds	r3, r7, #4
 80006ba:	2288      	movs	r2, #136	; 0x88
 80006bc:	2100      	movs	r1, #0
 80006be:	4618      	mov	r0, r3
 80006c0:	f003 fd76 	bl	80041b0 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80006c4:	2302      	movs	r3, #2
 80006c6:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80006c8:	2300      	movs	r3, #0
 80006ca:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80006cc:	1d3b      	adds	r3, r7, #4
 80006ce:	4618      	mov	r0, r3
 80006d0:	f002 f812 	bl	80026f8 <HAL_RCCEx_PeriphCLKConfig>
 80006d4:	4603      	mov	r3, r0
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d001      	beq.n	80006de <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80006da:	f000 f8bf 	bl	800085c <Error_Handler>
  }

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART2);
 80006de:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80006e2:	f7ff fee1 	bl	80004a8 <LL_APB1_GRP1_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 80006e6:	2001      	movs	r0, #1
 80006e8:	f7ff fec6 	bl	8000478 <LL_AHB2_GRP1_EnableClock>
  /**USART2 GPIO Configuration
  PA2   ------> USART2_TX
  PA3   ------> USART2_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_2|LL_GPIO_PIN_3;
 80006ec:	230c      	movs	r3, #12
 80006ee:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80006f2:	2302      	movs	r3, #2
 80006f4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80006f8:	2303      	movs	r3, #3
 80006fa:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80006fe:	2300      	movs	r3, #0
 8000700:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000704:	2300      	movs	r3, #0
 8000706:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 800070a:	2307      	movs	r3, #7
 800070c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000710:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8000714:	4619      	mov	r1, r3
 8000716:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800071a:	f002 fdf4 	bl	8003306 <LL_GPIO_Init>

  /* USART2 interrupt Init */
  NVIC_SetPriority(USART2_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 800071e:	f7ff fdfb 	bl	8000318 <__NVIC_GetPriorityGrouping>
 8000722:	4603      	mov	r3, r0
 8000724:	2200      	movs	r2, #0
 8000726:	2100      	movs	r1, #0
 8000728:	4618      	mov	r0, r3
 800072a:	f7ff fe4b 	bl	80003c4 <NVIC_EncodePriority>
 800072e:	4603      	mov	r3, r0
 8000730:	4619      	mov	r1, r3
 8000732:	2026      	movs	r0, #38	; 0x26
 8000734:	f7ff fe1c 	bl	8000370 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART2_IRQn);
 8000738:	2026      	movs	r0, #38	; 0x26
 800073a:	f7ff fdfb 	bl	8000334 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 800073e:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8000742:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8000746:	2300      	movs	r3, #0
 8000748:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 800074c:	2300      	movs	r3, #0
 800074e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8000752:	2300      	movs	r3, #0
 8000754:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8000758:	230c      	movs	r3, #12
 800075a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 800075e:	2300      	movs	r3, #0
 8000760:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8000764:	2300      	movs	r3, #0
 8000766:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  LL_USART_Init(USART2, &USART_InitStruct);
 800076a:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800076e:	4619      	mov	r1, r3
 8000770:	4806      	ldr	r0, [pc, #24]	; (800078c <MX_USART2_UART_Init+0x100>)
 8000772:	f003 fa65 	bl	8003c40 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART2);
 8000776:	4805      	ldr	r0, [pc, #20]	; (800078c <MX_USART2_UART_Init+0x100>)
 8000778:	f7ff fe67 	bl	800044a <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART2);
 800077c:	4803      	ldr	r0, [pc, #12]	; (800078c <MX_USART2_UART_Init+0x100>)
 800077e:	f7ff fe54 	bl	800042a <LL_USART_Enable>
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000782:	bf00      	nop
 8000784:	37c0      	adds	r7, #192	; 0xc0
 8000786:	46bd      	mov	sp, r7
 8000788:	bd80      	pop	{r7, pc}
 800078a:	bf00      	nop
 800078c:	40004400 	.word	0x40004400

08000790 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	b08a      	sub	sp, #40	; 0x28
 8000794:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000796:	f107 0314 	add.w	r3, r7, #20
 800079a:	2200      	movs	r2, #0
 800079c:	601a      	str	r2, [r3, #0]
 800079e:	605a      	str	r2, [r3, #4]
 80007a0:	609a      	str	r2, [r3, #8]
 80007a2:	60da      	str	r2, [r3, #12]
 80007a4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007a6:	4b2b      	ldr	r3, [pc, #172]	; (8000854 <MX_GPIO_Init+0xc4>)
 80007a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007aa:	4a2a      	ldr	r2, [pc, #168]	; (8000854 <MX_GPIO_Init+0xc4>)
 80007ac:	f043 0304 	orr.w	r3, r3, #4
 80007b0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007b2:	4b28      	ldr	r3, [pc, #160]	; (8000854 <MX_GPIO_Init+0xc4>)
 80007b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007b6:	f003 0304 	and.w	r3, r3, #4
 80007ba:	613b      	str	r3, [r7, #16]
 80007bc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007be:	4b25      	ldr	r3, [pc, #148]	; (8000854 <MX_GPIO_Init+0xc4>)
 80007c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007c2:	4a24      	ldr	r2, [pc, #144]	; (8000854 <MX_GPIO_Init+0xc4>)
 80007c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007c8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007ca:	4b22      	ldr	r3, [pc, #136]	; (8000854 <MX_GPIO_Init+0xc4>)
 80007cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007d2:	60fb      	str	r3, [r7, #12]
 80007d4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007d6:	4b1f      	ldr	r3, [pc, #124]	; (8000854 <MX_GPIO_Init+0xc4>)
 80007d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007da:	4a1e      	ldr	r2, [pc, #120]	; (8000854 <MX_GPIO_Init+0xc4>)
 80007dc:	f043 0301 	orr.w	r3, r3, #1
 80007e0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007e2:	4b1c      	ldr	r3, [pc, #112]	; (8000854 <MX_GPIO_Init+0xc4>)
 80007e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007e6:	f003 0301 	and.w	r3, r3, #1
 80007ea:	60bb      	str	r3, [r7, #8]
 80007ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007ee:	4b19      	ldr	r3, [pc, #100]	; (8000854 <MX_GPIO_Init+0xc4>)
 80007f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007f2:	4a18      	ldr	r2, [pc, #96]	; (8000854 <MX_GPIO_Init+0xc4>)
 80007f4:	f043 0302 	orr.w	r3, r3, #2
 80007f8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007fa:	4b16      	ldr	r3, [pc, #88]	; (8000854 <MX_GPIO_Init+0xc4>)
 80007fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007fe:	f003 0302 	and.w	r3, r3, #2
 8000802:	607b      	str	r3, [r7, #4]
 8000804:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000806:	2200      	movs	r2, #0
 8000808:	2120      	movs	r1, #32
 800080a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800080e:	f000 fc83 	bl	8001118 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000812:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000816:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000818:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800081c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800081e:	2300      	movs	r3, #0
 8000820:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000822:	f107 0314 	add.w	r3, r7, #20
 8000826:	4619      	mov	r1, r3
 8000828:	480b      	ldr	r0, [pc, #44]	; (8000858 <MX_GPIO_Init+0xc8>)
 800082a:	f000 facb 	bl	8000dc4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800082e:	2320      	movs	r3, #32
 8000830:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000832:	2301      	movs	r3, #1
 8000834:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000836:	2300      	movs	r3, #0
 8000838:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800083a:	2300      	movs	r3, #0
 800083c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800083e:	f107 0314 	add.w	r3, r7, #20
 8000842:	4619      	mov	r1, r3
 8000844:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000848:	f000 fabc 	bl	8000dc4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800084c:	bf00      	nop
 800084e:	3728      	adds	r7, #40	; 0x28
 8000850:	46bd      	mov	sp, r7
 8000852:	bd80      	pop	{r7, pc}
 8000854:	40021000 	.word	0x40021000
 8000858:	48000800 	.word	0x48000800

0800085c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800085c:	b480      	push	{r7}
 800085e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000860:	b672      	cpsid	i
}
 8000862:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000864:	e7fe      	b.n	8000864 <Error_Handler+0x8>

08000866 <GUI_init>:
#include "ssd1306.h"
#include "ssd1306_fonts.h"


void GUI_init(void)
{
 8000866:	b580      	push	{r7, lr}
 8000868:	af00      	add	r7, sp, #0
	ssd1306_Init();
 800086a:	f003 fa9f 	bl	8003dac <ssd1306_Init>
	GUI_locked();
 800086e:	f000 f803 	bl	8000878 <GUI_locked>
}
 8000872:	bf00      	nop
 8000874:	bd80      	pop	{r7, pc}
	...

08000878 <GUI_locked>:

void GUI_locked(void)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	af00      	add	r7, sp, #0
	ssd1306_Fill(Black);
 800087c:	2000      	movs	r0, #0
 800087e:	f003 faff 	bl	8003e80 <ssd1306_Fill>
	ssd1306_SetCursor(20, 5);
 8000882:	2105      	movs	r1, #5
 8000884:	2014      	movs	r0, #20
 8000886:	f003 fc49 	bl	800411c <ssd1306_SetCursor>
	ssd1306_WriteString("Waiting", Font_16x26, White);
 800088a:	4a05      	ldr	r2, [pc, #20]	; (80008a0 <GUI_locked+0x28>)
 800088c:	2301      	movs	r3, #1
 800088e:	ca06      	ldmia	r2, {r1, r2}
 8000890:	4804      	ldr	r0, [pc, #16]	; (80008a4 <GUI_locked+0x2c>)
 8000892:	f003 fc1d 	bl	80040d0 <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 8000896:	f003 fb17 	bl	8003ec8 <ssd1306_UpdateScreen>
}
 800089a:	bf00      	nop
 800089c:	bd80      	pop	{r7, pc}
 800089e:	bf00      	nop
 80008a0:	2000000c 	.word	0x2000000c
 80008a4:	08004220 	.word	0x08004220

080008a8 <GUI_Success>:

void GUI_Success(void)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	af00      	add	r7, sp, #0
	ssd1306_Fill(Black);
 80008ac:	2000      	movs	r0, #0
 80008ae:	f003 fae7 	bl	8003e80 <ssd1306_Fill>
	ssd1306_SetCursor(5, 5);
 80008b2:	2105      	movs	r1, #5
 80008b4:	2005      	movs	r0, #5
 80008b6:	f003 fc31 	bl	800411c <ssd1306_SetCursor>
	ssd1306_WriteString("Success", Font_16x26, White);
 80008ba:	4a05      	ldr	r2, [pc, #20]	; (80008d0 <GUI_Success+0x28>)
 80008bc:	2301      	movs	r3, #1
 80008be:	ca06      	ldmia	r2, {r1, r2}
 80008c0:	4804      	ldr	r0, [pc, #16]	; (80008d4 <GUI_Success+0x2c>)
 80008c2:	f003 fc05 	bl	80040d0 <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 80008c6:	f003 faff 	bl	8003ec8 <ssd1306_UpdateScreen>
}
 80008ca:	bf00      	nop
 80008cc:	bd80      	pop	{r7, pc}
 80008ce:	bf00      	nop
 80008d0:	2000000c 	.word	0x2000000c
 80008d4:	08004228 	.word	0x08004228

080008d8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008d8:	b480      	push	{r7}
 80008da:	b083      	sub	sp, #12
 80008dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008de:	4b0f      	ldr	r3, [pc, #60]	; (800091c <HAL_MspInit+0x44>)
 80008e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80008e2:	4a0e      	ldr	r2, [pc, #56]	; (800091c <HAL_MspInit+0x44>)
 80008e4:	f043 0301 	orr.w	r3, r3, #1
 80008e8:	6613      	str	r3, [r2, #96]	; 0x60
 80008ea:	4b0c      	ldr	r3, [pc, #48]	; (800091c <HAL_MspInit+0x44>)
 80008ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80008ee:	f003 0301 	and.w	r3, r3, #1
 80008f2:	607b      	str	r3, [r7, #4]
 80008f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008f6:	4b09      	ldr	r3, [pc, #36]	; (800091c <HAL_MspInit+0x44>)
 80008f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80008fa:	4a08      	ldr	r2, [pc, #32]	; (800091c <HAL_MspInit+0x44>)
 80008fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000900:	6593      	str	r3, [r2, #88]	; 0x58
 8000902:	4b06      	ldr	r3, [pc, #24]	; (800091c <HAL_MspInit+0x44>)
 8000904:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000906:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800090a:	603b      	str	r3, [r7, #0]
 800090c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800090e:	bf00      	nop
 8000910:	370c      	adds	r7, #12
 8000912:	46bd      	mov	sp, r7
 8000914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000918:	4770      	bx	lr
 800091a:	bf00      	nop
 800091c:	40021000 	.word	0x40021000

08000920 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	b0ac      	sub	sp, #176	; 0xb0
 8000924:	af00      	add	r7, sp, #0
 8000926:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000928:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800092c:	2200      	movs	r2, #0
 800092e:	601a      	str	r2, [r3, #0]
 8000930:	605a      	str	r2, [r3, #4]
 8000932:	609a      	str	r2, [r3, #8]
 8000934:	60da      	str	r2, [r3, #12]
 8000936:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000938:	f107 0314 	add.w	r3, r7, #20
 800093c:	2288      	movs	r2, #136	; 0x88
 800093e:	2100      	movs	r1, #0
 8000940:	4618      	mov	r0, r3
 8000942:	f003 fc35 	bl	80041b0 <memset>
  if(hi2c->Instance==I2C1)
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	681b      	ldr	r3, [r3, #0]
 800094a:	4a21      	ldr	r2, [pc, #132]	; (80009d0 <HAL_I2C_MspInit+0xb0>)
 800094c:	4293      	cmp	r3, r2
 800094e:	d13b      	bne.n	80009c8 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000950:	2340      	movs	r3, #64	; 0x40
 8000952:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000954:	2300      	movs	r3, #0
 8000956:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000958:	f107 0314 	add.w	r3, r7, #20
 800095c:	4618      	mov	r0, r3
 800095e:	f001 fecb 	bl	80026f8 <HAL_RCCEx_PeriphCLKConfig>
 8000962:	4603      	mov	r3, r0
 8000964:	2b00      	cmp	r3, #0
 8000966:	d001      	beq.n	800096c <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000968:	f7ff ff78 	bl	800085c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800096c:	4b19      	ldr	r3, [pc, #100]	; (80009d4 <HAL_I2C_MspInit+0xb4>)
 800096e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000970:	4a18      	ldr	r2, [pc, #96]	; (80009d4 <HAL_I2C_MspInit+0xb4>)
 8000972:	f043 0302 	orr.w	r3, r3, #2
 8000976:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000978:	4b16      	ldr	r3, [pc, #88]	; (80009d4 <HAL_I2C_MspInit+0xb4>)
 800097a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800097c:	f003 0302 	and.w	r3, r3, #2
 8000980:	613b      	str	r3, [r7, #16]
 8000982:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000984:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000988:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800098c:	2312      	movs	r3, #18
 800098e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000992:	2300      	movs	r3, #0
 8000994:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000998:	2303      	movs	r3, #3
 800099a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800099e:	2304      	movs	r3, #4
 80009a0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009a4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80009a8:	4619      	mov	r1, r3
 80009aa:	480b      	ldr	r0, [pc, #44]	; (80009d8 <HAL_I2C_MspInit+0xb8>)
 80009ac:	f000 fa0a 	bl	8000dc4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80009b0:	4b08      	ldr	r3, [pc, #32]	; (80009d4 <HAL_I2C_MspInit+0xb4>)
 80009b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009b4:	4a07      	ldr	r2, [pc, #28]	; (80009d4 <HAL_I2C_MspInit+0xb4>)
 80009b6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80009ba:	6593      	str	r3, [r2, #88]	; 0x58
 80009bc:	4b05      	ldr	r3, [pc, #20]	; (80009d4 <HAL_I2C_MspInit+0xb4>)
 80009be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009c0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80009c4:	60fb      	str	r3, [r7, #12]
 80009c6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80009c8:	bf00      	nop
 80009ca:	37b0      	adds	r7, #176	; 0xb0
 80009cc:	46bd      	mov	sp, r7
 80009ce:	bd80      	pop	{r7, pc}
 80009d0:	40005400 	.word	0x40005400
 80009d4:	40021000 	.word	0x40021000
 80009d8:	48000400 	.word	0x48000400

080009dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009dc:	b480      	push	{r7}
 80009de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80009e0:	e7fe      	b.n	80009e0 <NMI_Handler+0x4>

080009e2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009e2:	b480      	push	{r7}
 80009e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009e6:	e7fe      	b.n	80009e6 <HardFault_Handler+0x4>

080009e8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009e8:	b480      	push	{r7}
 80009ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009ec:	e7fe      	b.n	80009ec <MemManage_Handler+0x4>

080009ee <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009ee:	b480      	push	{r7}
 80009f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009f2:	e7fe      	b.n	80009f2 <BusFault_Handler+0x4>

080009f4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009f4:	b480      	push	{r7}
 80009f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009f8:	e7fe      	b.n	80009f8 <UsageFault_Handler+0x4>

080009fa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009fa:	b480      	push	{r7}
 80009fc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009fe:	bf00      	nop
 8000a00:	46bd      	mov	sp, r7
 8000a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a06:	4770      	bx	lr

08000a08 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a08:	b480      	push	{r7}
 8000a0a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a0c:	bf00      	nop
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a14:	4770      	bx	lr

08000a16 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a16:	b480      	push	{r7}
 8000a18:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a1a:	bf00      	nop
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a22:	4770      	bx	lr

08000a24 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a28:	f000 f8a2 	bl	8000b70 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a2c:	bf00      	nop
 8000a2e:	bd80      	pop	{r7, pc}

08000a30 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000a30:	b480      	push	{r7}
 8000a32:	af00      	add	r7, sp, #0

  /* USER CODE END USART2_IRQn 0 */
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000a34:	bf00      	nop
 8000a36:	46bd      	mov	sp, r7
 8000a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3c:	4770      	bx	lr
	...

08000a40 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000a40:	b480      	push	{r7}
 8000a42:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000a44:	4b06      	ldr	r3, [pc, #24]	; (8000a60 <SystemInit+0x20>)
 8000a46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a4a:	4a05      	ldr	r2, [pc, #20]	; (8000a60 <SystemInit+0x20>)
 8000a4c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a50:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000a54:	bf00      	nop
 8000a56:	46bd      	mov	sp, r7
 8000a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a5c:	4770      	bx	lr
 8000a5e:	bf00      	nop
 8000a60:	e000ed00 	.word	0xe000ed00

08000a64 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000a64:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000a9c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000a68:	f7ff ffea 	bl	8000a40 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a6c:	480c      	ldr	r0, [pc, #48]	; (8000aa0 <LoopForever+0x6>)
  ldr r1, =_edata
 8000a6e:	490d      	ldr	r1, [pc, #52]	; (8000aa4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000a70:	4a0d      	ldr	r2, [pc, #52]	; (8000aa8 <LoopForever+0xe>)
  movs r3, #0
 8000a72:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a74:	e002      	b.n	8000a7c <LoopCopyDataInit>

08000a76 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a76:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a78:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a7a:	3304      	adds	r3, #4

08000a7c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a7c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a7e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a80:	d3f9      	bcc.n	8000a76 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a82:	4a0a      	ldr	r2, [pc, #40]	; (8000aac <LoopForever+0x12>)
  ldr r4, =_ebss
 8000a84:	4c0a      	ldr	r4, [pc, #40]	; (8000ab0 <LoopForever+0x16>)
  movs r3, #0
 8000a86:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a88:	e001      	b.n	8000a8e <LoopFillZerobss>

08000a8a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a8a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a8c:	3204      	adds	r2, #4

08000a8e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a8e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a90:	d3fb      	bcc.n	8000a8a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000a92:	f003 fb95 	bl	80041c0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000a96:	f7ff fd1f 	bl	80004d8 <main>

08000a9a <LoopForever>:

LoopForever:
    b LoopForever
 8000a9a:	e7fe      	b.n	8000a9a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000a9c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000aa0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000aa4:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8000aa8:	080055dc 	.word	0x080055dc
  ldr r2, =_sbss
 8000aac:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8000ab0:	200004a8 	.word	0x200004a8

08000ab4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000ab4:	e7fe      	b.n	8000ab4 <ADC1_2_IRQHandler>
	...

08000ab8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b082      	sub	sp, #8
 8000abc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000abe:	2300      	movs	r3, #0
 8000ac0:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ac2:	4b0c      	ldr	r3, [pc, #48]	; (8000af4 <HAL_Init+0x3c>)
 8000ac4:	681b      	ldr	r3, [r3, #0]
 8000ac6:	4a0b      	ldr	r2, [pc, #44]	; (8000af4 <HAL_Init+0x3c>)
 8000ac8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000acc:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ace:	2003      	movs	r0, #3
 8000ad0:	f000 f944 	bl	8000d5c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000ad4:	2000      	movs	r0, #0
 8000ad6:	f000 f80f 	bl	8000af8 <HAL_InitTick>
 8000ada:	4603      	mov	r3, r0
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	d002      	beq.n	8000ae6 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000ae0:	2301      	movs	r3, #1
 8000ae2:	71fb      	strb	r3, [r7, #7]
 8000ae4:	e001      	b.n	8000aea <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000ae6:	f7ff fef7 	bl	80008d8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000aea:	79fb      	ldrb	r3, [r7, #7]
}
 8000aec:	4618      	mov	r0, r3
 8000aee:	3708      	adds	r7, #8
 8000af0:	46bd      	mov	sp, r7
 8000af2:	bd80      	pop	{r7, pc}
 8000af4:	40022000 	.word	0x40022000

08000af8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b084      	sub	sp, #16
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000b00:	2300      	movs	r3, #0
 8000b02:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000b04:	4b17      	ldr	r3, [pc, #92]	; (8000b64 <HAL_InitTick+0x6c>)
 8000b06:	781b      	ldrb	r3, [r3, #0]
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	d023      	beq.n	8000b54 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000b0c:	4b16      	ldr	r3, [pc, #88]	; (8000b68 <HAL_InitTick+0x70>)
 8000b0e:	681a      	ldr	r2, [r3, #0]
 8000b10:	4b14      	ldr	r3, [pc, #80]	; (8000b64 <HAL_InitTick+0x6c>)
 8000b12:	781b      	ldrb	r3, [r3, #0]
 8000b14:	4619      	mov	r1, r3
 8000b16:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b1a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b22:	4618      	mov	r0, r3
 8000b24:	f000 f941 	bl	8000daa <HAL_SYSTICK_Config>
 8000b28:	4603      	mov	r3, r0
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d10f      	bne.n	8000b4e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	2b0f      	cmp	r3, #15
 8000b32:	d809      	bhi.n	8000b48 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b34:	2200      	movs	r2, #0
 8000b36:	6879      	ldr	r1, [r7, #4]
 8000b38:	f04f 30ff 	mov.w	r0, #4294967295
 8000b3c:	f000 f919 	bl	8000d72 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000b40:	4a0a      	ldr	r2, [pc, #40]	; (8000b6c <HAL_InitTick+0x74>)
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	6013      	str	r3, [r2, #0]
 8000b46:	e007      	b.n	8000b58 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000b48:	2301      	movs	r3, #1
 8000b4a:	73fb      	strb	r3, [r7, #15]
 8000b4c:	e004      	b.n	8000b58 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000b4e:	2301      	movs	r3, #1
 8000b50:	73fb      	strb	r3, [r7, #15]
 8000b52:	e001      	b.n	8000b58 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000b54:	2301      	movs	r3, #1
 8000b56:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000b58:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b5a:	4618      	mov	r0, r3
 8000b5c:	3710      	adds	r7, #16
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	bd80      	pop	{r7, pc}
 8000b62:	bf00      	nop
 8000b64:	20000008 	.word	0x20000008
 8000b68:	20000000 	.word	0x20000000
 8000b6c:	20000004 	.word	0x20000004

08000b70 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b70:	b480      	push	{r7}
 8000b72:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000b74:	4b06      	ldr	r3, [pc, #24]	; (8000b90 <HAL_IncTick+0x20>)
 8000b76:	781b      	ldrb	r3, [r3, #0]
 8000b78:	461a      	mov	r2, r3
 8000b7a:	4b06      	ldr	r3, [pc, #24]	; (8000b94 <HAL_IncTick+0x24>)
 8000b7c:	681b      	ldr	r3, [r3, #0]
 8000b7e:	4413      	add	r3, r2
 8000b80:	4a04      	ldr	r2, [pc, #16]	; (8000b94 <HAL_IncTick+0x24>)
 8000b82:	6013      	str	r3, [r2, #0]
}
 8000b84:	bf00      	nop
 8000b86:	46bd      	mov	sp, r7
 8000b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8c:	4770      	bx	lr
 8000b8e:	bf00      	nop
 8000b90:	20000008 	.word	0x20000008
 8000b94:	2000009c 	.word	0x2000009c

08000b98 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	af00      	add	r7, sp, #0
  return uwTick;
 8000b9c:	4b03      	ldr	r3, [pc, #12]	; (8000bac <HAL_GetTick+0x14>)
 8000b9e:	681b      	ldr	r3, [r3, #0]
}
 8000ba0:	4618      	mov	r0, r3
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba8:	4770      	bx	lr
 8000baa:	bf00      	nop
 8000bac:	2000009c 	.word	0x2000009c

08000bb0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b084      	sub	sp, #16
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000bb8:	f7ff ffee 	bl	8000b98 <HAL_GetTick>
 8000bbc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000bc2:	68fb      	ldr	r3, [r7, #12]
 8000bc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000bc8:	d005      	beq.n	8000bd6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000bca:	4b0a      	ldr	r3, [pc, #40]	; (8000bf4 <HAL_Delay+0x44>)
 8000bcc:	781b      	ldrb	r3, [r3, #0]
 8000bce:	461a      	mov	r2, r3
 8000bd0:	68fb      	ldr	r3, [r7, #12]
 8000bd2:	4413      	add	r3, r2
 8000bd4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000bd6:	bf00      	nop
 8000bd8:	f7ff ffde 	bl	8000b98 <HAL_GetTick>
 8000bdc:	4602      	mov	r2, r0
 8000bde:	68bb      	ldr	r3, [r7, #8]
 8000be0:	1ad3      	subs	r3, r2, r3
 8000be2:	68fa      	ldr	r2, [r7, #12]
 8000be4:	429a      	cmp	r2, r3
 8000be6:	d8f7      	bhi.n	8000bd8 <HAL_Delay+0x28>
  {
  }
}
 8000be8:	bf00      	nop
 8000bea:	bf00      	nop
 8000bec:	3710      	adds	r7, #16
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	bd80      	pop	{r7, pc}
 8000bf2:	bf00      	nop
 8000bf4:	20000008 	.word	0x20000008

08000bf8 <__NVIC_SetPriorityGrouping>:
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	b085      	sub	sp, #20
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	f003 0307 	and.w	r3, r3, #7
 8000c06:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c08:	4b0c      	ldr	r3, [pc, #48]	; (8000c3c <__NVIC_SetPriorityGrouping+0x44>)
 8000c0a:	68db      	ldr	r3, [r3, #12]
 8000c0c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c0e:	68ba      	ldr	r2, [r7, #8]
 8000c10:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c14:	4013      	ands	r3, r2
 8000c16:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c18:	68fb      	ldr	r3, [r7, #12]
 8000c1a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c1c:	68bb      	ldr	r3, [r7, #8]
 8000c1e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c20:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c24:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c28:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c2a:	4a04      	ldr	r2, [pc, #16]	; (8000c3c <__NVIC_SetPriorityGrouping+0x44>)
 8000c2c:	68bb      	ldr	r3, [r7, #8]
 8000c2e:	60d3      	str	r3, [r2, #12]
}
 8000c30:	bf00      	nop
 8000c32:	3714      	adds	r7, #20
 8000c34:	46bd      	mov	sp, r7
 8000c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3a:	4770      	bx	lr
 8000c3c:	e000ed00 	.word	0xe000ed00

08000c40 <__NVIC_GetPriorityGrouping>:
{
 8000c40:	b480      	push	{r7}
 8000c42:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c44:	4b04      	ldr	r3, [pc, #16]	; (8000c58 <__NVIC_GetPriorityGrouping+0x18>)
 8000c46:	68db      	ldr	r3, [r3, #12]
 8000c48:	0a1b      	lsrs	r3, r3, #8
 8000c4a:	f003 0307 	and.w	r3, r3, #7
}
 8000c4e:	4618      	mov	r0, r3
 8000c50:	46bd      	mov	sp, r7
 8000c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c56:	4770      	bx	lr
 8000c58:	e000ed00 	.word	0xe000ed00

08000c5c <__NVIC_SetPriority>:
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	b083      	sub	sp, #12
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	4603      	mov	r3, r0
 8000c64:	6039      	str	r1, [r7, #0]
 8000c66:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	db0a      	blt.n	8000c86 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c70:	683b      	ldr	r3, [r7, #0]
 8000c72:	b2da      	uxtb	r2, r3
 8000c74:	490c      	ldr	r1, [pc, #48]	; (8000ca8 <__NVIC_SetPriority+0x4c>)
 8000c76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c7a:	0112      	lsls	r2, r2, #4
 8000c7c:	b2d2      	uxtb	r2, r2
 8000c7e:	440b      	add	r3, r1
 8000c80:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000c84:	e00a      	b.n	8000c9c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c86:	683b      	ldr	r3, [r7, #0]
 8000c88:	b2da      	uxtb	r2, r3
 8000c8a:	4908      	ldr	r1, [pc, #32]	; (8000cac <__NVIC_SetPriority+0x50>)
 8000c8c:	79fb      	ldrb	r3, [r7, #7]
 8000c8e:	f003 030f 	and.w	r3, r3, #15
 8000c92:	3b04      	subs	r3, #4
 8000c94:	0112      	lsls	r2, r2, #4
 8000c96:	b2d2      	uxtb	r2, r2
 8000c98:	440b      	add	r3, r1
 8000c9a:	761a      	strb	r2, [r3, #24]
}
 8000c9c:	bf00      	nop
 8000c9e:	370c      	adds	r7, #12
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca6:	4770      	bx	lr
 8000ca8:	e000e100 	.word	0xe000e100
 8000cac:	e000ed00 	.word	0xe000ed00

08000cb0 <NVIC_EncodePriority>:
{
 8000cb0:	b480      	push	{r7}
 8000cb2:	b089      	sub	sp, #36	; 0x24
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	60f8      	str	r0, [r7, #12]
 8000cb8:	60b9      	str	r1, [r7, #8]
 8000cba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000cbc:	68fb      	ldr	r3, [r7, #12]
 8000cbe:	f003 0307 	and.w	r3, r3, #7
 8000cc2:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000cc4:	69fb      	ldr	r3, [r7, #28]
 8000cc6:	f1c3 0307 	rsb	r3, r3, #7
 8000cca:	2b04      	cmp	r3, #4
 8000ccc:	bf28      	it	cs
 8000cce:	2304      	movcs	r3, #4
 8000cd0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000cd2:	69fb      	ldr	r3, [r7, #28]
 8000cd4:	3304      	adds	r3, #4
 8000cd6:	2b06      	cmp	r3, #6
 8000cd8:	d902      	bls.n	8000ce0 <NVIC_EncodePriority+0x30>
 8000cda:	69fb      	ldr	r3, [r7, #28]
 8000cdc:	3b03      	subs	r3, #3
 8000cde:	e000      	b.n	8000ce2 <NVIC_EncodePriority+0x32>
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ce4:	f04f 32ff 	mov.w	r2, #4294967295
 8000ce8:	69bb      	ldr	r3, [r7, #24]
 8000cea:	fa02 f303 	lsl.w	r3, r2, r3
 8000cee:	43da      	mvns	r2, r3
 8000cf0:	68bb      	ldr	r3, [r7, #8]
 8000cf2:	401a      	ands	r2, r3
 8000cf4:	697b      	ldr	r3, [r7, #20]
 8000cf6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000cf8:	f04f 31ff 	mov.w	r1, #4294967295
 8000cfc:	697b      	ldr	r3, [r7, #20]
 8000cfe:	fa01 f303 	lsl.w	r3, r1, r3
 8000d02:	43d9      	mvns	r1, r3
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d08:	4313      	orrs	r3, r2
}
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	3724      	adds	r7, #36	; 0x24
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d14:	4770      	bx	lr
	...

08000d18 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b082      	sub	sp, #8
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	3b01      	subs	r3, #1
 8000d24:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000d28:	d301      	bcc.n	8000d2e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d2a:	2301      	movs	r3, #1
 8000d2c:	e00f      	b.n	8000d4e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d2e:	4a0a      	ldr	r2, [pc, #40]	; (8000d58 <SysTick_Config+0x40>)
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	3b01      	subs	r3, #1
 8000d34:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d36:	210f      	movs	r1, #15
 8000d38:	f04f 30ff 	mov.w	r0, #4294967295
 8000d3c:	f7ff ff8e 	bl	8000c5c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d40:	4b05      	ldr	r3, [pc, #20]	; (8000d58 <SysTick_Config+0x40>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d46:	4b04      	ldr	r3, [pc, #16]	; (8000d58 <SysTick_Config+0x40>)
 8000d48:	2207      	movs	r2, #7
 8000d4a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d4c:	2300      	movs	r3, #0
}
 8000d4e:	4618      	mov	r0, r3
 8000d50:	3708      	adds	r7, #8
 8000d52:	46bd      	mov	sp, r7
 8000d54:	bd80      	pop	{r7, pc}
 8000d56:	bf00      	nop
 8000d58:	e000e010 	.word	0xe000e010

08000d5c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b082      	sub	sp, #8
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d64:	6878      	ldr	r0, [r7, #4]
 8000d66:	f7ff ff47 	bl	8000bf8 <__NVIC_SetPriorityGrouping>
}
 8000d6a:	bf00      	nop
 8000d6c:	3708      	adds	r7, #8
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	bd80      	pop	{r7, pc}

08000d72 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d72:	b580      	push	{r7, lr}
 8000d74:	b086      	sub	sp, #24
 8000d76:	af00      	add	r7, sp, #0
 8000d78:	4603      	mov	r3, r0
 8000d7a:	60b9      	str	r1, [r7, #8]
 8000d7c:	607a      	str	r2, [r7, #4]
 8000d7e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000d80:	2300      	movs	r3, #0
 8000d82:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000d84:	f7ff ff5c 	bl	8000c40 <__NVIC_GetPriorityGrouping>
 8000d88:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d8a:	687a      	ldr	r2, [r7, #4]
 8000d8c:	68b9      	ldr	r1, [r7, #8]
 8000d8e:	6978      	ldr	r0, [r7, #20]
 8000d90:	f7ff ff8e 	bl	8000cb0 <NVIC_EncodePriority>
 8000d94:	4602      	mov	r2, r0
 8000d96:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d9a:	4611      	mov	r1, r2
 8000d9c:	4618      	mov	r0, r3
 8000d9e:	f7ff ff5d 	bl	8000c5c <__NVIC_SetPriority>
}
 8000da2:	bf00      	nop
 8000da4:	3718      	adds	r7, #24
 8000da6:	46bd      	mov	sp, r7
 8000da8:	bd80      	pop	{r7, pc}

08000daa <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000daa:	b580      	push	{r7, lr}
 8000dac:	b082      	sub	sp, #8
 8000dae:	af00      	add	r7, sp, #0
 8000db0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000db2:	6878      	ldr	r0, [r7, #4]
 8000db4:	f7ff ffb0 	bl	8000d18 <SysTick_Config>
 8000db8:	4603      	mov	r3, r0
}
 8000dba:	4618      	mov	r0, r3
 8000dbc:	3708      	adds	r7, #8
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	bd80      	pop	{r7, pc}
	...

08000dc4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	b087      	sub	sp, #28
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	6078      	str	r0, [r7, #4]
 8000dcc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000dce:	2300      	movs	r3, #0
 8000dd0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000dd2:	e17f      	b.n	80010d4 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000dd4:	683b      	ldr	r3, [r7, #0]
 8000dd6:	681a      	ldr	r2, [r3, #0]
 8000dd8:	2101      	movs	r1, #1
 8000dda:	697b      	ldr	r3, [r7, #20]
 8000ddc:	fa01 f303 	lsl.w	r3, r1, r3
 8000de0:	4013      	ands	r3, r2
 8000de2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000de4:	68fb      	ldr	r3, [r7, #12]
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	f000 8171 	beq.w	80010ce <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000dec:	683b      	ldr	r3, [r7, #0]
 8000dee:	685b      	ldr	r3, [r3, #4]
 8000df0:	f003 0303 	and.w	r3, r3, #3
 8000df4:	2b01      	cmp	r3, #1
 8000df6:	d005      	beq.n	8000e04 <HAL_GPIO_Init+0x40>
 8000df8:	683b      	ldr	r3, [r7, #0]
 8000dfa:	685b      	ldr	r3, [r3, #4]
 8000dfc:	f003 0303 	and.w	r3, r3, #3
 8000e00:	2b02      	cmp	r3, #2
 8000e02:	d130      	bne.n	8000e66 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	689b      	ldr	r3, [r3, #8]
 8000e08:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000e0a:	697b      	ldr	r3, [r7, #20]
 8000e0c:	005b      	lsls	r3, r3, #1
 8000e0e:	2203      	movs	r2, #3
 8000e10:	fa02 f303 	lsl.w	r3, r2, r3
 8000e14:	43db      	mvns	r3, r3
 8000e16:	693a      	ldr	r2, [r7, #16]
 8000e18:	4013      	ands	r3, r2
 8000e1a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000e1c:	683b      	ldr	r3, [r7, #0]
 8000e1e:	68da      	ldr	r2, [r3, #12]
 8000e20:	697b      	ldr	r3, [r7, #20]
 8000e22:	005b      	lsls	r3, r3, #1
 8000e24:	fa02 f303 	lsl.w	r3, r2, r3
 8000e28:	693a      	ldr	r2, [r7, #16]
 8000e2a:	4313      	orrs	r3, r2
 8000e2c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	693a      	ldr	r2, [r7, #16]
 8000e32:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	685b      	ldr	r3, [r3, #4]
 8000e38:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000e3a:	2201      	movs	r2, #1
 8000e3c:	697b      	ldr	r3, [r7, #20]
 8000e3e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e42:	43db      	mvns	r3, r3
 8000e44:	693a      	ldr	r2, [r7, #16]
 8000e46:	4013      	ands	r3, r2
 8000e48:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e4a:	683b      	ldr	r3, [r7, #0]
 8000e4c:	685b      	ldr	r3, [r3, #4]
 8000e4e:	091b      	lsrs	r3, r3, #4
 8000e50:	f003 0201 	and.w	r2, r3, #1
 8000e54:	697b      	ldr	r3, [r7, #20]
 8000e56:	fa02 f303 	lsl.w	r3, r2, r3
 8000e5a:	693a      	ldr	r2, [r7, #16]
 8000e5c:	4313      	orrs	r3, r2
 8000e5e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	693a      	ldr	r2, [r7, #16]
 8000e64:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8000e66:	683b      	ldr	r3, [r7, #0]
 8000e68:	685b      	ldr	r3, [r3, #4]
 8000e6a:	f003 0303 	and.w	r3, r3, #3
 8000e6e:	2b03      	cmp	r3, #3
 8000e70:	d118      	bne.n	8000ea4 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e76:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8000e78:	2201      	movs	r2, #1
 8000e7a:	697b      	ldr	r3, [r7, #20]
 8000e7c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e80:	43db      	mvns	r3, r3
 8000e82:	693a      	ldr	r2, [r7, #16]
 8000e84:	4013      	ands	r3, r2
 8000e86:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8000e88:	683b      	ldr	r3, [r7, #0]
 8000e8a:	685b      	ldr	r3, [r3, #4]
 8000e8c:	08db      	lsrs	r3, r3, #3
 8000e8e:	f003 0201 	and.w	r2, r3, #1
 8000e92:	697b      	ldr	r3, [r7, #20]
 8000e94:	fa02 f303 	lsl.w	r3, r2, r3
 8000e98:	693a      	ldr	r2, [r7, #16]
 8000e9a:	4313      	orrs	r3, r2
 8000e9c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	693a      	ldr	r2, [r7, #16]
 8000ea2:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000ea4:	683b      	ldr	r3, [r7, #0]
 8000ea6:	685b      	ldr	r3, [r3, #4]
 8000ea8:	f003 0303 	and.w	r3, r3, #3
 8000eac:	2b03      	cmp	r3, #3
 8000eae:	d017      	beq.n	8000ee0 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	68db      	ldr	r3, [r3, #12]
 8000eb4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000eb6:	697b      	ldr	r3, [r7, #20]
 8000eb8:	005b      	lsls	r3, r3, #1
 8000eba:	2203      	movs	r2, #3
 8000ebc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec0:	43db      	mvns	r3, r3
 8000ec2:	693a      	ldr	r2, [r7, #16]
 8000ec4:	4013      	ands	r3, r2
 8000ec6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000ec8:	683b      	ldr	r3, [r7, #0]
 8000eca:	689a      	ldr	r2, [r3, #8]
 8000ecc:	697b      	ldr	r3, [r7, #20]
 8000ece:	005b      	lsls	r3, r3, #1
 8000ed0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed4:	693a      	ldr	r2, [r7, #16]
 8000ed6:	4313      	orrs	r3, r2
 8000ed8:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	693a      	ldr	r2, [r7, #16]
 8000ede:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ee0:	683b      	ldr	r3, [r7, #0]
 8000ee2:	685b      	ldr	r3, [r3, #4]
 8000ee4:	f003 0303 	and.w	r3, r3, #3
 8000ee8:	2b02      	cmp	r3, #2
 8000eea:	d123      	bne.n	8000f34 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000eec:	697b      	ldr	r3, [r7, #20]
 8000eee:	08da      	lsrs	r2, r3, #3
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	3208      	adds	r2, #8
 8000ef4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ef8:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000efa:	697b      	ldr	r3, [r7, #20]
 8000efc:	f003 0307 	and.w	r3, r3, #7
 8000f00:	009b      	lsls	r3, r3, #2
 8000f02:	220f      	movs	r2, #15
 8000f04:	fa02 f303 	lsl.w	r3, r2, r3
 8000f08:	43db      	mvns	r3, r3
 8000f0a:	693a      	ldr	r2, [r7, #16]
 8000f0c:	4013      	ands	r3, r2
 8000f0e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000f10:	683b      	ldr	r3, [r7, #0]
 8000f12:	691a      	ldr	r2, [r3, #16]
 8000f14:	697b      	ldr	r3, [r7, #20]
 8000f16:	f003 0307 	and.w	r3, r3, #7
 8000f1a:	009b      	lsls	r3, r3, #2
 8000f1c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f20:	693a      	ldr	r2, [r7, #16]
 8000f22:	4313      	orrs	r3, r2
 8000f24:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000f26:	697b      	ldr	r3, [r7, #20]
 8000f28:	08da      	lsrs	r2, r3, #3
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	3208      	adds	r2, #8
 8000f2e:	6939      	ldr	r1, [r7, #16]
 8000f30:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000f3a:	697b      	ldr	r3, [r7, #20]
 8000f3c:	005b      	lsls	r3, r3, #1
 8000f3e:	2203      	movs	r2, #3
 8000f40:	fa02 f303 	lsl.w	r3, r2, r3
 8000f44:	43db      	mvns	r3, r3
 8000f46:	693a      	ldr	r2, [r7, #16]
 8000f48:	4013      	ands	r3, r2
 8000f4a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000f4c:	683b      	ldr	r3, [r7, #0]
 8000f4e:	685b      	ldr	r3, [r3, #4]
 8000f50:	f003 0203 	and.w	r2, r3, #3
 8000f54:	697b      	ldr	r3, [r7, #20]
 8000f56:	005b      	lsls	r3, r3, #1
 8000f58:	fa02 f303 	lsl.w	r3, r2, r3
 8000f5c:	693a      	ldr	r2, [r7, #16]
 8000f5e:	4313      	orrs	r3, r2
 8000f60:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	693a      	ldr	r2, [r7, #16]
 8000f66:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000f68:	683b      	ldr	r3, [r7, #0]
 8000f6a:	685b      	ldr	r3, [r3, #4]
 8000f6c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	f000 80ac 	beq.w	80010ce <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f76:	4b5f      	ldr	r3, [pc, #380]	; (80010f4 <HAL_GPIO_Init+0x330>)
 8000f78:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f7a:	4a5e      	ldr	r2, [pc, #376]	; (80010f4 <HAL_GPIO_Init+0x330>)
 8000f7c:	f043 0301 	orr.w	r3, r3, #1
 8000f80:	6613      	str	r3, [r2, #96]	; 0x60
 8000f82:	4b5c      	ldr	r3, [pc, #368]	; (80010f4 <HAL_GPIO_Init+0x330>)
 8000f84:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f86:	f003 0301 	and.w	r3, r3, #1
 8000f8a:	60bb      	str	r3, [r7, #8]
 8000f8c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000f8e:	4a5a      	ldr	r2, [pc, #360]	; (80010f8 <HAL_GPIO_Init+0x334>)
 8000f90:	697b      	ldr	r3, [r7, #20]
 8000f92:	089b      	lsrs	r3, r3, #2
 8000f94:	3302      	adds	r3, #2
 8000f96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f9a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000f9c:	697b      	ldr	r3, [r7, #20]
 8000f9e:	f003 0303 	and.w	r3, r3, #3
 8000fa2:	009b      	lsls	r3, r3, #2
 8000fa4:	220f      	movs	r2, #15
 8000fa6:	fa02 f303 	lsl.w	r3, r2, r3
 8000faa:	43db      	mvns	r3, r3
 8000fac:	693a      	ldr	r2, [r7, #16]
 8000fae:	4013      	ands	r3, r2
 8000fb0:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000fb8:	d025      	beq.n	8001006 <HAL_GPIO_Init+0x242>
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	4a4f      	ldr	r2, [pc, #316]	; (80010fc <HAL_GPIO_Init+0x338>)
 8000fbe:	4293      	cmp	r3, r2
 8000fc0:	d01f      	beq.n	8001002 <HAL_GPIO_Init+0x23e>
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	4a4e      	ldr	r2, [pc, #312]	; (8001100 <HAL_GPIO_Init+0x33c>)
 8000fc6:	4293      	cmp	r3, r2
 8000fc8:	d019      	beq.n	8000ffe <HAL_GPIO_Init+0x23a>
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	4a4d      	ldr	r2, [pc, #308]	; (8001104 <HAL_GPIO_Init+0x340>)
 8000fce:	4293      	cmp	r3, r2
 8000fd0:	d013      	beq.n	8000ffa <HAL_GPIO_Init+0x236>
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	4a4c      	ldr	r2, [pc, #304]	; (8001108 <HAL_GPIO_Init+0x344>)
 8000fd6:	4293      	cmp	r3, r2
 8000fd8:	d00d      	beq.n	8000ff6 <HAL_GPIO_Init+0x232>
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	4a4b      	ldr	r2, [pc, #300]	; (800110c <HAL_GPIO_Init+0x348>)
 8000fde:	4293      	cmp	r3, r2
 8000fe0:	d007      	beq.n	8000ff2 <HAL_GPIO_Init+0x22e>
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	4a4a      	ldr	r2, [pc, #296]	; (8001110 <HAL_GPIO_Init+0x34c>)
 8000fe6:	4293      	cmp	r3, r2
 8000fe8:	d101      	bne.n	8000fee <HAL_GPIO_Init+0x22a>
 8000fea:	2306      	movs	r3, #6
 8000fec:	e00c      	b.n	8001008 <HAL_GPIO_Init+0x244>
 8000fee:	2307      	movs	r3, #7
 8000ff0:	e00a      	b.n	8001008 <HAL_GPIO_Init+0x244>
 8000ff2:	2305      	movs	r3, #5
 8000ff4:	e008      	b.n	8001008 <HAL_GPIO_Init+0x244>
 8000ff6:	2304      	movs	r3, #4
 8000ff8:	e006      	b.n	8001008 <HAL_GPIO_Init+0x244>
 8000ffa:	2303      	movs	r3, #3
 8000ffc:	e004      	b.n	8001008 <HAL_GPIO_Init+0x244>
 8000ffe:	2302      	movs	r3, #2
 8001000:	e002      	b.n	8001008 <HAL_GPIO_Init+0x244>
 8001002:	2301      	movs	r3, #1
 8001004:	e000      	b.n	8001008 <HAL_GPIO_Init+0x244>
 8001006:	2300      	movs	r3, #0
 8001008:	697a      	ldr	r2, [r7, #20]
 800100a:	f002 0203 	and.w	r2, r2, #3
 800100e:	0092      	lsls	r2, r2, #2
 8001010:	4093      	lsls	r3, r2
 8001012:	693a      	ldr	r2, [r7, #16]
 8001014:	4313      	orrs	r3, r2
 8001016:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001018:	4937      	ldr	r1, [pc, #220]	; (80010f8 <HAL_GPIO_Init+0x334>)
 800101a:	697b      	ldr	r3, [r7, #20]
 800101c:	089b      	lsrs	r3, r3, #2
 800101e:	3302      	adds	r3, #2
 8001020:	693a      	ldr	r2, [r7, #16]
 8001022:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001026:	4b3b      	ldr	r3, [pc, #236]	; (8001114 <HAL_GPIO_Init+0x350>)
 8001028:	689b      	ldr	r3, [r3, #8]
 800102a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800102c:	68fb      	ldr	r3, [r7, #12]
 800102e:	43db      	mvns	r3, r3
 8001030:	693a      	ldr	r2, [r7, #16]
 8001032:	4013      	ands	r3, r2
 8001034:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001036:	683b      	ldr	r3, [r7, #0]
 8001038:	685b      	ldr	r3, [r3, #4]
 800103a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800103e:	2b00      	cmp	r3, #0
 8001040:	d003      	beq.n	800104a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001042:	693a      	ldr	r2, [r7, #16]
 8001044:	68fb      	ldr	r3, [r7, #12]
 8001046:	4313      	orrs	r3, r2
 8001048:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800104a:	4a32      	ldr	r2, [pc, #200]	; (8001114 <HAL_GPIO_Init+0x350>)
 800104c:	693b      	ldr	r3, [r7, #16]
 800104e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001050:	4b30      	ldr	r3, [pc, #192]	; (8001114 <HAL_GPIO_Init+0x350>)
 8001052:	68db      	ldr	r3, [r3, #12]
 8001054:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001056:	68fb      	ldr	r3, [r7, #12]
 8001058:	43db      	mvns	r3, r3
 800105a:	693a      	ldr	r2, [r7, #16]
 800105c:	4013      	ands	r3, r2
 800105e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001060:	683b      	ldr	r3, [r7, #0]
 8001062:	685b      	ldr	r3, [r3, #4]
 8001064:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001068:	2b00      	cmp	r3, #0
 800106a:	d003      	beq.n	8001074 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 800106c:	693a      	ldr	r2, [r7, #16]
 800106e:	68fb      	ldr	r3, [r7, #12]
 8001070:	4313      	orrs	r3, r2
 8001072:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001074:	4a27      	ldr	r2, [pc, #156]	; (8001114 <HAL_GPIO_Init+0x350>)
 8001076:	693b      	ldr	r3, [r7, #16]
 8001078:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800107a:	4b26      	ldr	r3, [pc, #152]	; (8001114 <HAL_GPIO_Init+0x350>)
 800107c:	685b      	ldr	r3, [r3, #4]
 800107e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001080:	68fb      	ldr	r3, [r7, #12]
 8001082:	43db      	mvns	r3, r3
 8001084:	693a      	ldr	r2, [r7, #16]
 8001086:	4013      	ands	r3, r2
 8001088:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800108a:	683b      	ldr	r3, [r7, #0]
 800108c:	685b      	ldr	r3, [r3, #4]
 800108e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001092:	2b00      	cmp	r3, #0
 8001094:	d003      	beq.n	800109e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001096:	693a      	ldr	r2, [r7, #16]
 8001098:	68fb      	ldr	r3, [r7, #12]
 800109a:	4313      	orrs	r3, r2
 800109c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800109e:	4a1d      	ldr	r2, [pc, #116]	; (8001114 <HAL_GPIO_Init+0x350>)
 80010a0:	693b      	ldr	r3, [r7, #16]
 80010a2:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80010a4:	4b1b      	ldr	r3, [pc, #108]	; (8001114 <HAL_GPIO_Init+0x350>)
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010aa:	68fb      	ldr	r3, [r7, #12]
 80010ac:	43db      	mvns	r3, r3
 80010ae:	693a      	ldr	r2, [r7, #16]
 80010b0:	4013      	ands	r3, r2
 80010b2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80010b4:	683b      	ldr	r3, [r7, #0]
 80010b6:	685b      	ldr	r3, [r3, #4]
 80010b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d003      	beq.n	80010c8 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80010c0:	693a      	ldr	r2, [r7, #16]
 80010c2:	68fb      	ldr	r3, [r7, #12]
 80010c4:	4313      	orrs	r3, r2
 80010c6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80010c8:	4a12      	ldr	r2, [pc, #72]	; (8001114 <HAL_GPIO_Init+0x350>)
 80010ca:	693b      	ldr	r3, [r7, #16]
 80010cc:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80010ce:	697b      	ldr	r3, [r7, #20]
 80010d0:	3301      	adds	r3, #1
 80010d2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80010d4:	683b      	ldr	r3, [r7, #0]
 80010d6:	681a      	ldr	r2, [r3, #0]
 80010d8:	697b      	ldr	r3, [r7, #20]
 80010da:	fa22 f303 	lsr.w	r3, r2, r3
 80010de:	2b00      	cmp	r3, #0
 80010e0:	f47f ae78 	bne.w	8000dd4 <HAL_GPIO_Init+0x10>
  }
}
 80010e4:	bf00      	nop
 80010e6:	bf00      	nop
 80010e8:	371c      	adds	r7, #28
 80010ea:	46bd      	mov	sp, r7
 80010ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f0:	4770      	bx	lr
 80010f2:	bf00      	nop
 80010f4:	40021000 	.word	0x40021000
 80010f8:	40010000 	.word	0x40010000
 80010fc:	48000400 	.word	0x48000400
 8001100:	48000800 	.word	0x48000800
 8001104:	48000c00 	.word	0x48000c00
 8001108:	48001000 	.word	0x48001000
 800110c:	48001400 	.word	0x48001400
 8001110:	48001800 	.word	0x48001800
 8001114:	40010400 	.word	0x40010400

08001118 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001118:	b480      	push	{r7}
 800111a:	b083      	sub	sp, #12
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
 8001120:	460b      	mov	r3, r1
 8001122:	807b      	strh	r3, [r7, #2]
 8001124:	4613      	mov	r3, r2
 8001126:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001128:	787b      	ldrb	r3, [r7, #1]
 800112a:	2b00      	cmp	r3, #0
 800112c:	d003      	beq.n	8001136 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800112e:	887a      	ldrh	r2, [r7, #2]
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001134:	e002      	b.n	800113c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001136:	887a      	ldrh	r2, [r7, #2]
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800113c:	bf00      	nop
 800113e:	370c      	adds	r7, #12
 8001140:	46bd      	mov	sp, r7
 8001142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001146:	4770      	bx	lr

08001148 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b082      	sub	sp, #8
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	2b00      	cmp	r3, #0
 8001154:	d101      	bne.n	800115a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001156:	2301      	movs	r3, #1
 8001158:	e08d      	b.n	8001276 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001160:	b2db      	uxtb	r3, r3
 8001162:	2b00      	cmp	r3, #0
 8001164:	d106      	bne.n	8001174 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	2200      	movs	r2, #0
 800116a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800116e:	6878      	ldr	r0, [r7, #4]
 8001170:	f7ff fbd6 	bl	8000920 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	2224      	movs	r2, #36	; 0x24
 8001178:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	681a      	ldr	r2, [r3, #0]
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	f022 0201 	bic.w	r2, r2, #1
 800118a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	685a      	ldr	r2, [r3, #4]
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001198:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	689a      	ldr	r2, [r3, #8]
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80011a8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	68db      	ldr	r3, [r3, #12]
 80011ae:	2b01      	cmp	r3, #1
 80011b0:	d107      	bne.n	80011c2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	689a      	ldr	r2, [r3, #8]
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80011be:	609a      	str	r2, [r3, #8]
 80011c0:	e006      	b.n	80011d0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	689a      	ldr	r2, [r3, #8]
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80011ce:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	68db      	ldr	r3, [r3, #12]
 80011d4:	2b02      	cmp	r3, #2
 80011d6:	d108      	bne.n	80011ea <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	685a      	ldr	r2, [r3, #4]
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80011e6:	605a      	str	r2, [r3, #4]
 80011e8:	e007      	b.n	80011fa <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	685a      	ldr	r2, [r3, #4]
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80011f8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	685b      	ldr	r3, [r3, #4]
 8001200:	687a      	ldr	r2, [r7, #4]
 8001202:	6812      	ldr	r2, [r2, #0]
 8001204:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001208:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800120c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	68da      	ldr	r2, [r3, #12]
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800121c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	691a      	ldr	r2, [r3, #16]
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	695b      	ldr	r3, [r3, #20]
 8001226:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	699b      	ldr	r3, [r3, #24]
 800122e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	430a      	orrs	r2, r1
 8001236:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	69d9      	ldr	r1, [r3, #28]
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	6a1a      	ldr	r2, [r3, #32]
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	430a      	orrs	r2, r1
 8001246:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	681a      	ldr	r2, [r3, #0]
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	f042 0201 	orr.w	r2, r2, #1
 8001256:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	2200      	movs	r2, #0
 800125c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	2220      	movs	r2, #32
 8001262:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	2200      	movs	r2, #0
 800126a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	2200      	movs	r2, #0
 8001270:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001274:	2300      	movs	r3, #0
}
 8001276:	4618      	mov	r0, r3
 8001278:	3708      	adds	r7, #8
 800127a:	46bd      	mov	sp, r7
 800127c:	bd80      	pop	{r7, pc}
	...

08001280 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b088      	sub	sp, #32
 8001284:	af02      	add	r7, sp, #8
 8001286:	60f8      	str	r0, [r7, #12]
 8001288:	4608      	mov	r0, r1
 800128a:	4611      	mov	r1, r2
 800128c:	461a      	mov	r2, r3
 800128e:	4603      	mov	r3, r0
 8001290:	817b      	strh	r3, [r7, #10]
 8001292:	460b      	mov	r3, r1
 8001294:	813b      	strh	r3, [r7, #8]
 8001296:	4613      	mov	r3, r2
 8001298:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800129a:	68fb      	ldr	r3, [r7, #12]
 800129c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80012a0:	b2db      	uxtb	r3, r3
 80012a2:	2b20      	cmp	r3, #32
 80012a4:	f040 80f9 	bne.w	800149a <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80012a8:	6a3b      	ldr	r3, [r7, #32]
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d002      	beq.n	80012b4 <HAL_I2C_Mem_Write+0x34>
 80012ae:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d105      	bne.n	80012c0 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80012b4:	68fb      	ldr	r3, [r7, #12]
 80012b6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80012ba:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80012bc:	2301      	movs	r3, #1
 80012be:	e0ed      	b.n	800149c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80012c6:	2b01      	cmp	r3, #1
 80012c8:	d101      	bne.n	80012ce <HAL_I2C_Mem_Write+0x4e>
 80012ca:	2302      	movs	r3, #2
 80012cc:	e0e6      	b.n	800149c <HAL_I2C_Mem_Write+0x21c>
 80012ce:	68fb      	ldr	r3, [r7, #12]
 80012d0:	2201      	movs	r2, #1
 80012d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80012d6:	f7ff fc5f 	bl	8000b98 <HAL_GetTick>
 80012da:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80012dc:	697b      	ldr	r3, [r7, #20]
 80012de:	9300      	str	r3, [sp, #0]
 80012e0:	2319      	movs	r3, #25
 80012e2:	2201      	movs	r2, #1
 80012e4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80012e8:	68f8      	ldr	r0, [r7, #12]
 80012ea:	f000 f955 	bl	8001598 <I2C_WaitOnFlagUntilTimeout>
 80012ee:	4603      	mov	r3, r0
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d001      	beq.n	80012f8 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80012f4:	2301      	movs	r3, #1
 80012f6:	e0d1      	b.n	800149c <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	2221      	movs	r2, #33	; 0x21
 80012fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	2240      	movs	r2, #64	; 0x40
 8001304:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001308:	68fb      	ldr	r3, [r7, #12]
 800130a:	2200      	movs	r2, #0
 800130c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800130e:	68fb      	ldr	r3, [r7, #12]
 8001310:	6a3a      	ldr	r2, [r7, #32]
 8001312:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001318:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800131a:	68fb      	ldr	r3, [r7, #12]
 800131c:	2200      	movs	r2, #0
 800131e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001320:	88f8      	ldrh	r0, [r7, #6]
 8001322:	893a      	ldrh	r2, [r7, #8]
 8001324:	8979      	ldrh	r1, [r7, #10]
 8001326:	697b      	ldr	r3, [r7, #20]
 8001328:	9301      	str	r3, [sp, #4]
 800132a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800132c:	9300      	str	r3, [sp, #0]
 800132e:	4603      	mov	r3, r0
 8001330:	68f8      	ldr	r0, [r7, #12]
 8001332:	f000 f8b9 	bl	80014a8 <I2C_RequestMemoryWrite>
 8001336:	4603      	mov	r3, r0
 8001338:	2b00      	cmp	r3, #0
 800133a:	d005      	beq.n	8001348 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	2200      	movs	r2, #0
 8001340:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8001344:	2301      	movs	r3, #1
 8001346:	e0a9      	b.n	800149c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001348:	68fb      	ldr	r3, [r7, #12]
 800134a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800134c:	b29b      	uxth	r3, r3
 800134e:	2bff      	cmp	r3, #255	; 0xff
 8001350:	d90e      	bls.n	8001370 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001352:	68fb      	ldr	r3, [r7, #12]
 8001354:	22ff      	movs	r2, #255	; 0xff
 8001356:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001358:	68fb      	ldr	r3, [r7, #12]
 800135a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800135c:	b2da      	uxtb	r2, r3
 800135e:	8979      	ldrh	r1, [r7, #10]
 8001360:	2300      	movs	r3, #0
 8001362:	9300      	str	r3, [sp, #0]
 8001364:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001368:	68f8      	ldr	r0, [r7, #12]
 800136a:	f000 facf 	bl	800190c <I2C_TransferConfig>
 800136e:	e00f      	b.n	8001390 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001374:	b29a      	uxth	r2, r3
 8001376:	68fb      	ldr	r3, [r7, #12]
 8001378:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800137a:	68fb      	ldr	r3, [r7, #12]
 800137c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800137e:	b2da      	uxtb	r2, r3
 8001380:	8979      	ldrh	r1, [r7, #10]
 8001382:	2300      	movs	r3, #0
 8001384:	9300      	str	r3, [sp, #0]
 8001386:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800138a:	68f8      	ldr	r0, [r7, #12]
 800138c:	f000 fabe 	bl	800190c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001390:	697a      	ldr	r2, [r7, #20]
 8001392:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001394:	68f8      	ldr	r0, [r7, #12]
 8001396:	f000 f94e 	bl	8001636 <I2C_WaitOnTXISFlagUntilTimeout>
 800139a:	4603      	mov	r3, r0
 800139c:	2b00      	cmp	r3, #0
 800139e:	d001      	beq.n	80013a4 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80013a0:	2301      	movs	r3, #1
 80013a2:	e07b      	b.n	800149c <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013a8:	781a      	ldrb	r2, [r3, #0]
 80013aa:	68fb      	ldr	r3, [r7, #12]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013b4:	1c5a      	adds	r2, r3, #1
 80013b6:	68fb      	ldr	r3, [r7, #12]
 80013b8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80013ba:	68fb      	ldr	r3, [r7, #12]
 80013bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80013be:	b29b      	uxth	r3, r3
 80013c0:	3b01      	subs	r3, #1
 80013c2:	b29a      	uxth	r2, r3
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80013cc:	3b01      	subs	r3, #1
 80013ce:	b29a      	uxth	r2, r3
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80013d8:	b29b      	uxth	r3, r3
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d034      	beq.n	8001448 <HAL_I2C_Mem_Write+0x1c8>
 80013de:	68fb      	ldr	r3, [r7, #12]
 80013e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d130      	bne.n	8001448 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80013e6:	697b      	ldr	r3, [r7, #20]
 80013e8:	9300      	str	r3, [sp, #0]
 80013ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013ec:	2200      	movs	r2, #0
 80013ee:	2180      	movs	r1, #128	; 0x80
 80013f0:	68f8      	ldr	r0, [r7, #12]
 80013f2:	f000 f8d1 	bl	8001598 <I2C_WaitOnFlagUntilTimeout>
 80013f6:	4603      	mov	r3, r0
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d001      	beq.n	8001400 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80013fc:	2301      	movs	r3, #1
 80013fe:	e04d      	b.n	800149c <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001404:	b29b      	uxth	r3, r3
 8001406:	2bff      	cmp	r3, #255	; 0xff
 8001408:	d90e      	bls.n	8001428 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800140a:	68fb      	ldr	r3, [r7, #12]
 800140c:	22ff      	movs	r2, #255	; 0xff
 800140e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001414:	b2da      	uxtb	r2, r3
 8001416:	8979      	ldrh	r1, [r7, #10]
 8001418:	2300      	movs	r3, #0
 800141a:	9300      	str	r3, [sp, #0]
 800141c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001420:	68f8      	ldr	r0, [r7, #12]
 8001422:	f000 fa73 	bl	800190c <I2C_TransferConfig>
 8001426:	e00f      	b.n	8001448 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800142c:	b29a      	uxth	r2, r3
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001432:	68fb      	ldr	r3, [r7, #12]
 8001434:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001436:	b2da      	uxtb	r2, r3
 8001438:	8979      	ldrh	r1, [r7, #10]
 800143a:	2300      	movs	r3, #0
 800143c:	9300      	str	r3, [sp, #0]
 800143e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001442:	68f8      	ldr	r0, [r7, #12]
 8001444:	f000 fa62 	bl	800190c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800144c:	b29b      	uxth	r3, r3
 800144e:	2b00      	cmp	r3, #0
 8001450:	d19e      	bne.n	8001390 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001452:	697a      	ldr	r2, [r7, #20]
 8001454:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001456:	68f8      	ldr	r0, [r7, #12]
 8001458:	f000 f934 	bl	80016c4 <I2C_WaitOnSTOPFlagUntilTimeout>
 800145c:	4603      	mov	r3, r0
 800145e:	2b00      	cmp	r3, #0
 8001460:	d001      	beq.n	8001466 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8001462:	2301      	movs	r3, #1
 8001464:	e01a      	b.n	800149c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	2220      	movs	r2, #32
 800146c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	6859      	ldr	r1, [r3, #4]
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	681a      	ldr	r2, [r3, #0]
 8001478:	4b0a      	ldr	r3, [pc, #40]	; (80014a4 <HAL_I2C_Mem_Write+0x224>)
 800147a:	400b      	ands	r3, r1
 800147c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800147e:	68fb      	ldr	r3, [r7, #12]
 8001480:	2220      	movs	r2, #32
 8001482:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001486:	68fb      	ldr	r3, [r7, #12]
 8001488:	2200      	movs	r2, #0
 800148a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	2200      	movs	r2, #0
 8001492:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001496:	2300      	movs	r3, #0
 8001498:	e000      	b.n	800149c <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800149a:	2302      	movs	r3, #2
  }
}
 800149c:	4618      	mov	r0, r3
 800149e:	3718      	adds	r7, #24
 80014a0:	46bd      	mov	sp, r7
 80014a2:	bd80      	pop	{r7, pc}
 80014a4:	fe00e800 	.word	0xfe00e800

080014a8 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b086      	sub	sp, #24
 80014ac:	af02      	add	r7, sp, #8
 80014ae:	60f8      	str	r0, [r7, #12]
 80014b0:	4608      	mov	r0, r1
 80014b2:	4611      	mov	r1, r2
 80014b4:	461a      	mov	r2, r3
 80014b6:	4603      	mov	r3, r0
 80014b8:	817b      	strh	r3, [r7, #10]
 80014ba:	460b      	mov	r3, r1
 80014bc:	813b      	strh	r3, [r7, #8]
 80014be:	4613      	mov	r3, r2
 80014c0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80014c2:	88fb      	ldrh	r3, [r7, #6]
 80014c4:	b2da      	uxtb	r2, r3
 80014c6:	8979      	ldrh	r1, [r7, #10]
 80014c8:	4b20      	ldr	r3, [pc, #128]	; (800154c <I2C_RequestMemoryWrite+0xa4>)
 80014ca:	9300      	str	r3, [sp, #0]
 80014cc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80014d0:	68f8      	ldr	r0, [r7, #12]
 80014d2:	f000 fa1b 	bl	800190c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80014d6:	69fa      	ldr	r2, [r7, #28]
 80014d8:	69b9      	ldr	r1, [r7, #24]
 80014da:	68f8      	ldr	r0, [r7, #12]
 80014dc:	f000 f8ab 	bl	8001636 <I2C_WaitOnTXISFlagUntilTimeout>
 80014e0:	4603      	mov	r3, r0
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d001      	beq.n	80014ea <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80014e6:	2301      	movs	r3, #1
 80014e8:	e02c      	b.n	8001544 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80014ea:	88fb      	ldrh	r3, [r7, #6]
 80014ec:	2b01      	cmp	r3, #1
 80014ee:	d105      	bne.n	80014fc <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80014f0:	893b      	ldrh	r3, [r7, #8]
 80014f2:	b2da      	uxtb	r2, r3
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	629a      	str	r2, [r3, #40]	; 0x28
 80014fa:	e015      	b.n	8001528 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80014fc:	893b      	ldrh	r3, [r7, #8]
 80014fe:	0a1b      	lsrs	r3, r3, #8
 8001500:	b29b      	uxth	r3, r3
 8001502:	b2da      	uxtb	r2, r3
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800150a:	69fa      	ldr	r2, [r7, #28]
 800150c:	69b9      	ldr	r1, [r7, #24]
 800150e:	68f8      	ldr	r0, [r7, #12]
 8001510:	f000 f891 	bl	8001636 <I2C_WaitOnTXISFlagUntilTimeout>
 8001514:	4603      	mov	r3, r0
 8001516:	2b00      	cmp	r3, #0
 8001518:	d001      	beq.n	800151e <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800151a:	2301      	movs	r3, #1
 800151c:	e012      	b.n	8001544 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800151e:	893b      	ldrh	r3, [r7, #8]
 8001520:	b2da      	uxtb	r2, r3
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8001528:	69fb      	ldr	r3, [r7, #28]
 800152a:	9300      	str	r3, [sp, #0]
 800152c:	69bb      	ldr	r3, [r7, #24]
 800152e:	2200      	movs	r2, #0
 8001530:	2180      	movs	r1, #128	; 0x80
 8001532:	68f8      	ldr	r0, [r7, #12]
 8001534:	f000 f830 	bl	8001598 <I2C_WaitOnFlagUntilTimeout>
 8001538:	4603      	mov	r3, r0
 800153a:	2b00      	cmp	r3, #0
 800153c:	d001      	beq.n	8001542 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800153e:	2301      	movs	r3, #1
 8001540:	e000      	b.n	8001544 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8001542:	2300      	movs	r3, #0
}
 8001544:	4618      	mov	r0, r3
 8001546:	3710      	adds	r7, #16
 8001548:	46bd      	mov	sp, r7
 800154a:	bd80      	pop	{r7, pc}
 800154c:	80002000 	.word	0x80002000

08001550 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001550:	b480      	push	{r7}
 8001552:	b083      	sub	sp, #12
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	699b      	ldr	r3, [r3, #24]
 800155e:	f003 0302 	and.w	r3, r3, #2
 8001562:	2b02      	cmp	r3, #2
 8001564:	d103      	bne.n	800156e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	2200      	movs	r2, #0
 800156c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	699b      	ldr	r3, [r3, #24]
 8001574:	f003 0301 	and.w	r3, r3, #1
 8001578:	2b01      	cmp	r3, #1
 800157a:	d007      	beq.n	800158c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	699a      	ldr	r2, [r3, #24]
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	f042 0201 	orr.w	r2, r2, #1
 800158a:	619a      	str	r2, [r3, #24]
  }
}
 800158c:	bf00      	nop
 800158e:	370c      	adds	r7, #12
 8001590:	46bd      	mov	sp, r7
 8001592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001596:	4770      	bx	lr

08001598 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b084      	sub	sp, #16
 800159c:	af00      	add	r7, sp, #0
 800159e:	60f8      	str	r0, [r7, #12]
 80015a0:	60b9      	str	r1, [r7, #8]
 80015a2:	603b      	str	r3, [r7, #0]
 80015a4:	4613      	mov	r3, r2
 80015a6:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80015a8:	e031      	b.n	800160e <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80015aa:	683b      	ldr	r3, [r7, #0]
 80015ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80015b0:	d02d      	beq.n	800160e <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80015b2:	f7ff faf1 	bl	8000b98 <HAL_GetTick>
 80015b6:	4602      	mov	r2, r0
 80015b8:	69bb      	ldr	r3, [r7, #24]
 80015ba:	1ad3      	subs	r3, r2, r3
 80015bc:	683a      	ldr	r2, [r7, #0]
 80015be:	429a      	cmp	r2, r3
 80015c0:	d302      	bcc.n	80015c8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80015c2:	683b      	ldr	r3, [r7, #0]
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d122      	bne.n	800160e <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	699a      	ldr	r2, [r3, #24]
 80015ce:	68bb      	ldr	r3, [r7, #8]
 80015d0:	4013      	ands	r3, r2
 80015d2:	68ba      	ldr	r2, [r7, #8]
 80015d4:	429a      	cmp	r2, r3
 80015d6:	bf0c      	ite	eq
 80015d8:	2301      	moveq	r3, #1
 80015da:	2300      	movne	r3, #0
 80015dc:	b2db      	uxtb	r3, r3
 80015de:	461a      	mov	r2, r3
 80015e0:	79fb      	ldrb	r3, [r7, #7]
 80015e2:	429a      	cmp	r2, r3
 80015e4:	d113      	bne.n	800160e <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015ea:	f043 0220 	orr.w	r2, r3, #32
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	2220      	movs	r2, #32
 80015f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	2200      	movs	r2, #0
 80015fe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	2200      	movs	r2, #0
 8001606:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 800160a:	2301      	movs	r3, #1
 800160c:	e00f      	b.n	800162e <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	699a      	ldr	r2, [r3, #24]
 8001614:	68bb      	ldr	r3, [r7, #8]
 8001616:	4013      	ands	r3, r2
 8001618:	68ba      	ldr	r2, [r7, #8]
 800161a:	429a      	cmp	r2, r3
 800161c:	bf0c      	ite	eq
 800161e:	2301      	moveq	r3, #1
 8001620:	2300      	movne	r3, #0
 8001622:	b2db      	uxtb	r3, r3
 8001624:	461a      	mov	r2, r3
 8001626:	79fb      	ldrb	r3, [r7, #7]
 8001628:	429a      	cmp	r2, r3
 800162a:	d0be      	beq.n	80015aa <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800162c:	2300      	movs	r3, #0
}
 800162e:	4618      	mov	r0, r3
 8001630:	3710      	adds	r7, #16
 8001632:	46bd      	mov	sp, r7
 8001634:	bd80      	pop	{r7, pc}

08001636 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001636:	b580      	push	{r7, lr}
 8001638:	b084      	sub	sp, #16
 800163a:	af00      	add	r7, sp, #0
 800163c:	60f8      	str	r0, [r7, #12]
 800163e:	60b9      	str	r1, [r7, #8]
 8001640:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001642:	e033      	b.n	80016ac <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001644:	687a      	ldr	r2, [r7, #4]
 8001646:	68b9      	ldr	r1, [r7, #8]
 8001648:	68f8      	ldr	r0, [r7, #12]
 800164a:	f000 f87f 	bl	800174c <I2C_IsErrorOccurred>
 800164e:	4603      	mov	r3, r0
 8001650:	2b00      	cmp	r3, #0
 8001652:	d001      	beq.n	8001658 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001654:	2301      	movs	r3, #1
 8001656:	e031      	b.n	80016bc <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001658:	68bb      	ldr	r3, [r7, #8]
 800165a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800165e:	d025      	beq.n	80016ac <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001660:	f7ff fa9a 	bl	8000b98 <HAL_GetTick>
 8001664:	4602      	mov	r2, r0
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	1ad3      	subs	r3, r2, r3
 800166a:	68ba      	ldr	r2, [r7, #8]
 800166c:	429a      	cmp	r2, r3
 800166e:	d302      	bcc.n	8001676 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8001670:	68bb      	ldr	r3, [r7, #8]
 8001672:	2b00      	cmp	r3, #0
 8001674:	d11a      	bne.n	80016ac <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	699b      	ldr	r3, [r3, #24]
 800167c:	f003 0302 	and.w	r3, r3, #2
 8001680:	2b02      	cmp	r3, #2
 8001682:	d013      	beq.n	80016ac <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001688:	f043 0220 	orr.w	r2, r3, #32
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	2220      	movs	r2, #32
 8001694:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	2200      	movs	r2, #0
 800169c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	2200      	movs	r2, #0
 80016a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80016a8:	2301      	movs	r3, #1
 80016aa:	e007      	b.n	80016bc <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	699b      	ldr	r3, [r3, #24]
 80016b2:	f003 0302 	and.w	r3, r3, #2
 80016b6:	2b02      	cmp	r3, #2
 80016b8:	d1c4      	bne.n	8001644 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80016ba:	2300      	movs	r3, #0
}
 80016bc:	4618      	mov	r0, r3
 80016be:	3710      	adds	r7, #16
 80016c0:	46bd      	mov	sp, r7
 80016c2:	bd80      	pop	{r7, pc}

080016c4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b084      	sub	sp, #16
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	60f8      	str	r0, [r7, #12]
 80016cc:	60b9      	str	r1, [r7, #8]
 80016ce:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80016d0:	e02f      	b.n	8001732 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80016d2:	687a      	ldr	r2, [r7, #4]
 80016d4:	68b9      	ldr	r1, [r7, #8]
 80016d6:	68f8      	ldr	r0, [r7, #12]
 80016d8:	f000 f838 	bl	800174c <I2C_IsErrorOccurred>
 80016dc:	4603      	mov	r3, r0
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d001      	beq.n	80016e6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80016e2:	2301      	movs	r3, #1
 80016e4:	e02d      	b.n	8001742 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80016e6:	f7ff fa57 	bl	8000b98 <HAL_GetTick>
 80016ea:	4602      	mov	r2, r0
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	1ad3      	subs	r3, r2, r3
 80016f0:	68ba      	ldr	r2, [r7, #8]
 80016f2:	429a      	cmp	r2, r3
 80016f4:	d302      	bcc.n	80016fc <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80016f6:	68bb      	ldr	r3, [r7, #8]
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d11a      	bne.n	8001732 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	699b      	ldr	r3, [r3, #24]
 8001702:	f003 0320 	and.w	r3, r3, #32
 8001706:	2b20      	cmp	r3, #32
 8001708:	d013      	beq.n	8001732 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800170e:	f043 0220 	orr.w	r2, r3, #32
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	2220      	movs	r2, #32
 800171a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	2200      	movs	r2, #0
 8001722:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	2200      	movs	r2, #0
 800172a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800172e:	2301      	movs	r3, #1
 8001730:	e007      	b.n	8001742 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	699b      	ldr	r3, [r3, #24]
 8001738:	f003 0320 	and.w	r3, r3, #32
 800173c:	2b20      	cmp	r3, #32
 800173e:	d1c8      	bne.n	80016d2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001740:	2300      	movs	r3, #0
}
 8001742:	4618      	mov	r0, r3
 8001744:	3710      	adds	r7, #16
 8001746:	46bd      	mov	sp, r7
 8001748:	bd80      	pop	{r7, pc}
	...

0800174c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	b08a      	sub	sp, #40	; 0x28
 8001750:	af00      	add	r7, sp, #0
 8001752:	60f8      	str	r0, [r7, #12]
 8001754:	60b9      	str	r1, [r7, #8]
 8001756:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001758:	2300      	movs	r3, #0
 800175a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	699b      	ldr	r3, [r3, #24]
 8001764:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8001766:	2300      	movs	r3, #0
 8001768:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800176e:	69bb      	ldr	r3, [r7, #24]
 8001770:	f003 0310 	and.w	r3, r3, #16
 8001774:	2b00      	cmp	r3, #0
 8001776:	d068      	beq.n	800184a <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	2210      	movs	r2, #16
 800177e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001780:	e049      	b.n	8001816 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001782:	68bb      	ldr	r3, [r7, #8]
 8001784:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001788:	d045      	beq.n	8001816 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800178a:	f7ff fa05 	bl	8000b98 <HAL_GetTick>
 800178e:	4602      	mov	r2, r0
 8001790:	69fb      	ldr	r3, [r7, #28]
 8001792:	1ad3      	subs	r3, r2, r3
 8001794:	68ba      	ldr	r2, [r7, #8]
 8001796:	429a      	cmp	r2, r3
 8001798:	d302      	bcc.n	80017a0 <I2C_IsErrorOccurred+0x54>
 800179a:	68bb      	ldr	r3, [r7, #8]
 800179c:	2b00      	cmp	r3, #0
 800179e:	d13a      	bne.n	8001816 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	685b      	ldr	r3, [r3, #4]
 80017a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80017aa:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80017b2:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	699b      	ldr	r3, [r3, #24]
 80017ba:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80017be:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80017c2:	d121      	bne.n	8001808 <I2C_IsErrorOccurred+0xbc>
 80017c4:	697b      	ldr	r3, [r7, #20]
 80017c6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80017ca:	d01d      	beq.n	8001808 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80017cc:	7cfb      	ldrb	r3, [r7, #19]
 80017ce:	2b20      	cmp	r3, #32
 80017d0:	d01a      	beq.n	8001808 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	685a      	ldr	r2, [r3, #4]
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80017e0:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80017e2:	f7ff f9d9 	bl	8000b98 <HAL_GetTick>
 80017e6:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80017e8:	e00e      	b.n	8001808 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80017ea:	f7ff f9d5 	bl	8000b98 <HAL_GetTick>
 80017ee:	4602      	mov	r2, r0
 80017f0:	69fb      	ldr	r3, [r7, #28]
 80017f2:	1ad3      	subs	r3, r2, r3
 80017f4:	2b19      	cmp	r3, #25
 80017f6:	d907      	bls.n	8001808 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80017f8:	6a3b      	ldr	r3, [r7, #32]
 80017fa:	f043 0320 	orr.w	r3, r3, #32
 80017fe:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8001800:	2301      	movs	r3, #1
 8001802:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8001806:	e006      	b.n	8001816 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	699b      	ldr	r3, [r3, #24]
 800180e:	f003 0320 	and.w	r3, r3, #32
 8001812:	2b20      	cmp	r3, #32
 8001814:	d1e9      	bne.n	80017ea <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	699b      	ldr	r3, [r3, #24]
 800181c:	f003 0320 	and.w	r3, r3, #32
 8001820:	2b20      	cmp	r3, #32
 8001822:	d003      	beq.n	800182c <I2C_IsErrorOccurred+0xe0>
 8001824:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001828:	2b00      	cmp	r3, #0
 800182a:	d0aa      	beq.n	8001782 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800182c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001830:	2b00      	cmp	r3, #0
 8001832:	d103      	bne.n	800183c <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	2220      	movs	r2, #32
 800183a:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800183c:	6a3b      	ldr	r3, [r7, #32]
 800183e:	f043 0304 	orr.w	r3, r3, #4
 8001842:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8001844:	2301      	movs	r3, #1
 8001846:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	699b      	ldr	r3, [r3, #24]
 8001850:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8001852:	69bb      	ldr	r3, [r7, #24]
 8001854:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001858:	2b00      	cmp	r3, #0
 800185a:	d00b      	beq.n	8001874 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800185c:	6a3b      	ldr	r3, [r7, #32]
 800185e:	f043 0301 	orr.w	r3, r3, #1
 8001862:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	f44f 7280 	mov.w	r2, #256	; 0x100
 800186c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800186e:	2301      	movs	r3, #1
 8001870:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8001874:	69bb      	ldr	r3, [r7, #24]
 8001876:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800187a:	2b00      	cmp	r3, #0
 800187c:	d00b      	beq.n	8001896 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800187e:	6a3b      	ldr	r3, [r7, #32]
 8001880:	f043 0308 	orr.w	r3, r3, #8
 8001884:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800188e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001890:	2301      	movs	r3, #1
 8001892:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8001896:	69bb      	ldr	r3, [r7, #24]
 8001898:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800189c:	2b00      	cmp	r3, #0
 800189e:	d00b      	beq.n	80018b8 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80018a0:	6a3b      	ldr	r3, [r7, #32]
 80018a2:	f043 0302 	orr.w	r3, r3, #2
 80018a6:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	f44f 7200 	mov.w	r2, #512	; 0x200
 80018b0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80018b2:	2301      	movs	r3, #1
 80018b4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 80018b8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d01c      	beq.n	80018fa <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80018c0:	68f8      	ldr	r0, [r7, #12]
 80018c2:	f7ff fe45 	bl	8001550 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	6859      	ldr	r1, [r3, #4]
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	681a      	ldr	r2, [r3, #0]
 80018d0:	4b0d      	ldr	r3, [pc, #52]	; (8001908 <I2C_IsErrorOccurred+0x1bc>)
 80018d2:	400b      	ands	r3, r1
 80018d4:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80018da:	6a3b      	ldr	r3, [r7, #32]
 80018dc:	431a      	orrs	r2, r3
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	2220      	movs	r2, #32
 80018e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	2200      	movs	r2, #0
 80018ee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	2200      	movs	r2, #0
 80018f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 80018fa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80018fe:	4618      	mov	r0, r3
 8001900:	3728      	adds	r7, #40	; 0x28
 8001902:	46bd      	mov	sp, r7
 8001904:	bd80      	pop	{r7, pc}
 8001906:	bf00      	nop
 8001908:	fe00e800 	.word	0xfe00e800

0800190c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800190c:	b480      	push	{r7}
 800190e:	b087      	sub	sp, #28
 8001910:	af00      	add	r7, sp, #0
 8001912:	60f8      	str	r0, [r7, #12]
 8001914:	607b      	str	r3, [r7, #4]
 8001916:	460b      	mov	r3, r1
 8001918:	817b      	strh	r3, [r7, #10]
 800191a:	4613      	mov	r3, r2
 800191c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800191e:	897b      	ldrh	r3, [r7, #10]
 8001920:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001924:	7a7b      	ldrb	r3, [r7, #9]
 8001926:	041b      	lsls	r3, r3, #16
 8001928:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800192c:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001932:	6a3b      	ldr	r3, [r7, #32]
 8001934:	4313      	orrs	r3, r2
 8001936:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800193a:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	685a      	ldr	r2, [r3, #4]
 8001942:	6a3b      	ldr	r3, [r7, #32]
 8001944:	0d5b      	lsrs	r3, r3, #21
 8001946:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800194a:	4b08      	ldr	r3, [pc, #32]	; (800196c <I2C_TransferConfig+0x60>)
 800194c:	430b      	orrs	r3, r1
 800194e:	43db      	mvns	r3, r3
 8001950:	ea02 0103 	and.w	r1, r2, r3
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	697a      	ldr	r2, [r7, #20]
 800195a:	430a      	orrs	r2, r1
 800195c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800195e:	bf00      	nop
 8001960:	371c      	adds	r7, #28
 8001962:	46bd      	mov	sp, r7
 8001964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001968:	4770      	bx	lr
 800196a:	bf00      	nop
 800196c:	03ff63ff 	.word	0x03ff63ff

08001970 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001970:	b480      	push	{r7}
 8001972:	b083      	sub	sp, #12
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
 8001978:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001980:	b2db      	uxtb	r3, r3
 8001982:	2b20      	cmp	r3, #32
 8001984:	d138      	bne.n	80019f8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800198c:	2b01      	cmp	r3, #1
 800198e:	d101      	bne.n	8001994 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001990:	2302      	movs	r3, #2
 8001992:	e032      	b.n	80019fa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	2201      	movs	r2, #1
 8001998:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	2224      	movs	r2, #36	; 0x24
 80019a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	681a      	ldr	r2, [r3, #0]
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	f022 0201 	bic.w	r2, r2, #1
 80019b2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	681a      	ldr	r2, [r3, #0]
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80019c2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	6819      	ldr	r1, [r3, #0]
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	683a      	ldr	r2, [r7, #0]
 80019d0:	430a      	orrs	r2, r1
 80019d2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	681a      	ldr	r2, [r3, #0]
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	f042 0201 	orr.w	r2, r2, #1
 80019e2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	2220      	movs	r2, #32
 80019e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	2200      	movs	r2, #0
 80019f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80019f4:	2300      	movs	r3, #0
 80019f6:	e000      	b.n	80019fa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80019f8:	2302      	movs	r3, #2
  }
}
 80019fa:	4618      	mov	r0, r3
 80019fc:	370c      	adds	r7, #12
 80019fe:	46bd      	mov	sp, r7
 8001a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a04:	4770      	bx	lr

08001a06 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001a06:	b480      	push	{r7}
 8001a08:	b085      	sub	sp, #20
 8001a0a:	af00      	add	r7, sp, #0
 8001a0c:	6078      	str	r0, [r7, #4]
 8001a0e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001a16:	b2db      	uxtb	r3, r3
 8001a18:	2b20      	cmp	r3, #32
 8001a1a:	d139      	bne.n	8001a90 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001a22:	2b01      	cmp	r3, #1
 8001a24:	d101      	bne.n	8001a2a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001a26:	2302      	movs	r3, #2
 8001a28:	e033      	b.n	8001a92 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	2201      	movs	r2, #1
 8001a2e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	2224      	movs	r2, #36	; 0x24
 8001a36:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	681a      	ldr	r2, [r3, #0]
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	f022 0201 	bic.w	r2, r2, #1
 8001a48:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001a58:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001a5a:	683b      	ldr	r3, [r7, #0]
 8001a5c:	021b      	lsls	r3, r3, #8
 8001a5e:	68fa      	ldr	r2, [r7, #12]
 8001a60:	4313      	orrs	r3, r2
 8001a62:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	68fa      	ldr	r2, [r7, #12]
 8001a6a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	681a      	ldr	r2, [r3, #0]
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	f042 0201 	orr.w	r2, r2, #1
 8001a7a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	2220      	movs	r2, #32
 8001a80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	2200      	movs	r2, #0
 8001a88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	e000      	b.n	8001a92 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001a90:	2302      	movs	r3, #2
  }
}
 8001a92:	4618      	mov	r0, r3
 8001a94:	3714      	adds	r7, #20
 8001a96:	46bd      	mov	sp, r7
 8001a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9c:	4770      	bx	lr
	...

08001aa0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001aa4:	4b04      	ldr	r3, [pc, #16]	; (8001ab8 <HAL_PWREx_GetVoltageRange+0x18>)
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001aac:	4618      	mov	r0, r3
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab4:	4770      	bx	lr
 8001ab6:	bf00      	nop
 8001ab8:	40007000 	.word	0x40007000

08001abc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001abc:	b480      	push	{r7}
 8001abe:	b085      	sub	sp, #20
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001aca:	d130      	bne.n	8001b2e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001acc:	4b23      	ldr	r3, [pc, #140]	; (8001b5c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001ad4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001ad8:	d038      	beq.n	8001b4c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001ada:	4b20      	ldr	r3, [pc, #128]	; (8001b5c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001ae2:	4a1e      	ldr	r2, [pc, #120]	; (8001b5c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001ae4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001ae8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001aea:	4b1d      	ldr	r3, [pc, #116]	; (8001b60 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	2232      	movs	r2, #50	; 0x32
 8001af0:	fb02 f303 	mul.w	r3, r2, r3
 8001af4:	4a1b      	ldr	r2, [pc, #108]	; (8001b64 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001af6:	fba2 2303 	umull	r2, r3, r2, r3
 8001afa:	0c9b      	lsrs	r3, r3, #18
 8001afc:	3301      	adds	r3, #1
 8001afe:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001b00:	e002      	b.n	8001b08 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	3b01      	subs	r3, #1
 8001b06:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001b08:	4b14      	ldr	r3, [pc, #80]	; (8001b5c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001b0a:	695b      	ldr	r3, [r3, #20]
 8001b0c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b10:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001b14:	d102      	bne.n	8001b1c <HAL_PWREx_ControlVoltageScaling+0x60>
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d1f2      	bne.n	8001b02 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001b1c:	4b0f      	ldr	r3, [pc, #60]	; (8001b5c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001b1e:	695b      	ldr	r3, [r3, #20]
 8001b20:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b24:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001b28:	d110      	bne.n	8001b4c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001b2a:	2303      	movs	r3, #3
 8001b2c:	e00f      	b.n	8001b4e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001b2e:	4b0b      	ldr	r3, [pc, #44]	; (8001b5c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001b36:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001b3a:	d007      	beq.n	8001b4c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001b3c:	4b07      	ldr	r3, [pc, #28]	; (8001b5c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001b44:	4a05      	ldr	r2, [pc, #20]	; (8001b5c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001b46:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001b4a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001b4c:	2300      	movs	r3, #0
}
 8001b4e:	4618      	mov	r0, r3
 8001b50:	3714      	adds	r7, #20
 8001b52:	46bd      	mov	sp, r7
 8001b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b58:	4770      	bx	lr
 8001b5a:	bf00      	nop
 8001b5c:	40007000 	.word	0x40007000
 8001b60:	20000000 	.word	0x20000000
 8001b64:	431bde83 	.word	0x431bde83

08001b68 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b088      	sub	sp, #32
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d101      	bne.n	8001b7a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001b76:	2301      	movs	r3, #1
 8001b78:	e3ca      	b.n	8002310 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001b7a:	4b97      	ldr	r3, [pc, #604]	; (8001dd8 <HAL_RCC_OscConfig+0x270>)
 8001b7c:	689b      	ldr	r3, [r3, #8]
 8001b7e:	f003 030c 	and.w	r3, r3, #12
 8001b82:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001b84:	4b94      	ldr	r3, [pc, #592]	; (8001dd8 <HAL_RCC_OscConfig+0x270>)
 8001b86:	68db      	ldr	r3, [r3, #12]
 8001b88:	f003 0303 	and.w	r3, r3, #3
 8001b8c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f003 0310 	and.w	r3, r3, #16
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	f000 80e4 	beq.w	8001d64 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001b9c:	69bb      	ldr	r3, [r7, #24]
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d007      	beq.n	8001bb2 <HAL_RCC_OscConfig+0x4a>
 8001ba2:	69bb      	ldr	r3, [r7, #24]
 8001ba4:	2b0c      	cmp	r3, #12
 8001ba6:	f040 808b 	bne.w	8001cc0 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001baa:	697b      	ldr	r3, [r7, #20]
 8001bac:	2b01      	cmp	r3, #1
 8001bae:	f040 8087 	bne.w	8001cc0 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001bb2:	4b89      	ldr	r3, [pc, #548]	; (8001dd8 <HAL_RCC_OscConfig+0x270>)
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	f003 0302 	and.w	r3, r3, #2
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d005      	beq.n	8001bca <HAL_RCC_OscConfig+0x62>
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	699b      	ldr	r3, [r3, #24]
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d101      	bne.n	8001bca <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001bc6:	2301      	movs	r3, #1
 8001bc8:	e3a2      	b.n	8002310 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	6a1a      	ldr	r2, [r3, #32]
 8001bce:	4b82      	ldr	r3, [pc, #520]	; (8001dd8 <HAL_RCC_OscConfig+0x270>)
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	f003 0308 	and.w	r3, r3, #8
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d004      	beq.n	8001be4 <HAL_RCC_OscConfig+0x7c>
 8001bda:	4b7f      	ldr	r3, [pc, #508]	; (8001dd8 <HAL_RCC_OscConfig+0x270>)
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001be2:	e005      	b.n	8001bf0 <HAL_RCC_OscConfig+0x88>
 8001be4:	4b7c      	ldr	r3, [pc, #496]	; (8001dd8 <HAL_RCC_OscConfig+0x270>)
 8001be6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001bea:	091b      	lsrs	r3, r3, #4
 8001bec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001bf0:	4293      	cmp	r3, r2
 8001bf2:	d223      	bcs.n	8001c3c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	6a1b      	ldr	r3, [r3, #32]
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	f000 fd1d 	bl	8002638 <RCC_SetFlashLatencyFromMSIRange>
 8001bfe:	4603      	mov	r3, r0
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d001      	beq.n	8001c08 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001c04:	2301      	movs	r3, #1
 8001c06:	e383      	b.n	8002310 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001c08:	4b73      	ldr	r3, [pc, #460]	; (8001dd8 <HAL_RCC_OscConfig+0x270>)
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	4a72      	ldr	r2, [pc, #456]	; (8001dd8 <HAL_RCC_OscConfig+0x270>)
 8001c0e:	f043 0308 	orr.w	r3, r3, #8
 8001c12:	6013      	str	r3, [r2, #0]
 8001c14:	4b70      	ldr	r3, [pc, #448]	; (8001dd8 <HAL_RCC_OscConfig+0x270>)
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	6a1b      	ldr	r3, [r3, #32]
 8001c20:	496d      	ldr	r1, [pc, #436]	; (8001dd8 <HAL_RCC_OscConfig+0x270>)
 8001c22:	4313      	orrs	r3, r2
 8001c24:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001c26:	4b6c      	ldr	r3, [pc, #432]	; (8001dd8 <HAL_RCC_OscConfig+0x270>)
 8001c28:	685b      	ldr	r3, [r3, #4]
 8001c2a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	69db      	ldr	r3, [r3, #28]
 8001c32:	021b      	lsls	r3, r3, #8
 8001c34:	4968      	ldr	r1, [pc, #416]	; (8001dd8 <HAL_RCC_OscConfig+0x270>)
 8001c36:	4313      	orrs	r3, r2
 8001c38:	604b      	str	r3, [r1, #4]
 8001c3a:	e025      	b.n	8001c88 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001c3c:	4b66      	ldr	r3, [pc, #408]	; (8001dd8 <HAL_RCC_OscConfig+0x270>)
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	4a65      	ldr	r2, [pc, #404]	; (8001dd8 <HAL_RCC_OscConfig+0x270>)
 8001c42:	f043 0308 	orr.w	r3, r3, #8
 8001c46:	6013      	str	r3, [r2, #0]
 8001c48:	4b63      	ldr	r3, [pc, #396]	; (8001dd8 <HAL_RCC_OscConfig+0x270>)
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	6a1b      	ldr	r3, [r3, #32]
 8001c54:	4960      	ldr	r1, [pc, #384]	; (8001dd8 <HAL_RCC_OscConfig+0x270>)
 8001c56:	4313      	orrs	r3, r2
 8001c58:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001c5a:	4b5f      	ldr	r3, [pc, #380]	; (8001dd8 <HAL_RCC_OscConfig+0x270>)
 8001c5c:	685b      	ldr	r3, [r3, #4]
 8001c5e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	69db      	ldr	r3, [r3, #28]
 8001c66:	021b      	lsls	r3, r3, #8
 8001c68:	495b      	ldr	r1, [pc, #364]	; (8001dd8 <HAL_RCC_OscConfig+0x270>)
 8001c6a:	4313      	orrs	r3, r2
 8001c6c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001c6e:	69bb      	ldr	r3, [r7, #24]
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d109      	bne.n	8001c88 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	6a1b      	ldr	r3, [r3, #32]
 8001c78:	4618      	mov	r0, r3
 8001c7a:	f000 fcdd 	bl	8002638 <RCC_SetFlashLatencyFromMSIRange>
 8001c7e:	4603      	mov	r3, r0
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d001      	beq.n	8001c88 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001c84:	2301      	movs	r3, #1
 8001c86:	e343      	b.n	8002310 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001c88:	f000 fc4a 	bl	8002520 <HAL_RCC_GetSysClockFreq>
 8001c8c:	4602      	mov	r2, r0
 8001c8e:	4b52      	ldr	r3, [pc, #328]	; (8001dd8 <HAL_RCC_OscConfig+0x270>)
 8001c90:	689b      	ldr	r3, [r3, #8]
 8001c92:	091b      	lsrs	r3, r3, #4
 8001c94:	f003 030f 	and.w	r3, r3, #15
 8001c98:	4950      	ldr	r1, [pc, #320]	; (8001ddc <HAL_RCC_OscConfig+0x274>)
 8001c9a:	5ccb      	ldrb	r3, [r1, r3]
 8001c9c:	f003 031f 	and.w	r3, r3, #31
 8001ca0:	fa22 f303 	lsr.w	r3, r2, r3
 8001ca4:	4a4e      	ldr	r2, [pc, #312]	; (8001de0 <HAL_RCC_OscConfig+0x278>)
 8001ca6:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001ca8:	4b4e      	ldr	r3, [pc, #312]	; (8001de4 <HAL_RCC_OscConfig+0x27c>)
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	4618      	mov	r0, r3
 8001cae:	f7fe ff23 	bl	8000af8 <HAL_InitTick>
 8001cb2:	4603      	mov	r3, r0
 8001cb4:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001cb6:	7bfb      	ldrb	r3, [r7, #15]
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d052      	beq.n	8001d62 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001cbc:	7bfb      	ldrb	r3, [r7, #15]
 8001cbe:	e327      	b.n	8002310 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	699b      	ldr	r3, [r3, #24]
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d032      	beq.n	8001d2e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001cc8:	4b43      	ldr	r3, [pc, #268]	; (8001dd8 <HAL_RCC_OscConfig+0x270>)
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	4a42      	ldr	r2, [pc, #264]	; (8001dd8 <HAL_RCC_OscConfig+0x270>)
 8001cce:	f043 0301 	orr.w	r3, r3, #1
 8001cd2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001cd4:	f7fe ff60 	bl	8000b98 <HAL_GetTick>
 8001cd8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001cda:	e008      	b.n	8001cee <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001cdc:	f7fe ff5c 	bl	8000b98 <HAL_GetTick>
 8001ce0:	4602      	mov	r2, r0
 8001ce2:	693b      	ldr	r3, [r7, #16]
 8001ce4:	1ad3      	subs	r3, r2, r3
 8001ce6:	2b02      	cmp	r3, #2
 8001ce8:	d901      	bls.n	8001cee <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001cea:	2303      	movs	r3, #3
 8001cec:	e310      	b.n	8002310 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001cee:	4b3a      	ldr	r3, [pc, #232]	; (8001dd8 <HAL_RCC_OscConfig+0x270>)
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	f003 0302 	and.w	r3, r3, #2
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d0f0      	beq.n	8001cdc <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001cfa:	4b37      	ldr	r3, [pc, #220]	; (8001dd8 <HAL_RCC_OscConfig+0x270>)
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	4a36      	ldr	r2, [pc, #216]	; (8001dd8 <HAL_RCC_OscConfig+0x270>)
 8001d00:	f043 0308 	orr.w	r3, r3, #8
 8001d04:	6013      	str	r3, [r2, #0]
 8001d06:	4b34      	ldr	r3, [pc, #208]	; (8001dd8 <HAL_RCC_OscConfig+0x270>)
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	6a1b      	ldr	r3, [r3, #32]
 8001d12:	4931      	ldr	r1, [pc, #196]	; (8001dd8 <HAL_RCC_OscConfig+0x270>)
 8001d14:	4313      	orrs	r3, r2
 8001d16:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001d18:	4b2f      	ldr	r3, [pc, #188]	; (8001dd8 <HAL_RCC_OscConfig+0x270>)
 8001d1a:	685b      	ldr	r3, [r3, #4]
 8001d1c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	69db      	ldr	r3, [r3, #28]
 8001d24:	021b      	lsls	r3, r3, #8
 8001d26:	492c      	ldr	r1, [pc, #176]	; (8001dd8 <HAL_RCC_OscConfig+0x270>)
 8001d28:	4313      	orrs	r3, r2
 8001d2a:	604b      	str	r3, [r1, #4]
 8001d2c:	e01a      	b.n	8001d64 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001d2e:	4b2a      	ldr	r3, [pc, #168]	; (8001dd8 <HAL_RCC_OscConfig+0x270>)
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	4a29      	ldr	r2, [pc, #164]	; (8001dd8 <HAL_RCC_OscConfig+0x270>)
 8001d34:	f023 0301 	bic.w	r3, r3, #1
 8001d38:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001d3a:	f7fe ff2d 	bl	8000b98 <HAL_GetTick>
 8001d3e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001d40:	e008      	b.n	8001d54 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001d42:	f7fe ff29 	bl	8000b98 <HAL_GetTick>
 8001d46:	4602      	mov	r2, r0
 8001d48:	693b      	ldr	r3, [r7, #16]
 8001d4a:	1ad3      	subs	r3, r2, r3
 8001d4c:	2b02      	cmp	r3, #2
 8001d4e:	d901      	bls.n	8001d54 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001d50:	2303      	movs	r3, #3
 8001d52:	e2dd      	b.n	8002310 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001d54:	4b20      	ldr	r3, [pc, #128]	; (8001dd8 <HAL_RCC_OscConfig+0x270>)
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	f003 0302 	and.w	r3, r3, #2
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d1f0      	bne.n	8001d42 <HAL_RCC_OscConfig+0x1da>
 8001d60:	e000      	b.n	8001d64 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001d62:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	f003 0301 	and.w	r3, r3, #1
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d074      	beq.n	8001e5a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001d70:	69bb      	ldr	r3, [r7, #24]
 8001d72:	2b08      	cmp	r3, #8
 8001d74:	d005      	beq.n	8001d82 <HAL_RCC_OscConfig+0x21a>
 8001d76:	69bb      	ldr	r3, [r7, #24]
 8001d78:	2b0c      	cmp	r3, #12
 8001d7a:	d10e      	bne.n	8001d9a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001d7c:	697b      	ldr	r3, [r7, #20]
 8001d7e:	2b03      	cmp	r3, #3
 8001d80:	d10b      	bne.n	8001d9a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d82:	4b15      	ldr	r3, [pc, #84]	; (8001dd8 <HAL_RCC_OscConfig+0x270>)
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d064      	beq.n	8001e58 <HAL_RCC_OscConfig+0x2f0>
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	685b      	ldr	r3, [r3, #4]
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d160      	bne.n	8001e58 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001d96:	2301      	movs	r3, #1
 8001d98:	e2ba      	b.n	8002310 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	685b      	ldr	r3, [r3, #4]
 8001d9e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001da2:	d106      	bne.n	8001db2 <HAL_RCC_OscConfig+0x24a>
 8001da4:	4b0c      	ldr	r3, [pc, #48]	; (8001dd8 <HAL_RCC_OscConfig+0x270>)
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	4a0b      	ldr	r2, [pc, #44]	; (8001dd8 <HAL_RCC_OscConfig+0x270>)
 8001daa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001dae:	6013      	str	r3, [r2, #0]
 8001db0:	e026      	b.n	8001e00 <HAL_RCC_OscConfig+0x298>
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	685b      	ldr	r3, [r3, #4]
 8001db6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001dba:	d115      	bne.n	8001de8 <HAL_RCC_OscConfig+0x280>
 8001dbc:	4b06      	ldr	r3, [pc, #24]	; (8001dd8 <HAL_RCC_OscConfig+0x270>)
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	4a05      	ldr	r2, [pc, #20]	; (8001dd8 <HAL_RCC_OscConfig+0x270>)
 8001dc2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001dc6:	6013      	str	r3, [r2, #0]
 8001dc8:	4b03      	ldr	r3, [pc, #12]	; (8001dd8 <HAL_RCC_OscConfig+0x270>)
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	4a02      	ldr	r2, [pc, #8]	; (8001dd8 <HAL_RCC_OscConfig+0x270>)
 8001dce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001dd2:	6013      	str	r3, [r2, #0]
 8001dd4:	e014      	b.n	8001e00 <HAL_RCC_OscConfig+0x298>
 8001dd6:	bf00      	nop
 8001dd8:	40021000 	.word	0x40021000
 8001ddc:	08004240 	.word	0x08004240
 8001de0:	20000000 	.word	0x20000000
 8001de4:	20000004 	.word	0x20000004
 8001de8:	4ba0      	ldr	r3, [pc, #640]	; (800206c <HAL_RCC_OscConfig+0x504>)
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	4a9f      	ldr	r2, [pc, #636]	; (800206c <HAL_RCC_OscConfig+0x504>)
 8001dee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001df2:	6013      	str	r3, [r2, #0]
 8001df4:	4b9d      	ldr	r3, [pc, #628]	; (800206c <HAL_RCC_OscConfig+0x504>)
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	4a9c      	ldr	r2, [pc, #624]	; (800206c <HAL_RCC_OscConfig+0x504>)
 8001dfa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001dfe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	685b      	ldr	r3, [r3, #4]
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d013      	beq.n	8001e30 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e08:	f7fe fec6 	bl	8000b98 <HAL_GetTick>
 8001e0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001e0e:	e008      	b.n	8001e22 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e10:	f7fe fec2 	bl	8000b98 <HAL_GetTick>
 8001e14:	4602      	mov	r2, r0
 8001e16:	693b      	ldr	r3, [r7, #16]
 8001e18:	1ad3      	subs	r3, r2, r3
 8001e1a:	2b64      	cmp	r3, #100	; 0x64
 8001e1c:	d901      	bls.n	8001e22 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001e1e:	2303      	movs	r3, #3
 8001e20:	e276      	b.n	8002310 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001e22:	4b92      	ldr	r3, [pc, #584]	; (800206c <HAL_RCC_OscConfig+0x504>)
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d0f0      	beq.n	8001e10 <HAL_RCC_OscConfig+0x2a8>
 8001e2e:	e014      	b.n	8001e5a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e30:	f7fe feb2 	bl	8000b98 <HAL_GetTick>
 8001e34:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001e36:	e008      	b.n	8001e4a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e38:	f7fe feae 	bl	8000b98 <HAL_GetTick>
 8001e3c:	4602      	mov	r2, r0
 8001e3e:	693b      	ldr	r3, [r7, #16]
 8001e40:	1ad3      	subs	r3, r2, r3
 8001e42:	2b64      	cmp	r3, #100	; 0x64
 8001e44:	d901      	bls.n	8001e4a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001e46:	2303      	movs	r3, #3
 8001e48:	e262      	b.n	8002310 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001e4a:	4b88      	ldr	r3, [pc, #544]	; (800206c <HAL_RCC_OscConfig+0x504>)
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d1f0      	bne.n	8001e38 <HAL_RCC_OscConfig+0x2d0>
 8001e56:	e000      	b.n	8001e5a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e58:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f003 0302 	and.w	r3, r3, #2
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d060      	beq.n	8001f28 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001e66:	69bb      	ldr	r3, [r7, #24]
 8001e68:	2b04      	cmp	r3, #4
 8001e6a:	d005      	beq.n	8001e78 <HAL_RCC_OscConfig+0x310>
 8001e6c:	69bb      	ldr	r3, [r7, #24]
 8001e6e:	2b0c      	cmp	r3, #12
 8001e70:	d119      	bne.n	8001ea6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001e72:	697b      	ldr	r3, [r7, #20]
 8001e74:	2b02      	cmp	r3, #2
 8001e76:	d116      	bne.n	8001ea6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001e78:	4b7c      	ldr	r3, [pc, #496]	; (800206c <HAL_RCC_OscConfig+0x504>)
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d005      	beq.n	8001e90 <HAL_RCC_OscConfig+0x328>
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	68db      	ldr	r3, [r3, #12]
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d101      	bne.n	8001e90 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001e8c:	2301      	movs	r3, #1
 8001e8e:	e23f      	b.n	8002310 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e90:	4b76      	ldr	r3, [pc, #472]	; (800206c <HAL_RCC_OscConfig+0x504>)
 8001e92:	685b      	ldr	r3, [r3, #4]
 8001e94:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	691b      	ldr	r3, [r3, #16]
 8001e9c:	061b      	lsls	r3, r3, #24
 8001e9e:	4973      	ldr	r1, [pc, #460]	; (800206c <HAL_RCC_OscConfig+0x504>)
 8001ea0:	4313      	orrs	r3, r2
 8001ea2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001ea4:	e040      	b.n	8001f28 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	68db      	ldr	r3, [r3, #12]
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d023      	beq.n	8001ef6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001eae:	4b6f      	ldr	r3, [pc, #444]	; (800206c <HAL_RCC_OscConfig+0x504>)
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	4a6e      	ldr	r2, [pc, #440]	; (800206c <HAL_RCC_OscConfig+0x504>)
 8001eb4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001eb8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001eba:	f7fe fe6d 	bl	8000b98 <HAL_GetTick>
 8001ebe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001ec0:	e008      	b.n	8001ed4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ec2:	f7fe fe69 	bl	8000b98 <HAL_GetTick>
 8001ec6:	4602      	mov	r2, r0
 8001ec8:	693b      	ldr	r3, [r7, #16]
 8001eca:	1ad3      	subs	r3, r2, r3
 8001ecc:	2b02      	cmp	r3, #2
 8001ece:	d901      	bls.n	8001ed4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001ed0:	2303      	movs	r3, #3
 8001ed2:	e21d      	b.n	8002310 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001ed4:	4b65      	ldr	r3, [pc, #404]	; (800206c <HAL_RCC_OscConfig+0x504>)
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d0f0      	beq.n	8001ec2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ee0:	4b62      	ldr	r3, [pc, #392]	; (800206c <HAL_RCC_OscConfig+0x504>)
 8001ee2:	685b      	ldr	r3, [r3, #4]
 8001ee4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	691b      	ldr	r3, [r3, #16]
 8001eec:	061b      	lsls	r3, r3, #24
 8001eee:	495f      	ldr	r1, [pc, #380]	; (800206c <HAL_RCC_OscConfig+0x504>)
 8001ef0:	4313      	orrs	r3, r2
 8001ef2:	604b      	str	r3, [r1, #4]
 8001ef4:	e018      	b.n	8001f28 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001ef6:	4b5d      	ldr	r3, [pc, #372]	; (800206c <HAL_RCC_OscConfig+0x504>)
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	4a5c      	ldr	r2, [pc, #368]	; (800206c <HAL_RCC_OscConfig+0x504>)
 8001efc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001f00:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f02:	f7fe fe49 	bl	8000b98 <HAL_GetTick>
 8001f06:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001f08:	e008      	b.n	8001f1c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f0a:	f7fe fe45 	bl	8000b98 <HAL_GetTick>
 8001f0e:	4602      	mov	r2, r0
 8001f10:	693b      	ldr	r3, [r7, #16]
 8001f12:	1ad3      	subs	r3, r2, r3
 8001f14:	2b02      	cmp	r3, #2
 8001f16:	d901      	bls.n	8001f1c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001f18:	2303      	movs	r3, #3
 8001f1a:	e1f9      	b.n	8002310 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001f1c:	4b53      	ldr	r3, [pc, #332]	; (800206c <HAL_RCC_OscConfig+0x504>)
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d1f0      	bne.n	8001f0a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	f003 0308 	and.w	r3, r3, #8
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d03c      	beq.n	8001fae <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	695b      	ldr	r3, [r3, #20]
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d01c      	beq.n	8001f76 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001f3c:	4b4b      	ldr	r3, [pc, #300]	; (800206c <HAL_RCC_OscConfig+0x504>)
 8001f3e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f42:	4a4a      	ldr	r2, [pc, #296]	; (800206c <HAL_RCC_OscConfig+0x504>)
 8001f44:	f043 0301 	orr.w	r3, r3, #1
 8001f48:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f4c:	f7fe fe24 	bl	8000b98 <HAL_GetTick>
 8001f50:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001f52:	e008      	b.n	8001f66 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f54:	f7fe fe20 	bl	8000b98 <HAL_GetTick>
 8001f58:	4602      	mov	r2, r0
 8001f5a:	693b      	ldr	r3, [r7, #16]
 8001f5c:	1ad3      	subs	r3, r2, r3
 8001f5e:	2b02      	cmp	r3, #2
 8001f60:	d901      	bls.n	8001f66 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001f62:	2303      	movs	r3, #3
 8001f64:	e1d4      	b.n	8002310 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001f66:	4b41      	ldr	r3, [pc, #260]	; (800206c <HAL_RCC_OscConfig+0x504>)
 8001f68:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f6c:	f003 0302 	and.w	r3, r3, #2
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d0ef      	beq.n	8001f54 <HAL_RCC_OscConfig+0x3ec>
 8001f74:	e01b      	b.n	8001fae <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001f76:	4b3d      	ldr	r3, [pc, #244]	; (800206c <HAL_RCC_OscConfig+0x504>)
 8001f78:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f7c:	4a3b      	ldr	r2, [pc, #236]	; (800206c <HAL_RCC_OscConfig+0x504>)
 8001f7e:	f023 0301 	bic.w	r3, r3, #1
 8001f82:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f86:	f7fe fe07 	bl	8000b98 <HAL_GetTick>
 8001f8a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001f8c:	e008      	b.n	8001fa0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f8e:	f7fe fe03 	bl	8000b98 <HAL_GetTick>
 8001f92:	4602      	mov	r2, r0
 8001f94:	693b      	ldr	r3, [r7, #16]
 8001f96:	1ad3      	subs	r3, r2, r3
 8001f98:	2b02      	cmp	r3, #2
 8001f9a:	d901      	bls.n	8001fa0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001f9c:	2303      	movs	r3, #3
 8001f9e:	e1b7      	b.n	8002310 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001fa0:	4b32      	ldr	r3, [pc, #200]	; (800206c <HAL_RCC_OscConfig+0x504>)
 8001fa2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001fa6:	f003 0302 	and.w	r3, r3, #2
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d1ef      	bne.n	8001f8e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f003 0304 	and.w	r3, r3, #4
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	f000 80a6 	beq.w	8002108 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001fbc:	2300      	movs	r3, #0
 8001fbe:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001fc0:	4b2a      	ldr	r3, [pc, #168]	; (800206c <HAL_RCC_OscConfig+0x504>)
 8001fc2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fc4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d10d      	bne.n	8001fe8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001fcc:	4b27      	ldr	r3, [pc, #156]	; (800206c <HAL_RCC_OscConfig+0x504>)
 8001fce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fd0:	4a26      	ldr	r2, [pc, #152]	; (800206c <HAL_RCC_OscConfig+0x504>)
 8001fd2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001fd6:	6593      	str	r3, [r2, #88]	; 0x58
 8001fd8:	4b24      	ldr	r3, [pc, #144]	; (800206c <HAL_RCC_OscConfig+0x504>)
 8001fda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fdc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fe0:	60bb      	str	r3, [r7, #8]
 8001fe2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001fe4:	2301      	movs	r3, #1
 8001fe6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001fe8:	4b21      	ldr	r3, [pc, #132]	; (8002070 <HAL_RCC_OscConfig+0x508>)
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d118      	bne.n	8002026 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001ff4:	4b1e      	ldr	r3, [pc, #120]	; (8002070 <HAL_RCC_OscConfig+0x508>)
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	4a1d      	ldr	r2, [pc, #116]	; (8002070 <HAL_RCC_OscConfig+0x508>)
 8001ffa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ffe:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002000:	f7fe fdca 	bl	8000b98 <HAL_GetTick>
 8002004:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002006:	e008      	b.n	800201a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002008:	f7fe fdc6 	bl	8000b98 <HAL_GetTick>
 800200c:	4602      	mov	r2, r0
 800200e:	693b      	ldr	r3, [r7, #16]
 8002010:	1ad3      	subs	r3, r2, r3
 8002012:	2b02      	cmp	r3, #2
 8002014:	d901      	bls.n	800201a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002016:	2303      	movs	r3, #3
 8002018:	e17a      	b.n	8002310 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800201a:	4b15      	ldr	r3, [pc, #84]	; (8002070 <HAL_RCC_OscConfig+0x508>)
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002022:	2b00      	cmp	r3, #0
 8002024:	d0f0      	beq.n	8002008 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	689b      	ldr	r3, [r3, #8]
 800202a:	2b01      	cmp	r3, #1
 800202c:	d108      	bne.n	8002040 <HAL_RCC_OscConfig+0x4d8>
 800202e:	4b0f      	ldr	r3, [pc, #60]	; (800206c <HAL_RCC_OscConfig+0x504>)
 8002030:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002034:	4a0d      	ldr	r2, [pc, #52]	; (800206c <HAL_RCC_OscConfig+0x504>)
 8002036:	f043 0301 	orr.w	r3, r3, #1
 800203a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800203e:	e029      	b.n	8002094 <HAL_RCC_OscConfig+0x52c>
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	689b      	ldr	r3, [r3, #8]
 8002044:	2b05      	cmp	r3, #5
 8002046:	d115      	bne.n	8002074 <HAL_RCC_OscConfig+0x50c>
 8002048:	4b08      	ldr	r3, [pc, #32]	; (800206c <HAL_RCC_OscConfig+0x504>)
 800204a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800204e:	4a07      	ldr	r2, [pc, #28]	; (800206c <HAL_RCC_OscConfig+0x504>)
 8002050:	f043 0304 	orr.w	r3, r3, #4
 8002054:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002058:	4b04      	ldr	r3, [pc, #16]	; (800206c <HAL_RCC_OscConfig+0x504>)
 800205a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800205e:	4a03      	ldr	r2, [pc, #12]	; (800206c <HAL_RCC_OscConfig+0x504>)
 8002060:	f043 0301 	orr.w	r3, r3, #1
 8002064:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002068:	e014      	b.n	8002094 <HAL_RCC_OscConfig+0x52c>
 800206a:	bf00      	nop
 800206c:	40021000 	.word	0x40021000
 8002070:	40007000 	.word	0x40007000
 8002074:	4b9c      	ldr	r3, [pc, #624]	; (80022e8 <HAL_RCC_OscConfig+0x780>)
 8002076:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800207a:	4a9b      	ldr	r2, [pc, #620]	; (80022e8 <HAL_RCC_OscConfig+0x780>)
 800207c:	f023 0301 	bic.w	r3, r3, #1
 8002080:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002084:	4b98      	ldr	r3, [pc, #608]	; (80022e8 <HAL_RCC_OscConfig+0x780>)
 8002086:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800208a:	4a97      	ldr	r2, [pc, #604]	; (80022e8 <HAL_RCC_OscConfig+0x780>)
 800208c:	f023 0304 	bic.w	r3, r3, #4
 8002090:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	689b      	ldr	r3, [r3, #8]
 8002098:	2b00      	cmp	r3, #0
 800209a:	d016      	beq.n	80020ca <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800209c:	f7fe fd7c 	bl	8000b98 <HAL_GetTick>
 80020a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80020a2:	e00a      	b.n	80020ba <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020a4:	f7fe fd78 	bl	8000b98 <HAL_GetTick>
 80020a8:	4602      	mov	r2, r0
 80020aa:	693b      	ldr	r3, [r7, #16]
 80020ac:	1ad3      	subs	r3, r2, r3
 80020ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80020b2:	4293      	cmp	r3, r2
 80020b4:	d901      	bls.n	80020ba <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80020b6:	2303      	movs	r3, #3
 80020b8:	e12a      	b.n	8002310 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80020ba:	4b8b      	ldr	r3, [pc, #556]	; (80022e8 <HAL_RCC_OscConfig+0x780>)
 80020bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020c0:	f003 0302 	and.w	r3, r3, #2
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d0ed      	beq.n	80020a4 <HAL_RCC_OscConfig+0x53c>
 80020c8:	e015      	b.n	80020f6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020ca:	f7fe fd65 	bl	8000b98 <HAL_GetTick>
 80020ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80020d0:	e00a      	b.n	80020e8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020d2:	f7fe fd61 	bl	8000b98 <HAL_GetTick>
 80020d6:	4602      	mov	r2, r0
 80020d8:	693b      	ldr	r3, [r7, #16]
 80020da:	1ad3      	subs	r3, r2, r3
 80020dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80020e0:	4293      	cmp	r3, r2
 80020e2:	d901      	bls.n	80020e8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80020e4:	2303      	movs	r3, #3
 80020e6:	e113      	b.n	8002310 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80020e8:	4b7f      	ldr	r3, [pc, #508]	; (80022e8 <HAL_RCC_OscConfig+0x780>)
 80020ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020ee:	f003 0302 	and.w	r3, r3, #2
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d1ed      	bne.n	80020d2 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80020f6:	7ffb      	ldrb	r3, [r7, #31]
 80020f8:	2b01      	cmp	r3, #1
 80020fa:	d105      	bne.n	8002108 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80020fc:	4b7a      	ldr	r3, [pc, #488]	; (80022e8 <HAL_RCC_OscConfig+0x780>)
 80020fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002100:	4a79      	ldr	r2, [pc, #484]	; (80022e8 <HAL_RCC_OscConfig+0x780>)
 8002102:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002106:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800210c:	2b00      	cmp	r3, #0
 800210e:	f000 80fe 	beq.w	800230e <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002116:	2b02      	cmp	r3, #2
 8002118:	f040 80d0 	bne.w	80022bc <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800211c:	4b72      	ldr	r3, [pc, #456]	; (80022e8 <HAL_RCC_OscConfig+0x780>)
 800211e:	68db      	ldr	r3, [r3, #12]
 8002120:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002122:	697b      	ldr	r3, [r7, #20]
 8002124:	f003 0203 	and.w	r2, r3, #3
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800212c:	429a      	cmp	r2, r3
 800212e:	d130      	bne.n	8002192 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002130:	697b      	ldr	r3, [r7, #20]
 8002132:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800213a:	3b01      	subs	r3, #1
 800213c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800213e:	429a      	cmp	r2, r3
 8002140:	d127      	bne.n	8002192 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002142:	697b      	ldr	r3, [r7, #20]
 8002144:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800214c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800214e:	429a      	cmp	r2, r3
 8002150:	d11f      	bne.n	8002192 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002152:	697b      	ldr	r3, [r7, #20]
 8002154:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002158:	687a      	ldr	r2, [r7, #4]
 800215a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800215c:	2a07      	cmp	r2, #7
 800215e:	bf14      	ite	ne
 8002160:	2201      	movne	r2, #1
 8002162:	2200      	moveq	r2, #0
 8002164:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002166:	4293      	cmp	r3, r2
 8002168:	d113      	bne.n	8002192 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800216a:	697b      	ldr	r3, [r7, #20]
 800216c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002174:	085b      	lsrs	r3, r3, #1
 8002176:	3b01      	subs	r3, #1
 8002178:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800217a:	429a      	cmp	r2, r3
 800217c:	d109      	bne.n	8002192 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800217e:	697b      	ldr	r3, [r7, #20]
 8002180:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002188:	085b      	lsrs	r3, r3, #1
 800218a:	3b01      	subs	r3, #1
 800218c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800218e:	429a      	cmp	r2, r3
 8002190:	d06e      	beq.n	8002270 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002192:	69bb      	ldr	r3, [r7, #24]
 8002194:	2b0c      	cmp	r3, #12
 8002196:	d069      	beq.n	800226c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002198:	4b53      	ldr	r3, [pc, #332]	; (80022e8 <HAL_RCC_OscConfig+0x780>)
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d105      	bne.n	80021b0 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80021a4:	4b50      	ldr	r3, [pc, #320]	; (80022e8 <HAL_RCC_OscConfig+0x780>)
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d001      	beq.n	80021b4 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80021b0:	2301      	movs	r3, #1
 80021b2:	e0ad      	b.n	8002310 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80021b4:	4b4c      	ldr	r3, [pc, #304]	; (80022e8 <HAL_RCC_OscConfig+0x780>)
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	4a4b      	ldr	r2, [pc, #300]	; (80022e8 <HAL_RCC_OscConfig+0x780>)
 80021ba:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80021be:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80021c0:	f7fe fcea 	bl	8000b98 <HAL_GetTick>
 80021c4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80021c6:	e008      	b.n	80021da <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021c8:	f7fe fce6 	bl	8000b98 <HAL_GetTick>
 80021cc:	4602      	mov	r2, r0
 80021ce:	693b      	ldr	r3, [r7, #16]
 80021d0:	1ad3      	subs	r3, r2, r3
 80021d2:	2b02      	cmp	r3, #2
 80021d4:	d901      	bls.n	80021da <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80021d6:	2303      	movs	r3, #3
 80021d8:	e09a      	b.n	8002310 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80021da:	4b43      	ldr	r3, [pc, #268]	; (80022e8 <HAL_RCC_OscConfig+0x780>)
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d1f0      	bne.n	80021c8 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80021e6:	4b40      	ldr	r3, [pc, #256]	; (80022e8 <HAL_RCC_OscConfig+0x780>)
 80021e8:	68da      	ldr	r2, [r3, #12]
 80021ea:	4b40      	ldr	r3, [pc, #256]	; (80022ec <HAL_RCC_OscConfig+0x784>)
 80021ec:	4013      	ands	r3, r2
 80021ee:	687a      	ldr	r2, [r7, #4]
 80021f0:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80021f2:	687a      	ldr	r2, [r7, #4]
 80021f4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80021f6:	3a01      	subs	r2, #1
 80021f8:	0112      	lsls	r2, r2, #4
 80021fa:	4311      	orrs	r1, r2
 80021fc:	687a      	ldr	r2, [r7, #4]
 80021fe:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002200:	0212      	lsls	r2, r2, #8
 8002202:	4311      	orrs	r1, r2
 8002204:	687a      	ldr	r2, [r7, #4]
 8002206:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002208:	0852      	lsrs	r2, r2, #1
 800220a:	3a01      	subs	r2, #1
 800220c:	0552      	lsls	r2, r2, #21
 800220e:	4311      	orrs	r1, r2
 8002210:	687a      	ldr	r2, [r7, #4]
 8002212:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002214:	0852      	lsrs	r2, r2, #1
 8002216:	3a01      	subs	r2, #1
 8002218:	0652      	lsls	r2, r2, #25
 800221a:	4311      	orrs	r1, r2
 800221c:	687a      	ldr	r2, [r7, #4]
 800221e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002220:	0912      	lsrs	r2, r2, #4
 8002222:	0452      	lsls	r2, r2, #17
 8002224:	430a      	orrs	r2, r1
 8002226:	4930      	ldr	r1, [pc, #192]	; (80022e8 <HAL_RCC_OscConfig+0x780>)
 8002228:	4313      	orrs	r3, r2
 800222a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800222c:	4b2e      	ldr	r3, [pc, #184]	; (80022e8 <HAL_RCC_OscConfig+0x780>)
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	4a2d      	ldr	r2, [pc, #180]	; (80022e8 <HAL_RCC_OscConfig+0x780>)
 8002232:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002236:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002238:	4b2b      	ldr	r3, [pc, #172]	; (80022e8 <HAL_RCC_OscConfig+0x780>)
 800223a:	68db      	ldr	r3, [r3, #12]
 800223c:	4a2a      	ldr	r2, [pc, #168]	; (80022e8 <HAL_RCC_OscConfig+0x780>)
 800223e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002242:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002244:	f7fe fca8 	bl	8000b98 <HAL_GetTick>
 8002248:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800224a:	e008      	b.n	800225e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800224c:	f7fe fca4 	bl	8000b98 <HAL_GetTick>
 8002250:	4602      	mov	r2, r0
 8002252:	693b      	ldr	r3, [r7, #16]
 8002254:	1ad3      	subs	r3, r2, r3
 8002256:	2b02      	cmp	r3, #2
 8002258:	d901      	bls.n	800225e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800225a:	2303      	movs	r3, #3
 800225c:	e058      	b.n	8002310 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800225e:	4b22      	ldr	r3, [pc, #136]	; (80022e8 <HAL_RCC_OscConfig+0x780>)
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002266:	2b00      	cmp	r3, #0
 8002268:	d0f0      	beq.n	800224c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800226a:	e050      	b.n	800230e <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800226c:	2301      	movs	r3, #1
 800226e:	e04f      	b.n	8002310 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002270:	4b1d      	ldr	r3, [pc, #116]	; (80022e8 <HAL_RCC_OscConfig+0x780>)
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002278:	2b00      	cmp	r3, #0
 800227a:	d148      	bne.n	800230e <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800227c:	4b1a      	ldr	r3, [pc, #104]	; (80022e8 <HAL_RCC_OscConfig+0x780>)
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	4a19      	ldr	r2, [pc, #100]	; (80022e8 <HAL_RCC_OscConfig+0x780>)
 8002282:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002286:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002288:	4b17      	ldr	r3, [pc, #92]	; (80022e8 <HAL_RCC_OscConfig+0x780>)
 800228a:	68db      	ldr	r3, [r3, #12]
 800228c:	4a16      	ldr	r2, [pc, #88]	; (80022e8 <HAL_RCC_OscConfig+0x780>)
 800228e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002292:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002294:	f7fe fc80 	bl	8000b98 <HAL_GetTick>
 8002298:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800229a:	e008      	b.n	80022ae <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800229c:	f7fe fc7c 	bl	8000b98 <HAL_GetTick>
 80022a0:	4602      	mov	r2, r0
 80022a2:	693b      	ldr	r3, [r7, #16]
 80022a4:	1ad3      	subs	r3, r2, r3
 80022a6:	2b02      	cmp	r3, #2
 80022a8:	d901      	bls.n	80022ae <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80022aa:	2303      	movs	r3, #3
 80022ac:	e030      	b.n	8002310 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80022ae:	4b0e      	ldr	r3, [pc, #56]	; (80022e8 <HAL_RCC_OscConfig+0x780>)
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d0f0      	beq.n	800229c <HAL_RCC_OscConfig+0x734>
 80022ba:	e028      	b.n	800230e <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80022bc:	69bb      	ldr	r3, [r7, #24]
 80022be:	2b0c      	cmp	r3, #12
 80022c0:	d023      	beq.n	800230a <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022c2:	4b09      	ldr	r3, [pc, #36]	; (80022e8 <HAL_RCC_OscConfig+0x780>)
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	4a08      	ldr	r2, [pc, #32]	; (80022e8 <HAL_RCC_OscConfig+0x780>)
 80022c8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80022cc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022ce:	f7fe fc63 	bl	8000b98 <HAL_GetTick>
 80022d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80022d4:	e00c      	b.n	80022f0 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022d6:	f7fe fc5f 	bl	8000b98 <HAL_GetTick>
 80022da:	4602      	mov	r2, r0
 80022dc:	693b      	ldr	r3, [r7, #16]
 80022de:	1ad3      	subs	r3, r2, r3
 80022e0:	2b02      	cmp	r3, #2
 80022e2:	d905      	bls.n	80022f0 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80022e4:	2303      	movs	r3, #3
 80022e6:	e013      	b.n	8002310 <HAL_RCC_OscConfig+0x7a8>
 80022e8:	40021000 	.word	0x40021000
 80022ec:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80022f0:	4b09      	ldr	r3, [pc, #36]	; (8002318 <HAL_RCC_OscConfig+0x7b0>)
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d1ec      	bne.n	80022d6 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80022fc:	4b06      	ldr	r3, [pc, #24]	; (8002318 <HAL_RCC_OscConfig+0x7b0>)
 80022fe:	68da      	ldr	r2, [r3, #12]
 8002300:	4905      	ldr	r1, [pc, #20]	; (8002318 <HAL_RCC_OscConfig+0x7b0>)
 8002302:	4b06      	ldr	r3, [pc, #24]	; (800231c <HAL_RCC_OscConfig+0x7b4>)
 8002304:	4013      	ands	r3, r2
 8002306:	60cb      	str	r3, [r1, #12]
 8002308:	e001      	b.n	800230e <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800230a:	2301      	movs	r3, #1
 800230c:	e000      	b.n	8002310 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 800230e:	2300      	movs	r3, #0
}
 8002310:	4618      	mov	r0, r3
 8002312:	3720      	adds	r7, #32
 8002314:	46bd      	mov	sp, r7
 8002316:	bd80      	pop	{r7, pc}
 8002318:	40021000 	.word	0x40021000
 800231c:	feeefffc 	.word	0xfeeefffc

08002320 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002320:	b580      	push	{r7, lr}
 8002322:	b084      	sub	sp, #16
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]
 8002328:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	2b00      	cmp	r3, #0
 800232e:	d101      	bne.n	8002334 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002330:	2301      	movs	r3, #1
 8002332:	e0e7      	b.n	8002504 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002334:	4b75      	ldr	r3, [pc, #468]	; (800250c <HAL_RCC_ClockConfig+0x1ec>)
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f003 0307 	and.w	r3, r3, #7
 800233c:	683a      	ldr	r2, [r7, #0]
 800233e:	429a      	cmp	r2, r3
 8002340:	d910      	bls.n	8002364 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002342:	4b72      	ldr	r3, [pc, #456]	; (800250c <HAL_RCC_ClockConfig+0x1ec>)
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f023 0207 	bic.w	r2, r3, #7
 800234a:	4970      	ldr	r1, [pc, #448]	; (800250c <HAL_RCC_ClockConfig+0x1ec>)
 800234c:	683b      	ldr	r3, [r7, #0]
 800234e:	4313      	orrs	r3, r2
 8002350:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002352:	4b6e      	ldr	r3, [pc, #440]	; (800250c <HAL_RCC_ClockConfig+0x1ec>)
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f003 0307 	and.w	r3, r3, #7
 800235a:	683a      	ldr	r2, [r7, #0]
 800235c:	429a      	cmp	r2, r3
 800235e:	d001      	beq.n	8002364 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002360:	2301      	movs	r3, #1
 8002362:	e0cf      	b.n	8002504 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	f003 0302 	and.w	r3, r3, #2
 800236c:	2b00      	cmp	r3, #0
 800236e:	d010      	beq.n	8002392 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	689a      	ldr	r2, [r3, #8]
 8002374:	4b66      	ldr	r3, [pc, #408]	; (8002510 <HAL_RCC_ClockConfig+0x1f0>)
 8002376:	689b      	ldr	r3, [r3, #8]
 8002378:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800237c:	429a      	cmp	r2, r3
 800237e:	d908      	bls.n	8002392 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002380:	4b63      	ldr	r3, [pc, #396]	; (8002510 <HAL_RCC_ClockConfig+0x1f0>)
 8002382:	689b      	ldr	r3, [r3, #8]
 8002384:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	689b      	ldr	r3, [r3, #8]
 800238c:	4960      	ldr	r1, [pc, #384]	; (8002510 <HAL_RCC_ClockConfig+0x1f0>)
 800238e:	4313      	orrs	r3, r2
 8002390:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f003 0301 	and.w	r3, r3, #1
 800239a:	2b00      	cmp	r3, #0
 800239c:	d04c      	beq.n	8002438 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	685b      	ldr	r3, [r3, #4]
 80023a2:	2b03      	cmp	r3, #3
 80023a4:	d107      	bne.n	80023b6 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80023a6:	4b5a      	ldr	r3, [pc, #360]	; (8002510 <HAL_RCC_ClockConfig+0x1f0>)
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d121      	bne.n	80023f6 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80023b2:	2301      	movs	r3, #1
 80023b4:	e0a6      	b.n	8002504 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	685b      	ldr	r3, [r3, #4]
 80023ba:	2b02      	cmp	r3, #2
 80023bc:	d107      	bne.n	80023ce <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80023be:	4b54      	ldr	r3, [pc, #336]	; (8002510 <HAL_RCC_ClockConfig+0x1f0>)
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d115      	bne.n	80023f6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80023ca:	2301      	movs	r3, #1
 80023cc:	e09a      	b.n	8002504 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	685b      	ldr	r3, [r3, #4]
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d107      	bne.n	80023e6 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80023d6:	4b4e      	ldr	r3, [pc, #312]	; (8002510 <HAL_RCC_ClockConfig+0x1f0>)
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f003 0302 	and.w	r3, r3, #2
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d109      	bne.n	80023f6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80023e2:	2301      	movs	r3, #1
 80023e4:	e08e      	b.n	8002504 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80023e6:	4b4a      	ldr	r3, [pc, #296]	; (8002510 <HAL_RCC_ClockConfig+0x1f0>)
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d101      	bne.n	80023f6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80023f2:	2301      	movs	r3, #1
 80023f4:	e086      	b.n	8002504 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80023f6:	4b46      	ldr	r3, [pc, #280]	; (8002510 <HAL_RCC_ClockConfig+0x1f0>)
 80023f8:	689b      	ldr	r3, [r3, #8]
 80023fa:	f023 0203 	bic.w	r2, r3, #3
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	685b      	ldr	r3, [r3, #4]
 8002402:	4943      	ldr	r1, [pc, #268]	; (8002510 <HAL_RCC_ClockConfig+0x1f0>)
 8002404:	4313      	orrs	r3, r2
 8002406:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002408:	f7fe fbc6 	bl	8000b98 <HAL_GetTick>
 800240c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800240e:	e00a      	b.n	8002426 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002410:	f7fe fbc2 	bl	8000b98 <HAL_GetTick>
 8002414:	4602      	mov	r2, r0
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	1ad3      	subs	r3, r2, r3
 800241a:	f241 3288 	movw	r2, #5000	; 0x1388
 800241e:	4293      	cmp	r3, r2
 8002420:	d901      	bls.n	8002426 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002422:	2303      	movs	r3, #3
 8002424:	e06e      	b.n	8002504 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002426:	4b3a      	ldr	r3, [pc, #232]	; (8002510 <HAL_RCC_ClockConfig+0x1f0>)
 8002428:	689b      	ldr	r3, [r3, #8]
 800242a:	f003 020c 	and.w	r2, r3, #12
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	685b      	ldr	r3, [r3, #4]
 8002432:	009b      	lsls	r3, r3, #2
 8002434:	429a      	cmp	r2, r3
 8002436:	d1eb      	bne.n	8002410 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f003 0302 	and.w	r3, r3, #2
 8002440:	2b00      	cmp	r3, #0
 8002442:	d010      	beq.n	8002466 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	689a      	ldr	r2, [r3, #8]
 8002448:	4b31      	ldr	r3, [pc, #196]	; (8002510 <HAL_RCC_ClockConfig+0x1f0>)
 800244a:	689b      	ldr	r3, [r3, #8]
 800244c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002450:	429a      	cmp	r2, r3
 8002452:	d208      	bcs.n	8002466 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002454:	4b2e      	ldr	r3, [pc, #184]	; (8002510 <HAL_RCC_ClockConfig+0x1f0>)
 8002456:	689b      	ldr	r3, [r3, #8]
 8002458:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	689b      	ldr	r3, [r3, #8]
 8002460:	492b      	ldr	r1, [pc, #172]	; (8002510 <HAL_RCC_ClockConfig+0x1f0>)
 8002462:	4313      	orrs	r3, r2
 8002464:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002466:	4b29      	ldr	r3, [pc, #164]	; (800250c <HAL_RCC_ClockConfig+0x1ec>)
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f003 0307 	and.w	r3, r3, #7
 800246e:	683a      	ldr	r2, [r7, #0]
 8002470:	429a      	cmp	r2, r3
 8002472:	d210      	bcs.n	8002496 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002474:	4b25      	ldr	r3, [pc, #148]	; (800250c <HAL_RCC_ClockConfig+0x1ec>)
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f023 0207 	bic.w	r2, r3, #7
 800247c:	4923      	ldr	r1, [pc, #140]	; (800250c <HAL_RCC_ClockConfig+0x1ec>)
 800247e:	683b      	ldr	r3, [r7, #0]
 8002480:	4313      	orrs	r3, r2
 8002482:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002484:	4b21      	ldr	r3, [pc, #132]	; (800250c <HAL_RCC_ClockConfig+0x1ec>)
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f003 0307 	and.w	r3, r3, #7
 800248c:	683a      	ldr	r2, [r7, #0]
 800248e:	429a      	cmp	r2, r3
 8002490:	d001      	beq.n	8002496 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002492:	2301      	movs	r3, #1
 8002494:	e036      	b.n	8002504 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f003 0304 	and.w	r3, r3, #4
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d008      	beq.n	80024b4 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80024a2:	4b1b      	ldr	r3, [pc, #108]	; (8002510 <HAL_RCC_ClockConfig+0x1f0>)
 80024a4:	689b      	ldr	r3, [r3, #8]
 80024a6:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	68db      	ldr	r3, [r3, #12]
 80024ae:	4918      	ldr	r1, [pc, #96]	; (8002510 <HAL_RCC_ClockConfig+0x1f0>)
 80024b0:	4313      	orrs	r3, r2
 80024b2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f003 0308 	and.w	r3, r3, #8
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d009      	beq.n	80024d4 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80024c0:	4b13      	ldr	r3, [pc, #76]	; (8002510 <HAL_RCC_ClockConfig+0x1f0>)
 80024c2:	689b      	ldr	r3, [r3, #8]
 80024c4:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	691b      	ldr	r3, [r3, #16]
 80024cc:	00db      	lsls	r3, r3, #3
 80024ce:	4910      	ldr	r1, [pc, #64]	; (8002510 <HAL_RCC_ClockConfig+0x1f0>)
 80024d0:	4313      	orrs	r3, r2
 80024d2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80024d4:	f000 f824 	bl	8002520 <HAL_RCC_GetSysClockFreq>
 80024d8:	4602      	mov	r2, r0
 80024da:	4b0d      	ldr	r3, [pc, #52]	; (8002510 <HAL_RCC_ClockConfig+0x1f0>)
 80024dc:	689b      	ldr	r3, [r3, #8]
 80024de:	091b      	lsrs	r3, r3, #4
 80024e0:	f003 030f 	and.w	r3, r3, #15
 80024e4:	490b      	ldr	r1, [pc, #44]	; (8002514 <HAL_RCC_ClockConfig+0x1f4>)
 80024e6:	5ccb      	ldrb	r3, [r1, r3]
 80024e8:	f003 031f 	and.w	r3, r3, #31
 80024ec:	fa22 f303 	lsr.w	r3, r2, r3
 80024f0:	4a09      	ldr	r2, [pc, #36]	; (8002518 <HAL_RCC_ClockConfig+0x1f8>)
 80024f2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80024f4:	4b09      	ldr	r3, [pc, #36]	; (800251c <HAL_RCC_ClockConfig+0x1fc>)
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	4618      	mov	r0, r3
 80024fa:	f7fe fafd 	bl	8000af8 <HAL_InitTick>
 80024fe:	4603      	mov	r3, r0
 8002500:	72fb      	strb	r3, [r7, #11]

  return status;
 8002502:	7afb      	ldrb	r3, [r7, #11]
}
 8002504:	4618      	mov	r0, r3
 8002506:	3710      	adds	r7, #16
 8002508:	46bd      	mov	sp, r7
 800250a:	bd80      	pop	{r7, pc}
 800250c:	40022000 	.word	0x40022000
 8002510:	40021000 	.word	0x40021000
 8002514:	08004240 	.word	0x08004240
 8002518:	20000000 	.word	0x20000000
 800251c:	20000004 	.word	0x20000004

08002520 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002520:	b480      	push	{r7}
 8002522:	b089      	sub	sp, #36	; 0x24
 8002524:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002526:	2300      	movs	r3, #0
 8002528:	61fb      	str	r3, [r7, #28]
 800252a:	2300      	movs	r3, #0
 800252c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800252e:	4b3e      	ldr	r3, [pc, #248]	; (8002628 <HAL_RCC_GetSysClockFreq+0x108>)
 8002530:	689b      	ldr	r3, [r3, #8]
 8002532:	f003 030c 	and.w	r3, r3, #12
 8002536:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002538:	4b3b      	ldr	r3, [pc, #236]	; (8002628 <HAL_RCC_GetSysClockFreq+0x108>)
 800253a:	68db      	ldr	r3, [r3, #12]
 800253c:	f003 0303 	and.w	r3, r3, #3
 8002540:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002542:	693b      	ldr	r3, [r7, #16]
 8002544:	2b00      	cmp	r3, #0
 8002546:	d005      	beq.n	8002554 <HAL_RCC_GetSysClockFreq+0x34>
 8002548:	693b      	ldr	r3, [r7, #16]
 800254a:	2b0c      	cmp	r3, #12
 800254c:	d121      	bne.n	8002592 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	2b01      	cmp	r3, #1
 8002552:	d11e      	bne.n	8002592 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002554:	4b34      	ldr	r3, [pc, #208]	; (8002628 <HAL_RCC_GetSysClockFreq+0x108>)
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f003 0308 	and.w	r3, r3, #8
 800255c:	2b00      	cmp	r3, #0
 800255e:	d107      	bne.n	8002570 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002560:	4b31      	ldr	r3, [pc, #196]	; (8002628 <HAL_RCC_GetSysClockFreq+0x108>)
 8002562:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002566:	0a1b      	lsrs	r3, r3, #8
 8002568:	f003 030f 	and.w	r3, r3, #15
 800256c:	61fb      	str	r3, [r7, #28]
 800256e:	e005      	b.n	800257c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002570:	4b2d      	ldr	r3, [pc, #180]	; (8002628 <HAL_RCC_GetSysClockFreq+0x108>)
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	091b      	lsrs	r3, r3, #4
 8002576:	f003 030f 	and.w	r3, r3, #15
 800257a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800257c:	4a2b      	ldr	r2, [pc, #172]	; (800262c <HAL_RCC_GetSysClockFreq+0x10c>)
 800257e:	69fb      	ldr	r3, [r7, #28]
 8002580:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002584:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002586:	693b      	ldr	r3, [r7, #16]
 8002588:	2b00      	cmp	r3, #0
 800258a:	d10d      	bne.n	80025a8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800258c:	69fb      	ldr	r3, [r7, #28]
 800258e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002590:	e00a      	b.n	80025a8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002592:	693b      	ldr	r3, [r7, #16]
 8002594:	2b04      	cmp	r3, #4
 8002596:	d102      	bne.n	800259e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002598:	4b25      	ldr	r3, [pc, #148]	; (8002630 <HAL_RCC_GetSysClockFreq+0x110>)
 800259a:	61bb      	str	r3, [r7, #24]
 800259c:	e004      	b.n	80025a8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800259e:	693b      	ldr	r3, [r7, #16]
 80025a0:	2b08      	cmp	r3, #8
 80025a2:	d101      	bne.n	80025a8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80025a4:	4b23      	ldr	r3, [pc, #140]	; (8002634 <HAL_RCC_GetSysClockFreq+0x114>)
 80025a6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80025a8:	693b      	ldr	r3, [r7, #16]
 80025aa:	2b0c      	cmp	r3, #12
 80025ac:	d134      	bne.n	8002618 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80025ae:	4b1e      	ldr	r3, [pc, #120]	; (8002628 <HAL_RCC_GetSysClockFreq+0x108>)
 80025b0:	68db      	ldr	r3, [r3, #12]
 80025b2:	f003 0303 	and.w	r3, r3, #3
 80025b6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80025b8:	68bb      	ldr	r3, [r7, #8]
 80025ba:	2b02      	cmp	r3, #2
 80025bc:	d003      	beq.n	80025c6 <HAL_RCC_GetSysClockFreq+0xa6>
 80025be:	68bb      	ldr	r3, [r7, #8]
 80025c0:	2b03      	cmp	r3, #3
 80025c2:	d003      	beq.n	80025cc <HAL_RCC_GetSysClockFreq+0xac>
 80025c4:	e005      	b.n	80025d2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80025c6:	4b1a      	ldr	r3, [pc, #104]	; (8002630 <HAL_RCC_GetSysClockFreq+0x110>)
 80025c8:	617b      	str	r3, [r7, #20]
      break;
 80025ca:	e005      	b.n	80025d8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80025cc:	4b19      	ldr	r3, [pc, #100]	; (8002634 <HAL_RCC_GetSysClockFreq+0x114>)
 80025ce:	617b      	str	r3, [r7, #20]
      break;
 80025d0:	e002      	b.n	80025d8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80025d2:	69fb      	ldr	r3, [r7, #28]
 80025d4:	617b      	str	r3, [r7, #20]
      break;
 80025d6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80025d8:	4b13      	ldr	r3, [pc, #76]	; (8002628 <HAL_RCC_GetSysClockFreq+0x108>)
 80025da:	68db      	ldr	r3, [r3, #12]
 80025dc:	091b      	lsrs	r3, r3, #4
 80025de:	f003 0307 	and.w	r3, r3, #7
 80025e2:	3301      	adds	r3, #1
 80025e4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80025e6:	4b10      	ldr	r3, [pc, #64]	; (8002628 <HAL_RCC_GetSysClockFreq+0x108>)
 80025e8:	68db      	ldr	r3, [r3, #12]
 80025ea:	0a1b      	lsrs	r3, r3, #8
 80025ec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80025f0:	697a      	ldr	r2, [r7, #20]
 80025f2:	fb03 f202 	mul.w	r2, r3, r2
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80025fc:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80025fe:	4b0a      	ldr	r3, [pc, #40]	; (8002628 <HAL_RCC_GetSysClockFreq+0x108>)
 8002600:	68db      	ldr	r3, [r3, #12]
 8002602:	0e5b      	lsrs	r3, r3, #25
 8002604:	f003 0303 	and.w	r3, r3, #3
 8002608:	3301      	adds	r3, #1
 800260a:	005b      	lsls	r3, r3, #1
 800260c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800260e:	697a      	ldr	r2, [r7, #20]
 8002610:	683b      	ldr	r3, [r7, #0]
 8002612:	fbb2 f3f3 	udiv	r3, r2, r3
 8002616:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002618:	69bb      	ldr	r3, [r7, #24]
}
 800261a:	4618      	mov	r0, r3
 800261c:	3724      	adds	r7, #36	; 0x24
 800261e:	46bd      	mov	sp, r7
 8002620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002624:	4770      	bx	lr
 8002626:	bf00      	nop
 8002628:	40021000 	.word	0x40021000
 800262c:	08004258 	.word	0x08004258
 8002630:	00f42400 	.word	0x00f42400
 8002634:	007a1200 	.word	0x007a1200

08002638 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002638:	b580      	push	{r7, lr}
 800263a:	b086      	sub	sp, #24
 800263c:	af00      	add	r7, sp, #0
 800263e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002640:	2300      	movs	r3, #0
 8002642:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002644:	4b2a      	ldr	r3, [pc, #168]	; (80026f0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002646:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002648:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800264c:	2b00      	cmp	r3, #0
 800264e:	d003      	beq.n	8002658 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002650:	f7ff fa26 	bl	8001aa0 <HAL_PWREx_GetVoltageRange>
 8002654:	6178      	str	r0, [r7, #20]
 8002656:	e014      	b.n	8002682 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002658:	4b25      	ldr	r3, [pc, #148]	; (80026f0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800265a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800265c:	4a24      	ldr	r2, [pc, #144]	; (80026f0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800265e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002662:	6593      	str	r3, [r2, #88]	; 0x58
 8002664:	4b22      	ldr	r3, [pc, #136]	; (80026f0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002666:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002668:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800266c:	60fb      	str	r3, [r7, #12]
 800266e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002670:	f7ff fa16 	bl	8001aa0 <HAL_PWREx_GetVoltageRange>
 8002674:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002676:	4b1e      	ldr	r3, [pc, #120]	; (80026f0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002678:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800267a:	4a1d      	ldr	r2, [pc, #116]	; (80026f0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800267c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002680:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002682:	697b      	ldr	r3, [r7, #20]
 8002684:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002688:	d10b      	bne.n	80026a2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	2b80      	cmp	r3, #128	; 0x80
 800268e:	d919      	bls.n	80026c4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	2ba0      	cmp	r3, #160	; 0xa0
 8002694:	d902      	bls.n	800269c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002696:	2302      	movs	r3, #2
 8002698:	613b      	str	r3, [r7, #16]
 800269a:	e013      	b.n	80026c4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800269c:	2301      	movs	r3, #1
 800269e:	613b      	str	r3, [r7, #16]
 80026a0:	e010      	b.n	80026c4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	2b80      	cmp	r3, #128	; 0x80
 80026a6:	d902      	bls.n	80026ae <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80026a8:	2303      	movs	r3, #3
 80026aa:	613b      	str	r3, [r7, #16]
 80026ac:	e00a      	b.n	80026c4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	2b80      	cmp	r3, #128	; 0x80
 80026b2:	d102      	bne.n	80026ba <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80026b4:	2302      	movs	r3, #2
 80026b6:	613b      	str	r3, [r7, #16]
 80026b8:	e004      	b.n	80026c4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	2b70      	cmp	r3, #112	; 0x70
 80026be:	d101      	bne.n	80026c4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80026c0:	2301      	movs	r3, #1
 80026c2:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80026c4:	4b0b      	ldr	r3, [pc, #44]	; (80026f4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f023 0207 	bic.w	r2, r3, #7
 80026cc:	4909      	ldr	r1, [pc, #36]	; (80026f4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80026ce:	693b      	ldr	r3, [r7, #16]
 80026d0:	4313      	orrs	r3, r2
 80026d2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80026d4:	4b07      	ldr	r3, [pc, #28]	; (80026f4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f003 0307 	and.w	r3, r3, #7
 80026dc:	693a      	ldr	r2, [r7, #16]
 80026de:	429a      	cmp	r2, r3
 80026e0:	d001      	beq.n	80026e6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80026e2:	2301      	movs	r3, #1
 80026e4:	e000      	b.n	80026e8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80026e6:	2300      	movs	r3, #0
}
 80026e8:	4618      	mov	r0, r3
 80026ea:	3718      	adds	r7, #24
 80026ec:	46bd      	mov	sp, r7
 80026ee:	bd80      	pop	{r7, pc}
 80026f0:	40021000 	.word	0x40021000
 80026f4:	40022000 	.word	0x40022000

080026f8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80026f8:	b580      	push	{r7, lr}
 80026fa:	b086      	sub	sp, #24
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002700:	2300      	movs	r3, #0
 8002702:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002704:	2300      	movs	r3, #0
 8002706:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002710:	2b00      	cmp	r3, #0
 8002712:	d041      	beq.n	8002798 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002718:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800271c:	d02a      	beq.n	8002774 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800271e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002722:	d824      	bhi.n	800276e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002724:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002728:	d008      	beq.n	800273c <HAL_RCCEx_PeriphCLKConfig+0x44>
 800272a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800272e:	d81e      	bhi.n	800276e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002730:	2b00      	cmp	r3, #0
 8002732:	d00a      	beq.n	800274a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002734:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002738:	d010      	beq.n	800275c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800273a:	e018      	b.n	800276e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800273c:	4b86      	ldr	r3, [pc, #536]	; (8002958 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800273e:	68db      	ldr	r3, [r3, #12]
 8002740:	4a85      	ldr	r2, [pc, #532]	; (8002958 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002742:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002746:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002748:	e015      	b.n	8002776 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	3304      	adds	r3, #4
 800274e:	2100      	movs	r1, #0
 8002750:	4618      	mov	r0, r3
 8002752:	f000 fabb 	bl	8002ccc <RCCEx_PLLSAI1_Config>
 8002756:	4603      	mov	r3, r0
 8002758:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800275a:	e00c      	b.n	8002776 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	3320      	adds	r3, #32
 8002760:	2100      	movs	r1, #0
 8002762:	4618      	mov	r0, r3
 8002764:	f000 fba6 	bl	8002eb4 <RCCEx_PLLSAI2_Config>
 8002768:	4603      	mov	r3, r0
 800276a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800276c:	e003      	b.n	8002776 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800276e:	2301      	movs	r3, #1
 8002770:	74fb      	strb	r3, [r7, #19]
      break;
 8002772:	e000      	b.n	8002776 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002774:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002776:	7cfb      	ldrb	r3, [r7, #19]
 8002778:	2b00      	cmp	r3, #0
 800277a:	d10b      	bne.n	8002794 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800277c:	4b76      	ldr	r3, [pc, #472]	; (8002958 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800277e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002782:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800278a:	4973      	ldr	r1, [pc, #460]	; (8002958 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800278c:	4313      	orrs	r3, r2
 800278e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002792:	e001      	b.n	8002798 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002794:	7cfb      	ldrb	r3, [r7, #19]
 8002796:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d041      	beq.n	8002828 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80027a8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80027ac:	d02a      	beq.n	8002804 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80027ae:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80027b2:	d824      	bhi.n	80027fe <HAL_RCCEx_PeriphCLKConfig+0x106>
 80027b4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80027b8:	d008      	beq.n	80027cc <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80027ba:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80027be:	d81e      	bhi.n	80027fe <HAL_RCCEx_PeriphCLKConfig+0x106>
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d00a      	beq.n	80027da <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80027c4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80027c8:	d010      	beq.n	80027ec <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80027ca:	e018      	b.n	80027fe <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80027cc:	4b62      	ldr	r3, [pc, #392]	; (8002958 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80027ce:	68db      	ldr	r3, [r3, #12]
 80027d0:	4a61      	ldr	r2, [pc, #388]	; (8002958 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80027d2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027d6:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80027d8:	e015      	b.n	8002806 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	3304      	adds	r3, #4
 80027de:	2100      	movs	r1, #0
 80027e0:	4618      	mov	r0, r3
 80027e2:	f000 fa73 	bl	8002ccc <RCCEx_PLLSAI1_Config>
 80027e6:	4603      	mov	r3, r0
 80027e8:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80027ea:	e00c      	b.n	8002806 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	3320      	adds	r3, #32
 80027f0:	2100      	movs	r1, #0
 80027f2:	4618      	mov	r0, r3
 80027f4:	f000 fb5e 	bl	8002eb4 <RCCEx_PLLSAI2_Config>
 80027f8:	4603      	mov	r3, r0
 80027fa:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80027fc:	e003      	b.n	8002806 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80027fe:	2301      	movs	r3, #1
 8002800:	74fb      	strb	r3, [r7, #19]
      break;
 8002802:	e000      	b.n	8002806 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8002804:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002806:	7cfb      	ldrb	r3, [r7, #19]
 8002808:	2b00      	cmp	r3, #0
 800280a:	d10b      	bne.n	8002824 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800280c:	4b52      	ldr	r3, [pc, #328]	; (8002958 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800280e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002812:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800281a:	494f      	ldr	r1, [pc, #316]	; (8002958 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800281c:	4313      	orrs	r3, r2
 800281e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002822:	e001      	b.n	8002828 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002824:	7cfb      	ldrb	r3, [r7, #19]
 8002826:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002830:	2b00      	cmp	r3, #0
 8002832:	f000 80a0 	beq.w	8002976 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002836:	2300      	movs	r3, #0
 8002838:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800283a:	4b47      	ldr	r3, [pc, #284]	; (8002958 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800283c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800283e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002842:	2b00      	cmp	r3, #0
 8002844:	d101      	bne.n	800284a <HAL_RCCEx_PeriphCLKConfig+0x152>
 8002846:	2301      	movs	r3, #1
 8002848:	e000      	b.n	800284c <HAL_RCCEx_PeriphCLKConfig+0x154>
 800284a:	2300      	movs	r3, #0
 800284c:	2b00      	cmp	r3, #0
 800284e:	d00d      	beq.n	800286c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002850:	4b41      	ldr	r3, [pc, #260]	; (8002958 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002852:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002854:	4a40      	ldr	r2, [pc, #256]	; (8002958 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002856:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800285a:	6593      	str	r3, [r2, #88]	; 0x58
 800285c:	4b3e      	ldr	r3, [pc, #248]	; (8002958 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800285e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002860:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002864:	60bb      	str	r3, [r7, #8]
 8002866:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002868:	2301      	movs	r3, #1
 800286a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800286c:	4b3b      	ldr	r3, [pc, #236]	; (800295c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	4a3a      	ldr	r2, [pc, #232]	; (800295c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002872:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002876:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002878:	f7fe f98e 	bl	8000b98 <HAL_GetTick>
 800287c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800287e:	e009      	b.n	8002894 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002880:	f7fe f98a 	bl	8000b98 <HAL_GetTick>
 8002884:	4602      	mov	r2, r0
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	1ad3      	subs	r3, r2, r3
 800288a:	2b02      	cmp	r3, #2
 800288c:	d902      	bls.n	8002894 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800288e:	2303      	movs	r3, #3
 8002890:	74fb      	strb	r3, [r7, #19]
        break;
 8002892:	e005      	b.n	80028a0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002894:	4b31      	ldr	r3, [pc, #196]	; (800295c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800289c:	2b00      	cmp	r3, #0
 800289e:	d0ef      	beq.n	8002880 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80028a0:	7cfb      	ldrb	r3, [r7, #19]
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d15c      	bne.n	8002960 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80028a6:	4b2c      	ldr	r3, [pc, #176]	; (8002958 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80028a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028ac:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80028b0:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80028b2:	697b      	ldr	r3, [r7, #20]
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d01f      	beq.n	80028f8 <HAL_RCCEx_PeriphCLKConfig+0x200>
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80028be:	697a      	ldr	r2, [r7, #20]
 80028c0:	429a      	cmp	r2, r3
 80028c2:	d019      	beq.n	80028f8 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80028c4:	4b24      	ldr	r3, [pc, #144]	; (8002958 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80028c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028ca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80028ce:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80028d0:	4b21      	ldr	r3, [pc, #132]	; (8002958 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80028d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028d6:	4a20      	ldr	r2, [pc, #128]	; (8002958 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80028d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028dc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80028e0:	4b1d      	ldr	r3, [pc, #116]	; (8002958 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80028e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028e6:	4a1c      	ldr	r2, [pc, #112]	; (8002958 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80028e8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80028ec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80028f0:	4a19      	ldr	r2, [pc, #100]	; (8002958 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80028f2:	697b      	ldr	r3, [r7, #20]
 80028f4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80028f8:	697b      	ldr	r3, [r7, #20]
 80028fa:	f003 0301 	and.w	r3, r3, #1
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d016      	beq.n	8002930 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002902:	f7fe f949 	bl	8000b98 <HAL_GetTick>
 8002906:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002908:	e00b      	b.n	8002922 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800290a:	f7fe f945 	bl	8000b98 <HAL_GetTick>
 800290e:	4602      	mov	r2, r0
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	1ad3      	subs	r3, r2, r3
 8002914:	f241 3288 	movw	r2, #5000	; 0x1388
 8002918:	4293      	cmp	r3, r2
 800291a:	d902      	bls.n	8002922 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 800291c:	2303      	movs	r3, #3
 800291e:	74fb      	strb	r3, [r7, #19]
            break;
 8002920:	e006      	b.n	8002930 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002922:	4b0d      	ldr	r3, [pc, #52]	; (8002958 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002924:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002928:	f003 0302 	and.w	r3, r3, #2
 800292c:	2b00      	cmp	r3, #0
 800292e:	d0ec      	beq.n	800290a <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002930:	7cfb      	ldrb	r3, [r7, #19]
 8002932:	2b00      	cmp	r3, #0
 8002934:	d10c      	bne.n	8002950 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002936:	4b08      	ldr	r3, [pc, #32]	; (8002958 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002938:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800293c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002946:	4904      	ldr	r1, [pc, #16]	; (8002958 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002948:	4313      	orrs	r3, r2
 800294a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800294e:	e009      	b.n	8002964 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002950:	7cfb      	ldrb	r3, [r7, #19]
 8002952:	74bb      	strb	r3, [r7, #18]
 8002954:	e006      	b.n	8002964 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8002956:	bf00      	nop
 8002958:	40021000 	.word	0x40021000
 800295c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002960:	7cfb      	ldrb	r3, [r7, #19]
 8002962:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002964:	7c7b      	ldrb	r3, [r7, #17]
 8002966:	2b01      	cmp	r3, #1
 8002968:	d105      	bne.n	8002976 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800296a:	4b9e      	ldr	r3, [pc, #632]	; (8002be4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800296c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800296e:	4a9d      	ldr	r2, [pc, #628]	; (8002be4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002970:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002974:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f003 0301 	and.w	r3, r3, #1
 800297e:	2b00      	cmp	r3, #0
 8002980:	d00a      	beq.n	8002998 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002982:	4b98      	ldr	r3, [pc, #608]	; (8002be4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002984:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002988:	f023 0203 	bic.w	r2, r3, #3
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002990:	4994      	ldr	r1, [pc, #592]	; (8002be4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002992:	4313      	orrs	r3, r2
 8002994:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f003 0302 	and.w	r3, r3, #2
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d00a      	beq.n	80029ba <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80029a4:	4b8f      	ldr	r3, [pc, #572]	; (8002be4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029aa:	f023 020c 	bic.w	r2, r3, #12
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029b2:	498c      	ldr	r1, [pc, #560]	; (8002be4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029b4:	4313      	orrs	r3, r2
 80029b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f003 0304 	and.w	r3, r3, #4
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d00a      	beq.n	80029dc <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80029c6:	4b87      	ldr	r3, [pc, #540]	; (8002be4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029cc:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029d4:	4983      	ldr	r1, [pc, #524]	; (8002be4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029d6:	4313      	orrs	r3, r2
 80029d8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f003 0308 	and.w	r3, r3, #8
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d00a      	beq.n	80029fe <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80029e8:	4b7e      	ldr	r3, [pc, #504]	; (8002be4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029ee:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029f6:	497b      	ldr	r1, [pc, #492]	; (8002be4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029f8:	4313      	orrs	r3, r2
 80029fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f003 0310 	and.w	r3, r3, #16
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d00a      	beq.n	8002a20 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002a0a:	4b76      	ldr	r3, [pc, #472]	; (8002be4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a10:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a18:	4972      	ldr	r1, [pc, #456]	; (8002be4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a1a:	4313      	orrs	r3, r2
 8002a1c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f003 0320 	and.w	r3, r3, #32
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d00a      	beq.n	8002a42 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002a2c:	4b6d      	ldr	r3, [pc, #436]	; (8002be4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a32:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a3a:	496a      	ldr	r1, [pc, #424]	; (8002be4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a3c:	4313      	orrs	r3, r2
 8002a3e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d00a      	beq.n	8002a64 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002a4e:	4b65      	ldr	r3, [pc, #404]	; (8002be4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a54:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a5c:	4961      	ldr	r1, [pc, #388]	; (8002be4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a5e:	4313      	orrs	r3, r2
 8002a60:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d00a      	beq.n	8002a86 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002a70:	4b5c      	ldr	r3, [pc, #368]	; (8002be4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a76:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a7e:	4959      	ldr	r1, [pc, #356]	; (8002be4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a80:	4313      	orrs	r3, r2
 8002a82:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d00a      	beq.n	8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002a92:	4b54      	ldr	r3, [pc, #336]	; (8002be4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a98:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002aa0:	4950      	ldr	r1, [pc, #320]	; (8002be4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002aa2:	4313      	orrs	r3, r2
 8002aa4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d00a      	beq.n	8002aca <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002ab4:	4b4b      	ldr	r3, [pc, #300]	; (8002be4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ab6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002aba:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ac2:	4948      	ldr	r1, [pc, #288]	; (8002be4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ac4:	4313      	orrs	r3, r2
 8002ac6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d00a      	beq.n	8002aec <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002ad6:	4b43      	ldr	r3, [pc, #268]	; (8002be4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ad8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002adc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ae4:	493f      	ldr	r1, [pc, #252]	; (8002be4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ae6:	4313      	orrs	r3, r2
 8002ae8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d028      	beq.n	8002b4a <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002af8:	4b3a      	ldr	r3, [pc, #232]	; (8002be4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002afa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002afe:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002b06:	4937      	ldr	r1, [pc, #220]	; (8002be4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b08:	4313      	orrs	r3, r2
 8002b0a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002b12:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002b16:	d106      	bne.n	8002b26 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002b18:	4b32      	ldr	r3, [pc, #200]	; (8002be4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b1a:	68db      	ldr	r3, [r3, #12]
 8002b1c:	4a31      	ldr	r2, [pc, #196]	; (8002be4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b1e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002b22:	60d3      	str	r3, [r2, #12]
 8002b24:	e011      	b.n	8002b4a <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002b2a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002b2e:	d10c      	bne.n	8002b4a <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	3304      	adds	r3, #4
 8002b34:	2101      	movs	r1, #1
 8002b36:	4618      	mov	r0, r3
 8002b38:	f000 f8c8 	bl	8002ccc <RCCEx_PLLSAI1_Config>
 8002b3c:	4603      	mov	r3, r0
 8002b3e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002b40:	7cfb      	ldrb	r3, [r7, #19]
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d001      	beq.n	8002b4a <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8002b46:	7cfb      	ldrb	r3, [r7, #19]
 8002b48:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d028      	beq.n	8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002b56:	4b23      	ldr	r3, [pc, #140]	; (8002be4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b58:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b5c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b64:	491f      	ldr	r1, [pc, #124]	; (8002be4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b66:	4313      	orrs	r3, r2
 8002b68:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b70:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002b74:	d106      	bne.n	8002b84 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002b76:	4b1b      	ldr	r3, [pc, #108]	; (8002be4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b78:	68db      	ldr	r3, [r3, #12]
 8002b7a:	4a1a      	ldr	r2, [pc, #104]	; (8002be4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b7c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002b80:	60d3      	str	r3, [r2, #12]
 8002b82:	e011      	b.n	8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b88:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002b8c:	d10c      	bne.n	8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	3304      	adds	r3, #4
 8002b92:	2101      	movs	r1, #1
 8002b94:	4618      	mov	r0, r3
 8002b96:	f000 f899 	bl	8002ccc <RCCEx_PLLSAI1_Config>
 8002b9a:	4603      	mov	r3, r0
 8002b9c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002b9e:	7cfb      	ldrb	r3, [r7, #19]
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d001      	beq.n	8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8002ba4:	7cfb      	ldrb	r3, [r7, #19]
 8002ba6:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d02b      	beq.n	8002c0c <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002bb4:	4b0b      	ldr	r3, [pc, #44]	; (8002be4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002bb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bba:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002bc2:	4908      	ldr	r1, [pc, #32]	; (8002be4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002bc4:	4313      	orrs	r3, r2
 8002bc6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002bce:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002bd2:	d109      	bne.n	8002be8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002bd4:	4b03      	ldr	r3, [pc, #12]	; (8002be4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002bd6:	68db      	ldr	r3, [r3, #12]
 8002bd8:	4a02      	ldr	r2, [pc, #8]	; (8002be4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002bda:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002bde:	60d3      	str	r3, [r2, #12]
 8002be0:	e014      	b.n	8002c0c <HAL_RCCEx_PeriphCLKConfig+0x514>
 8002be2:	bf00      	nop
 8002be4:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002bec:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002bf0:	d10c      	bne.n	8002c0c <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	3304      	adds	r3, #4
 8002bf6:	2101      	movs	r1, #1
 8002bf8:	4618      	mov	r0, r3
 8002bfa:	f000 f867 	bl	8002ccc <RCCEx_PLLSAI1_Config>
 8002bfe:	4603      	mov	r3, r0
 8002c00:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002c02:	7cfb      	ldrb	r3, [r7, #19]
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d001      	beq.n	8002c0c <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8002c08:	7cfb      	ldrb	r3, [r7, #19]
 8002c0a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d02f      	beq.n	8002c78 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002c18:	4b2b      	ldr	r3, [pc, #172]	; (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002c1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c1e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002c26:	4928      	ldr	r1, [pc, #160]	; (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002c28:	4313      	orrs	r3, r2
 8002c2a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002c32:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002c36:	d10d      	bne.n	8002c54 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	3304      	adds	r3, #4
 8002c3c:	2102      	movs	r1, #2
 8002c3e:	4618      	mov	r0, r3
 8002c40:	f000 f844 	bl	8002ccc <RCCEx_PLLSAI1_Config>
 8002c44:	4603      	mov	r3, r0
 8002c46:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002c48:	7cfb      	ldrb	r3, [r7, #19]
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d014      	beq.n	8002c78 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002c4e:	7cfb      	ldrb	r3, [r7, #19]
 8002c50:	74bb      	strb	r3, [r7, #18]
 8002c52:	e011      	b.n	8002c78 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002c58:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002c5c:	d10c      	bne.n	8002c78 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	3320      	adds	r3, #32
 8002c62:	2102      	movs	r1, #2
 8002c64:	4618      	mov	r0, r3
 8002c66:	f000 f925 	bl	8002eb4 <RCCEx_PLLSAI2_Config>
 8002c6a:	4603      	mov	r3, r0
 8002c6c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002c6e:	7cfb      	ldrb	r3, [r7, #19]
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d001      	beq.n	8002c78 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002c74:	7cfb      	ldrb	r3, [r7, #19]
 8002c76:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d00a      	beq.n	8002c9a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002c84:	4b10      	ldr	r3, [pc, #64]	; (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002c86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c8a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002c92:	490d      	ldr	r1, [pc, #52]	; (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002c94:	4313      	orrs	r3, r2
 8002c96:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d00b      	beq.n	8002cbe <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002ca6:	4b08      	ldr	r3, [pc, #32]	; (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002ca8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cac:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002cb6:	4904      	ldr	r1, [pc, #16]	; (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002cb8:	4313      	orrs	r3, r2
 8002cba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002cbe:	7cbb      	ldrb	r3, [r7, #18]
}
 8002cc0:	4618      	mov	r0, r3
 8002cc2:	3718      	adds	r7, #24
 8002cc4:	46bd      	mov	sp, r7
 8002cc6:	bd80      	pop	{r7, pc}
 8002cc8:	40021000 	.word	0x40021000

08002ccc <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	b084      	sub	sp, #16
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	6078      	str	r0, [r7, #4]
 8002cd4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002cd6:	2300      	movs	r3, #0
 8002cd8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002cda:	4b75      	ldr	r3, [pc, #468]	; (8002eb0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002cdc:	68db      	ldr	r3, [r3, #12]
 8002cde:	f003 0303 	and.w	r3, r3, #3
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d018      	beq.n	8002d18 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002ce6:	4b72      	ldr	r3, [pc, #456]	; (8002eb0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ce8:	68db      	ldr	r3, [r3, #12]
 8002cea:	f003 0203 	and.w	r2, r3, #3
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	429a      	cmp	r2, r3
 8002cf4:	d10d      	bne.n	8002d12 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
       ||
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d009      	beq.n	8002d12 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002cfe:	4b6c      	ldr	r3, [pc, #432]	; (8002eb0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d00:	68db      	ldr	r3, [r3, #12]
 8002d02:	091b      	lsrs	r3, r3, #4
 8002d04:	f003 0307 	and.w	r3, r3, #7
 8002d08:	1c5a      	adds	r2, r3, #1
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	685b      	ldr	r3, [r3, #4]
       ||
 8002d0e:	429a      	cmp	r2, r3
 8002d10:	d047      	beq.n	8002da2 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002d12:	2301      	movs	r3, #1
 8002d14:	73fb      	strb	r3, [r7, #15]
 8002d16:	e044      	b.n	8002da2 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	2b03      	cmp	r3, #3
 8002d1e:	d018      	beq.n	8002d52 <RCCEx_PLLSAI1_Config+0x86>
 8002d20:	2b03      	cmp	r3, #3
 8002d22:	d825      	bhi.n	8002d70 <RCCEx_PLLSAI1_Config+0xa4>
 8002d24:	2b01      	cmp	r3, #1
 8002d26:	d002      	beq.n	8002d2e <RCCEx_PLLSAI1_Config+0x62>
 8002d28:	2b02      	cmp	r3, #2
 8002d2a:	d009      	beq.n	8002d40 <RCCEx_PLLSAI1_Config+0x74>
 8002d2c:	e020      	b.n	8002d70 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002d2e:	4b60      	ldr	r3, [pc, #384]	; (8002eb0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f003 0302 	and.w	r3, r3, #2
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d11d      	bne.n	8002d76 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002d3a:	2301      	movs	r3, #1
 8002d3c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002d3e:	e01a      	b.n	8002d76 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002d40:	4b5b      	ldr	r3, [pc, #364]	; (8002eb0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d116      	bne.n	8002d7a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002d4c:	2301      	movs	r3, #1
 8002d4e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002d50:	e013      	b.n	8002d7a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002d52:	4b57      	ldr	r3, [pc, #348]	; (8002eb0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d10f      	bne.n	8002d7e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002d5e:	4b54      	ldr	r3, [pc, #336]	; (8002eb0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d109      	bne.n	8002d7e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002d6a:	2301      	movs	r3, #1
 8002d6c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002d6e:	e006      	b.n	8002d7e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002d70:	2301      	movs	r3, #1
 8002d72:	73fb      	strb	r3, [r7, #15]
      break;
 8002d74:	e004      	b.n	8002d80 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002d76:	bf00      	nop
 8002d78:	e002      	b.n	8002d80 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002d7a:	bf00      	nop
 8002d7c:	e000      	b.n	8002d80 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002d7e:	bf00      	nop
    }

    if(status == HAL_OK)
 8002d80:	7bfb      	ldrb	r3, [r7, #15]
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d10d      	bne.n	8002da2 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002d86:	4b4a      	ldr	r3, [pc, #296]	; (8002eb0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d88:	68db      	ldr	r3, [r3, #12]
 8002d8a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	6819      	ldr	r1, [r3, #0]
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	685b      	ldr	r3, [r3, #4]
 8002d96:	3b01      	subs	r3, #1
 8002d98:	011b      	lsls	r3, r3, #4
 8002d9a:	430b      	orrs	r3, r1
 8002d9c:	4944      	ldr	r1, [pc, #272]	; (8002eb0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d9e:	4313      	orrs	r3, r2
 8002da0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002da2:	7bfb      	ldrb	r3, [r7, #15]
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d17d      	bne.n	8002ea4 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002da8:	4b41      	ldr	r3, [pc, #260]	; (8002eb0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	4a40      	ldr	r2, [pc, #256]	; (8002eb0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002dae:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002db2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002db4:	f7fd fef0 	bl	8000b98 <HAL_GetTick>
 8002db8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002dba:	e009      	b.n	8002dd0 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002dbc:	f7fd feec 	bl	8000b98 <HAL_GetTick>
 8002dc0:	4602      	mov	r2, r0
 8002dc2:	68bb      	ldr	r3, [r7, #8]
 8002dc4:	1ad3      	subs	r3, r2, r3
 8002dc6:	2b02      	cmp	r3, #2
 8002dc8:	d902      	bls.n	8002dd0 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002dca:	2303      	movs	r3, #3
 8002dcc:	73fb      	strb	r3, [r7, #15]
        break;
 8002dce:	e005      	b.n	8002ddc <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002dd0:	4b37      	ldr	r3, [pc, #220]	; (8002eb0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d1ef      	bne.n	8002dbc <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002ddc:	7bfb      	ldrb	r3, [r7, #15]
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d160      	bne.n	8002ea4 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002de2:	683b      	ldr	r3, [r7, #0]
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d111      	bne.n	8002e0c <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002de8:	4b31      	ldr	r3, [pc, #196]	; (8002eb0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002dea:	691b      	ldr	r3, [r3, #16]
 8002dec:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002df0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002df4:	687a      	ldr	r2, [r7, #4]
 8002df6:	6892      	ldr	r2, [r2, #8]
 8002df8:	0211      	lsls	r1, r2, #8
 8002dfa:	687a      	ldr	r2, [r7, #4]
 8002dfc:	68d2      	ldr	r2, [r2, #12]
 8002dfe:	0912      	lsrs	r2, r2, #4
 8002e00:	0452      	lsls	r2, r2, #17
 8002e02:	430a      	orrs	r2, r1
 8002e04:	492a      	ldr	r1, [pc, #168]	; (8002eb0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e06:	4313      	orrs	r3, r2
 8002e08:	610b      	str	r3, [r1, #16]
 8002e0a:	e027      	b.n	8002e5c <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002e0c:	683b      	ldr	r3, [r7, #0]
 8002e0e:	2b01      	cmp	r3, #1
 8002e10:	d112      	bne.n	8002e38 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002e12:	4b27      	ldr	r3, [pc, #156]	; (8002eb0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e14:	691b      	ldr	r3, [r3, #16]
 8002e16:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002e1a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002e1e:	687a      	ldr	r2, [r7, #4]
 8002e20:	6892      	ldr	r2, [r2, #8]
 8002e22:	0211      	lsls	r1, r2, #8
 8002e24:	687a      	ldr	r2, [r7, #4]
 8002e26:	6912      	ldr	r2, [r2, #16]
 8002e28:	0852      	lsrs	r2, r2, #1
 8002e2a:	3a01      	subs	r2, #1
 8002e2c:	0552      	lsls	r2, r2, #21
 8002e2e:	430a      	orrs	r2, r1
 8002e30:	491f      	ldr	r1, [pc, #124]	; (8002eb0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e32:	4313      	orrs	r3, r2
 8002e34:	610b      	str	r3, [r1, #16]
 8002e36:	e011      	b.n	8002e5c <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002e38:	4b1d      	ldr	r3, [pc, #116]	; (8002eb0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e3a:	691b      	ldr	r3, [r3, #16]
 8002e3c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002e40:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002e44:	687a      	ldr	r2, [r7, #4]
 8002e46:	6892      	ldr	r2, [r2, #8]
 8002e48:	0211      	lsls	r1, r2, #8
 8002e4a:	687a      	ldr	r2, [r7, #4]
 8002e4c:	6952      	ldr	r2, [r2, #20]
 8002e4e:	0852      	lsrs	r2, r2, #1
 8002e50:	3a01      	subs	r2, #1
 8002e52:	0652      	lsls	r2, r2, #25
 8002e54:	430a      	orrs	r2, r1
 8002e56:	4916      	ldr	r1, [pc, #88]	; (8002eb0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e58:	4313      	orrs	r3, r2
 8002e5a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002e5c:	4b14      	ldr	r3, [pc, #80]	; (8002eb0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	4a13      	ldr	r2, [pc, #76]	; (8002eb0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e62:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002e66:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e68:	f7fd fe96 	bl	8000b98 <HAL_GetTick>
 8002e6c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002e6e:	e009      	b.n	8002e84 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002e70:	f7fd fe92 	bl	8000b98 <HAL_GetTick>
 8002e74:	4602      	mov	r2, r0
 8002e76:	68bb      	ldr	r3, [r7, #8]
 8002e78:	1ad3      	subs	r3, r2, r3
 8002e7a:	2b02      	cmp	r3, #2
 8002e7c:	d902      	bls.n	8002e84 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8002e7e:	2303      	movs	r3, #3
 8002e80:	73fb      	strb	r3, [r7, #15]
          break;
 8002e82:	e005      	b.n	8002e90 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002e84:	4b0a      	ldr	r3, [pc, #40]	; (8002eb0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d0ef      	beq.n	8002e70 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8002e90:	7bfb      	ldrb	r3, [r7, #15]
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d106      	bne.n	8002ea4 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002e96:	4b06      	ldr	r3, [pc, #24]	; (8002eb0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e98:	691a      	ldr	r2, [r3, #16]
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	699b      	ldr	r3, [r3, #24]
 8002e9e:	4904      	ldr	r1, [pc, #16]	; (8002eb0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ea0:	4313      	orrs	r3, r2
 8002ea2:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002ea4:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ea6:	4618      	mov	r0, r3
 8002ea8:	3710      	adds	r7, #16
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	bd80      	pop	{r7, pc}
 8002eae:	bf00      	nop
 8002eb0:	40021000 	.word	0x40021000

08002eb4 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	b084      	sub	sp, #16
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	6078      	str	r0, [r7, #4]
 8002ebc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002ebe:	2300      	movs	r3, #0
 8002ec0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002ec2:	4b6a      	ldr	r3, [pc, #424]	; (800306c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ec4:	68db      	ldr	r3, [r3, #12]
 8002ec6:	f003 0303 	and.w	r3, r3, #3
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d018      	beq.n	8002f00 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002ece:	4b67      	ldr	r3, [pc, #412]	; (800306c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ed0:	68db      	ldr	r3, [r3, #12]
 8002ed2:	f003 0203 	and.w	r2, r3, #3
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	429a      	cmp	r2, r3
 8002edc:	d10d      	bne.n	8002efa <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
       ||
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d009      	beq.n	8002efa <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002ee6:	4b61      	ldr	r3, [pc, #388]	; (800306c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ee8:	68db      	ldr	r3, [r3, #12]
 8002eea:	091b      	lsrs	r3, r3, #4
 8002eec:	f003 0307 	and.w	r3, r3, #7
 8002ef0:	1c5a      	adds	r2, r3, #1
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	685b      	ldr	r3, [r3, #4]
       ||
 8002ef6:	429a      	cmp	r2, r3
 8002ef8:	d047      	beq.n	8002f8a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002efa:	2301      	movs	r3, #1
 8002efc:	73fb      	strb	r3, [r7, #15]
 8002efe:	e044      	b.n	8002f8a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	2b03      	cmp	r3, #3
 8002f06:	d018      	beq.n	8002f3a <RCCEx_PLLSAI2_Config+0x86>
 8002f08:	2b03      	cmp	r3, #3
 8002f0a:	d825      	bhi.n	8002f58 <RCCEx_PLLSAI2_Config+0xa4>
 8002f0c:	2b01      	cmp	r3, #1
 8002f0e:	d002      	beq.n	8002f16 <RCCEx_PLLSAI2_Config+0x62>
 8002f10:	2b02      	cmp	r3, #2
 8002f12:	d009      	beq.n	8002f28 <RCCEx_PLLSAI2_Config+0x74>
 8002f14:	e020      	b.n	8002f58 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002f16:	4b55      	ldr	r3, [pc, #340]	; (800306c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f003 0302 	and.w	r3, r3, #2
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d11d      	bne.n	8002f5e <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8002f22:	2301      	movs	r3, #1
 8002f24:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002f26:	e01a      	b.n	8002f5e <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002f28:	4b50      	ldr	r3, [pc, #320]	; (800306c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d116      	bne.n	8002f62 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8002f34:	2301      	movs	r3, #1
 8002f36:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002f38:	e013      	b.n	8002f62 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002f3a:	4b4c      	ldr	r3, [pc, #304]	; (800306c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d10f      	bne.n	8002f66 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002f46:	4b49      	ldr	r3, [pc, #292]	; (800306c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d109      	bne.n	8002f66 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8002f52:	2301      	movs	r3, #1
 8002f54:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002f56:	e006      	b.n	8002f66 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002f58:	2301      	movs	r3, #1
 8002f5a:	73fb      	strb	r3, [r7, #15]
      break;
 8002f5c:	e004      	b.n	8002f68 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002f5e:	bf00      	nop
 8002f60:	e002      	b.n	8002f68 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002f62:	bf00      	nop
 8002f64:	e000      	b.n	8002f68 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002f66:	bf00      	nop
    }

    if(status == HAL_OK)
 8002f68:	7bfb      	ldrb	r3, [r7, #15]
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d10d      	bne.n	8002f8a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002f6e:	4b3f      	ldr	r3, [pc, #252]	; (800306c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f70:	68db      	ldr	r3, [r3, #12]
 8002f72:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	6819      	ldr	r1, [r3, #0]
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	685b      	ldr	r3, [r3, #4]
 8002f7e:	3b01      	subs	r3, #1
 8002f80:	011b      	lsls	r3, r3, #4
 8002f82:	430b      	orrs	r3, r1
 8002f84:	4939      	ldr	r1, [pc, #228]	; (800306c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f86:	4313      	orrs	r3, r2
 8002f88:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002f8a:	7bfb      	ldrb	r3, [r7, #15]
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d167      	bne.n	8003060 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002f90:	4b36      	ldr	r3, [pc, #216]	; (800306c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	4a35      	ldr	r2, [pc, #212]	; (800306c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f96:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f9a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002f9c:	f7fd fdfc 	bl	8000b98 <HAL_GetTick>
 8002fa0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002fa2:	e009      	b.n	8002fb8 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002fa4:	f7fd fdf8 	bl	8000b98 <HAL_GetTick>
 8002fa8:	4602      	mov	r2, r0
 8002faa:	68bb      	ldr	r3, [r7, #8]
 8002fac:	1ad3      	subs	r3, r2, r3
 8002fae:	2b02      	cmp	r3, #2
 8002fb0:	d902      	bls.n	8002fb8 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002fb2:	2303      	movs	r3, #3
 8002fb4:	73fb      	strb	r3, [r7, #15]
        break;
 8002fb6:	e005      	b.n	8002fc4 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002fb8:	4b2c      	ldr	r3, [pc, #176]	; (800306c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d1ef      	bne.n	8002fa4 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002fc4:	7bfb      	ldrb	r3, [r7, #15]
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d14a      	bne.n	8003060 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002fca:	683b      	ldr	r3, [r7, #0]
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d111      	bne.n	8002ff4 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002fd0:	4b26      	ldr	r3, [pc, #152]	; (800306c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002fd2:	695b      	ldr	r3, [r3, #20]
 8002fd4:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002fd8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002fdc:	687a      	ldr	r2, [r7, #4]
 8002fde:	6892      	ldr	r2, [r2, #8]
 8002fe0:	0211      	lsls	r1, r2, #8
 8002fe2:	687a      	ldr	r2, [r7, #4]
 8002fe4:	68d2      	ldr	r2, [r2, #12]
 8002fe6:	0912      	lsrs	r2, r2, #4
 8002fe8:	0452      	lsls	r2, r2, #17
 8002fea:	430a      	orrs	r2, r1
 8002fec:	491f      	ldr	r1, [pc, #124]	; (800306c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002fee:	4313      	orrs	r3, r2
 8002ff0:	614b      	str	r3, [r1, #20]
 8002ff2:	e011      	b.n	8003018 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002ff4:	4b1d      	ldr	r3, [pc, #116]	; (800306c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ff6:	695b      	ldr	r3, [r3, #20]
 8002ff8:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002ffc:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003000:	687a      	ldr	r2, [r7, #4]
 8003002:	6892      	ldr	r2, [r2, #8]
 8003004:	0211      	lsls	r1, r2, #8
 8003006:	687a      	ldr	r2, [r7, #4]
 8003008:	6912      	ldr	r2, [r2, #16]
 800300a:	0852      	lsrs	r2, r2, #1
 800300c:	3a01      	subs	r2, #1
 800300e:	0652      	lsls	r2, r2, #25
 8003010:	430a      	orrs	r2, r1
 8003012:	4916      	ldr	r1, [pc, #88]	; (800306c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003014:	4313      	orrs	r3, r2
 8003016:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003018:	4b14      	ldr	r3, [pc, #80]	; (800306c <RCCEx_PLLSAI2_Config+0x1b8>)
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	4a13      	ldr	r2, [pc, #76]	; (800306c <RCCEx_PLLSAI2_Config+0x1b8>)
 800301e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003022:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003024:	f7fd fdb8 	bl	8000b98 <HAL_GetTick>
 8003028:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800302a:	e009      	b.n	8003040 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800302c:	f7fd fdb4 	bl	8000b98 <HAL_GetTick>
 8003030:	4602      	mov	r2, r0
 8003032:	68bb      	ldr	r3, [r7, #8]
 8003034:	1ad3      	subs	r3, r2, r3
 8003036:	2b02      	cmp	r3, #2
 8003038:	d902      	bls.n	8003040 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800303a:	2303      	movs	r3, #3
 800303c:	73fb      	strb	r3, [r7, #15]
          break;
 800303e:	e005      	b.n	800304c <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003040:	4b0a      	ldr	r3, [pc, #40]	; (800306c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003048:	2b00      	cmp	r3, #0
 800304a:	d0ef      	beq.n	800302c <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 800304c:	7bfb      	ldrb	r3, [r7, #15]
 800304e:	2b00      	cmp	r3, #0
 8003050:	d106      	bne.n	8003060 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003052:	4b06      	ldr	r3, [pc, #24]	; (800306c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003054:	695a      	ldr	r2, [r3, #20]
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	695b      	ldr	r3, [r3, #20]
 800305a:	4904      	ldr	r1, [pc, #16]	; (800306c <RCCEx_PLLSAI2_Config+0x1b8>)
 800305c:	4313      	orrs	r3, r2
 800305e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003060:	7bfb      	ldrb	r3, [r7, #15]
}
 8003062:	4618      	mov	r0, r3
 8003064:	3710      	adds	r7, #16
 8003066:	46bd      	mov	sp, r7
 8003068:	bd80      	pop	{r7, pc}
 800306a:	bf00      	nop
 800306c:	40021000 	.word	0x40021000

08003070 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8003070:	b480      	push	{r7}
 8003072:	b08b      	sub	sp, #44	; 0x2c
 8003074:	af00      	add	r7, sp, #0
 8003076:	60f8      	str	r0, [r7, #12]
 8003078:	60b9      	str	r1, [r7, #8]
 800307a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	681a      	ldr	r2, [r3, #0]
 8003080:	68bb      	ldr	r3, [r7, #8]
 8003082:	617b      	str	r3, [r7, #20]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003084:	697b      	ldr	r3, [r7, #20]
 8003086:	fa93 f3a3 	rbit	r3, r3
 800308a:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800308c:	693b      	ldr	r3, [r7, #16]
 800308e:	61bb      	str	r3, [r7, #24]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003090:	69bb      	ldr	r3, [r7, #24]
 8003092:	2b00      	cmp	r3, #0
 8003094:	d101      	bne.n	800309a <LL_GPIO_SetPinMode+0x2a>
  {
    return 32U;
 8003096:	2320      	movs	r3, #32
 8003098:	e003      	b.n	80030a2 <LL_GPIO_SetPinMode+0x32>
  }
  return __builtin_clz(value);
 800309a:	69bb      	ldr	r3, [r7, #24]
 800309c:	fab3 f383 	clz	r3, r3
 80030a0:	b2db      	uxtb	r3, r3
 80030a2:	005b      	lsls	r3, r3, #1
 80030a4:	2103      	movs	r1, #3
 80030a6:	fa01 f303 	lsl.w	r3, r1, r3
 80030aa:	43db      	mvns	r3, r3
 80030ac:	401a      	ands	r2, r3
 80030ae:	68bb      	ldr	r3, [r7, #8]
 80030b0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030b2:	6a3b      	ldr	r3, [r7, #32]
 80030b4:	fa93 f3a3 	rbit	r3, r3
 80030b8:	61fb      	str	r3, [r7, #28]
  return result;
 80030ba:	69fb      	ldr	r3, [r7, #28]
 80030bc:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80030be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d101      	bne.n	80030c8 <LL_GPIO_SetPinMode+0x58>
    return 32U;
 80030c4:	2320      	movs	r3, #32
 80030c6:	e003      	b.n	80030d0 <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 80030c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030ca:	fab3 f383 	clz	r3, r3
 80030ce:	b2db      	uxtb	r3, r3
 80030d0:	005b      	lsls	r3, r3, #1
 80030d2:	6879      	ldr	r1, [r7, #4]
 80030d4:	fa01 f303 	lsl.w	r3, r1, r3
 80030d8:	431a      	orrs	r2, r3
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	601a      	str	r2, [r3, #0]
}
 80030de:	bf00      	nop
 80030e0:	372c      	adds	r7, #44	; 0x2c
 80030e2:	46bd      	mov	sp, r7
 80030e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e8:	4770      	bx	lr

080030ea <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 80030ea:	b480      	push	{r7}
 80030ec:	b085      	sub	sp, #20
 80030ee:	af00      	add	r7, sp, #0
 80030f0:	60f8      	str	r0, [r7, #12]
 80030f2:	60b9      	str	r1, [r7, #8]
 80030f4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	685a      	ldr	r2, [r3, #4]
 80030fa:	68bb      	ldr	r3, [r7, #8]
 80030fc:	43db      	mvns	r3, r3
 80030fe:	401a      	ands	r2, r3
 8003100:	68bb      	ldr	r3, [r7, #8]
 8003102:	6879      	ldr	r1, [r7, #4]
 8003104:	fb01 f303 	mul.w	r3, r1, r3
 8003108:	431a      	orrs	r2, r3
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	605a      	str	r2, [r3, #4]
}
 800310e:	bf00      	nop
 8003110:	3714      	adds	r7, #20
 8003112:	46bd      	mov	sp, r7
 8003114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003118:	4770      	bx	lr

0800311a <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  *         @arg @ref LL_GPIO_SPEED_FREQ_VERY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 800311a:	b480      	push	{r7}
 800311c:	b08b      	sub	sp, #44	; 0x2c
 800311e:	af00      	add	r7, sp, #0
 8003120:	60f8      	str	r0, [r7, #12]
 8003122:	60b9      	str	r1, [r7, #8]
 8003124:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	689a      	ldr	r2, [r3, #8]
 800312a:	68bb      	ldr	r3, [r7, #8]
 800312c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800312e:	697b      	ldr	r3, [r7, #20]
 8003130:	fa93 f3a3 	rbit	r3, r3
 8003134:	613b      	str	r3, [r7, #16]
  return result;
 8003136:	693b      	ldr	r3, [r7, #16]
 8003138:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800313a:	69bb      	ldr	r3, [r7, #24]
 800313c:	2b00      	cmp	r3, #0
 800313e:	d101      	bne.n	8003144 <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 8003140:	2320      	movs	r3, #32
 8003142:	e003      	b.n	800314c <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 8003144:	69bb      	ldr	r3, [r7, #24]
 8003146:	fab3 f383 	clz	r3, r3
 800314a:	b2db      	uxtb	r3, r3
 800314c:	005b      	lsls	r3, r3, #1
 800314e:	2103      	movs	r1, #3
 8003150:	fa01 f303 	lsl.w	r3, r1, r3
 8003154:	43db      	mvns	r3, r3
 8003156:	401a      	ands	r2, r3
 8003158:	68bb      	ldr	r3, [r7, #8]
 800315a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800315c:	6a3b      	ldr	r3, [r7, #32]
 800315e:	fa93 f3a3 	rbit	r3, r3
 8003162:	61fb      	str	r3, [r7, #28]
  return result;
 8003164:	69fb      	ldr	r3, [r7, #28]
 8003166:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8003168:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800316a:	2b00      	cmp	r3, #0
 800316c:	d101      	bne.n	8003172 <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 800316e:	2320      	movs	r3, #32
 8003170:	e003      	b.n	800317a <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 8003172:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003174:	fab3 f383 	clz	r3, r3
 8003178:	b2db      	uxtb	r3, r3
 800317a:	005b      	lsls	r3, r3, #1
 800317c:	6879      	ldr	r1, [r7, #4]
 800317e:	fa01 f303 	lsl.w	r3, r1, r3
 8003182:	431a      	orrs	r2, r3
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * 2U)));
}
 8003188:	bf00      	nop
 800318a:	372c      	adds	r7, #44	; 0x2c
 800318c:	46bd      	mov	sp, r7
 800318e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003192:	4770      	bx	lr

08003194 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 8003194:	b480      	push	{r7}
 8003196:	b08b      	sub	sp, #44	; 0x2c
 8003198:	af00      	add	r7, sp, #0
 800319a:	60f8      	str	r0, [r7, #12]
 800319c:	60b9      	str	r1, [r7, #8]
 800319e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	68da      	ldr	r2, [r3, #12]
 80031a4:	68bb      	ldr	r3, [r7, #8]
 80031a6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031a8:	697b      	ldr	r3, [r7, #20]
 80031aa:	fa93 f3a3 	rbit	r3, r3
 80031ae:	613b      	str	r3, [r7, #16]
  return result;
 80031b0:	693b      	ldr	r3, [r7, #16]
 80031b2:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80031b4:	69bb      	ldr	r3, [r7, #24]
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d101      	bne.n	80031be <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 80031ba:	2320      	movs	r3, #32
 80031bc:	e003      	b.n	80031c6 <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 80031be:	69bb      	ldr	r3, [r7, #24]
 80031c0:	fab3 f383 	clz	r3, r3
 80031c4:	b2db      	uxtb	r3, r3
 80031c6:	005b      	lsls	r3, r3, #1
 80031c8:	2103      	movs	r1, #3
 80031ca:	fa01 f303 	lsl.w	r3, r1, r3
 80031ce:	43db      	mvns	r3, r3
 80031d0:	401a      	ands	r2, r3
 80031d2:	68bb      	ldr	r3, [r7, #8]
 80031d4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031d6:	6a3b      	ldr	r3, [r7, #32]
 80031d8:	fa93 f3a3 	rbit	r3, r3
 80031dc:	61fb      	str	r3, [r7, #28]
  return result;
 80031de:	69fb      	ldr	r3, [r7, #28]
 80031e0:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80031e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d101      	bne.n	80031ec <LL_GPIO_SetPinPull+0x58>
    return 32U;
 80031e8:	2320      	movs	r3, #32
 80031ea:	e003      	b.n	80031f4 <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 80031ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031ee:	fab3 f383 	clz	r3, r3
 80031f2:	b2db      	uxtb	r3, r3
 80031f4:	005b      	lsls	r3, r3, #1
 80031f6:	6879      	ldr	r1, [r7, #4]
 80031f8:	fa01 f303 	lsl.w	r3, r1, r3
 80031fc:	431a      	orrs	r2, r3
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	60da      	str	r2, [r3, #12]
}
 8003202:	bf00      	nop
 8003204:	372c      	adds	r7, #44	; 0x2c
 8003206:	46bd      	mov	sp, r7
 8003208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800320c:	4770      	bx	lr

0800320e <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 800320e:	b480      	push	{r7}
 8003210:	b08b      	sub	sp, #44	; 0x2c
 8003212:	af00      	add	r7, sp, #0
 8003214:	60f8      	str	r0, [r7, #12]
 8003216:	60b9      	str	r1, [r7, #8]
 8003218:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	6a1a      	ldr	r2, [r3, #32]
 800321e:	68bb      	ldr	r3, [r7, #8]
 8003220:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003222:	697b      	ldr	r3, [r7, #20]
 8003224:	fa93 f3a3 	rbit	r3, r3
 8003228:	613b      	str	r3, [r7, #16]
  return result;
 800322a:	693b      	ldr	r3, [r7, #16]
 800322c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800322e:	69bb      	ldr	r3, [r7, #24]
 8003230:	2b00      	cmp	r3, #0
 8003232:	d101      	bne.n	8003238 <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 8003234:	2320      	movs	r3, #32
 8003236:	e003      	b.n	8003240 <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 8003238:	69bb      	ldr	r3, [r7, #24]
 800323a:	fab3 f383 	clz	r3, r3
 800323e:	b2db      	uxtb	r3, r3
 8003240:	009b      	lsls	r3, r3, #2
 8003242:	210f      	movs	r1, #15
 8003244:	fa01 f303 	lsl.w	r3, r1, r3
 8003248:	43db      	mvns	r3, r3
 800324a:	401a      	ands	r2, r3
 800324c:	68bb      	ldr	r3, [r7, #8]
 800324e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003250:	6a3b      	ldr	r3, [r7, #32]
 8003252:	fa93 f3a3 	rbit	r3, r3
 8003256:	61fb      	str	r3, [r7, #28]
  return result;
 8003258:	69fb      	ldr	r3, [r7, #28]
 800325a:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800325c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800325e:	2b00      	cmp	r3, #0
 8003260:	d101      	bne.n	8003266 <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 8003262:	2320      	movs	r3, #32
 8003264:	e003      	b.n	800326e <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 8003266:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003268:	fab3 f383 	clz	r3, r3
 800326c:	b2db      	uxtb	r3, r3
 800326e:	009b      	lsls	r3, r3, #2
 8003270:	6879      	ldr	r1, [r7, #4]
 8003272:	fa01 f303 	lsl.w	r3, r1, r3
 8003276:	431a      	orrs	r2, r3
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * 4U)));
}
 800327c:	bf00      	nop
 800327e:	372c      	adds	r7, #44	; 0x2c
 8003280:	46bd      	mov	sp, r7
 8003282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003286:	4770      	bx	lr

08003288 <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8003288:	b480      	push	{r7}
 800328a:	b08b      	sub	sp, #44	; 0x2c
 800328c:	af00      	add	r7, sp, #0
 800328e:	60f8      	str	r0, [r7, #12]
 8003290:	60b9      	str	r1, [r7, #8]
 8003292:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003298:	68bb      	ldr	r3, [r7, #8]
 800329a:	0a1b      	lsrs	r3, r3, #8
 800329c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800329e:	697b      	ldr	r3, [r7, #20]
 80032a0:	fa93 f3a3 	rbit	r3, r3
 80032a4:	613b      	str	r3, [r7, #16]
  return result;
 80032a6:	693b      	ldr	r3, [r7, #16]
 80032a8:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80032aa:	69bb      	ldr	r3, [r7, #24]
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d101      	bne.n	80032b4 <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 80032b0:	2320      	movs	r3, #32
 80032b2:	e003      	b.n	80032bc <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 80032b4:	69bb      	ldr	r3, [r7, #24]
 80032b6:	fab3 f383 	clz	r3, r3
 80032ba:	b2db      	uxtb	r3, r3
 80032bc:	009b      	lsls	r3, r3, #2
 80032be:	210f      	movs	r1, #15
 80032c0:	fa01 f303 	lsl.w	r3, r1, r3
 80032c4:	43db      	mvns	r3, r3
 80032c6:	401a      	ands	r2, r3
 80032c8:	68bb      	ldr	r3, [r7, #8]
 80032ca:	0a1b      	lsrs	r3, r3, #8
 80032cc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032ce:	6a3b      	ldr	r3, [r7, #32]
 80032d0:	fa93 f3a3 	rbit	r3, r3
 80032d4:	61fb      	str	r3, [r7, #28]
  return result;
 80032d6:	69fb      	ldr	r3, [r7, #28]
 80032d8:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80032da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d101      	bne.n	80032e4 <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 80032e0:	2320      	movs	r3, #32
 80032e2:	e003      	b.n	80032ec <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 80032e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032e6:	fab3 f383 	clz	r3, r3
 80032ea:	b2db      	uxtb	r3, r3
 80032ec:	009b      	lsls	r3, r3, #2
 80032ee:	6879      	ldr	r1, [r7, #4]
 80032f0:	fa01 f303 	lsl.w	r3, r1, r3
 80032f4:	431a      	orrs	r2, r3
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	625a      	str	r2, [r3, #36]	; 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
}
 80032fa:	bf00      	nop
 80032fc:	372c      	adds	r7, #44	; 0x2c
 80032fe:	46bd      	mov	sp, r7
 8003300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003304:	4770      	bx	lr

08003306 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8003306:	b580      	push	{r7, lr}
 8003308:	b088      	sub	sp, #32
 800330a:	af00      	add	r7, sp, #0
 800330c:	6078      	str	r0, [r7, #4]
 800330e:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8003310:	683b      	ldr	r3, [r7, #0]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003316:	693b      	ldr	r3, [r7, #16]
 8003318:	fa93 f3a3 	rbit	r3, r3
 800331c:	60fb      	str	r3, [r7, #12]
  return result;
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8003322:	697b      	ldr	r3, [r7, #20]
 8003324:	2b00      	cmp	r3, #0
 8003326:	d101      	bne.n	800332c <LL_GPIO_Init+0x26>
    return 32U;
 8003328:	2320      	movs	r3, #32
 800332a:	e003      	b.n	8003334 <LL_GPIO_Init+0x2e>
  return __builtin_clz(value);
 800332c:	697b      	ldr	r3, [r7, #20]
 800332e:	fab3 f383 	clz	r3, r3
 8003332:	b2db      	uxtb	r3, r3
 8003334:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8003336:	e048      	b.n	80033ca <LL_GPIO_Init+0xc4>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 8003338:	683b      	ldr	r3, [r7, #0]
 800333a:	681a      	ldr	r2, [r3, #0]
 800333c:	2101      	movs	r1, #1
 800333e:	69fb      	ldr	r3, [r7, #28]
 8003340:	fa01 f303 	lsl.w	r3, r1, r3
 8003344:	4013      	ands	r3, r2
 8003346:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0x00u)
 8003348:	69bb      	ldr	r3, [r7, #24]
 800334a:	2b00      	cmp	r3, #0
 800334c:	d03a      	beq.n	80033c4 <LL_GPIO_Init+0xbe>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 800334e:	683b      	ldr	r3, [r7, #0]
 8003350:	685b      	ldr	r3, [r3, #4]
 8003352:	2b01      	cmp	r3, #1
 8003354:	d003      	beq.n	800335e <LL_GPIO_Init+0x58>
 8003356:	683b      	ldr	r3, [r7, #0]
 8003358:	685b      	ldr	r3, [r3, #4]
 800335a:	2b02      	cmp	r3, #2
 800335c:	d10e      	bne.n	800337c <LL_GPIO_Init+0x76>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 800335e:	683b      	ldr	r3, [r7, #0]
 8003360:	689b      	ldr	r3, [r3, #8]
 8003362:	461a      	mov	r2, r3
 8003364:	69b9      	ldr	r1, [r7, #24]
 8003366:	6878      	ldr	r0, [r7, #4]
 8003368:	f7ff fed7 	bl	800311a <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 800336c:	683b      	ldr	r3, [r7, #0]
 800336e:	6819      	ldr	r1, [r3, #0]
 8003370:	683b      	ldr	r3, [r7, #0]
 8003372:	68db      	ldr	r3, [r3, #12]
 8003374:	461a      	mov	r2, r3
 8003376:	6878      	ldr	r0, [r7, #4]
 8003378:	f7ff feb7 	bl	80030ea <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 800337c:	683b      	ldr	r3, [r7, #0]
 800337e:	691b      	ldr	r3, [r3, #16]
 8003380:	461a      	mov	r2, r3
 8003382:	69b9      	ldr	r1, [r7, #24]
 8003384:	6878      	ldr	r0, [r7, #4]
 8003386:	f7ff ff05 	bl	8003194 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 800338a:	683b      	ldr	r3, [r7, #0]
 800338c:	685b      	ldr	r3, [r3, #4]
 800338e:	2b02      	cmp	r3, #2
 8003390:	d111      	bne.n	80033b6 <LL_GPIO_Init+0xb0>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 8003392:	69bb      	ldr	r3, [r7, #24]
 8003394:	2bff      	cmp	r3, #255	; 0xff
 8003396:	d807      	bhi.n	80033a8 <LL_GPIO_Init+0xa2>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8003398:	683b      	ldr	r3, [r7, #0]
 800339a:	695b      	ldr	r3, [r3, #20]
 800339c:	461a      	mov	r2, r3
 800339e:	69b9      	ldr	r1, [r7, #24]
 80033a0:	6878      	ldr	r0, [r7, #4]
 80033a2:	f7ff ff34 	bl	800320e <LL_GPIO_SetAFPin_0_7>
 80033a6:	e006      	b.n	80033b6 <LL_GPIO_Init+0xb0>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80033a8:	683b      	ldr	r3, [r7, #0]
 80033aa:	695b      	ldr	r3, [r3, #20]
 80033ac:	461a      	mov	r2, r3
 80033ae:	69b9      	ldr	r1, [r7, #24]
 80033b0:	6878      	ldr	r0, [r7, #4]
 80033b2:	f7ff ff69 	bl	8003288 <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 80033b6:	683b      	ldr	r3, [r7, #0]
 80033b8:	685b      	ldr	r3, [r3, #4]
 80033ba:	461a      	mov	r2, r3
 80033bc:	69b9      	ldr	r1, [r7, #24]
 80033be:	6878      	ldr	r0, [r7, #4]
 80033c0:	f7ff fe56 	bl	8003070 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 80033c4:	69fb      	ldr	r3, [r7, #28]
 80033c6:	3301      	adds	r3, #1
 80033c8:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 80033ca:	683b      	ldr	r3, [r7, #0]
 80033cc:	681a      	ldr	r2, [r3, #0]
 80033ce:	69fb      	ldr	r3, [r7, #28]
 80033d0:	fa22 f303 	lsr.w	r3, r2, r3
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d1af      	bne.n	8003338 <LL_GPIO_Init+0x32>
  }

  return (SUCCESS);
 80033d8:	2300      	movs	r3, #0
}
 80033da:	4618      	mov	r0, r3
 80033dc:	3720      	adds	r7, #32
 80033de:	46bd      	mov	sp, r7
 80033e0:	bd80      	pop	{r7, pc}
	...

080033e4 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 80033e4:	b480      	push	{r7}
 80033e6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RCC_CR_HSIRDY) ? 1UL : 0UL);
 80033e8:	4b07      	ldr	r3, [pc, #28]	; (8003408 <LL_RCC_HSI_IsReady+0x24>)
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80033f0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80033f4:	d101      	bne.n	80033fa <LL_RCC_HSI_IsReady+0x16>
 80033f6:	2301      	movs	r3, #1
 80033f8:	e000      	b.n	80033fc <LL_RCC_HSI_IsReady+0x18>
 80033fa:	2300      	movs	r3, #0
}
 80033fc:	4618      	mov	r0, r3
 80033fe:	46bd      	mov	sp, r7
 8003400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003404:	4770      	bx	lr
 8003406:	bf00      	nop
 8003408:	40021000 	.word	0x40021000

0800340c <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 800340c:	b480      	push	{r7}
 800340e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == RCC_BDCR_LSERDY) ? 1UL : 0UL);
 8003410:	4b07      	ldr	r3, [pc, #28]	; (8003430 <LL_RCC_LSE_IsReady+0x24>)
 8003412:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003416:	f003 0302 	and.w	r3, r3, #2
 800341a:	2b02      	cmp	r3, #2
 800341c:	d101      	bne.n	8003422 <LL_RCC_LSE_IsReady+0x16>
 800341e:	2301      	movs	r3, #1
 8003420:	e000      	b.n	8003424 <LL_RCC_LSE_IsReady+0x18>
 8003422:	2300      	movs	r3, #0
}
 8003424:	4618      	mov	r0, r3
 8003426:	46bd      	mov	sp, r7
 8003428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800342c:	4770      	bx	lr
 800342e:	bf00      	nop
 8003430:	40021000 	.word	0x40021000

08003434 <LL_RCC_MSI_IsEnabledRangeSelect>:
  * @brief  Check if MSI clock range is selected with MSIRANGE register
  * @rmtoll CR           MSIRGSEL      LL_RCC_MSI_IsEnabledRangeSelect
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsEnabledRangeSelect(void)
{
 8003434:	b480      	push	{r7}
 8003436:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == RCC_CR_MSIRGSEL) ? 1UL : 0UL);
 8003438:	4b06      	ldr	r3, [pc, #24]	; (8003454 <LL_RCC_MSI_IsEnabledRangeSelect+0x20>)
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f003 0308 	and.w	r3, r3, #8
 8003440:	2b08      	cmp	r3, #8
 8003442:	d101      	bne.n	8003448 <LL_RCC_MSI_IsEnabledRangeSelect+0x14>
 8003444:	2301      	movs	r3, #1
 8003446:	e000      	b.n	800344a <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 8003448:	2300      	movs	r3, #0
}
 800344a:	4618      	mov	r0, r3
 800344c:	46bd      	mov	sp, r7
 800344e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003452:	4770      	bx	lr
 8003454:	40021000 	.word	0x40021000

08003458 <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 8003458:	b480      	push	{r7}
 800345a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 800345c:	4b04      	ldr	r3, [pc, #16]	; (8003470 <LL_RCC_MSI_GetRange+0x18>)
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8003464:	4618      	mov	r0, r3
 8003466:	46bd      	mov	sp, r7
 8003468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800346c:	4770      	bx	lr
 800346e:	bf00      	nop
 8003470:	40021000 	.word	0x40021000

08003474 <LL_RCC_MSI_GetRangeAfterStandby>:
  *         @arg @ref LL_RCC_MSISRANGE_5
  *         @arg @ref LL_RCC_MSISRANGE_6
  *         @arg @ref LL_RCC_MSISRANGE_7
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRangeAfterStandby(void)
{
 8003474:	b480      	push	{r7}
 8003476:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 8003478:	4b04      	ldr	r3, [pc, #16]	; (800348c <LL_RCC_MSI_GetRangeAfterStandby+0x18>)
 800347a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800347e:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
}
 8003482:	4618      	mov	r0, r3
 8003484:	46bd      	mov	sp, r7
 8003486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800348a:	4770      	bx	lr
 800348c:	40021000 	.word	0x40021000

08003490 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8003490:	b480      	push	{r7}
 8003492:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8003494:	4b04      	ldr	r3, [pc, #16]	; (80034a8 <LL_RCC_GetSysClkSource+0x18>)
 8003496:	689b      	ldr	r3, [r3, #8]
 8003498:	f003 030c 	and.w	r3, r3, #12
}
 800349c:	4618      	mov	r0, r3
 800349e:	46bd      	mov	sp, r7
 80034a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a4:	4770      	bx	lr
 80034a6:	bf00      	nop
 80034a8:	40021000 	.word	0x40021000

080034ac <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 80034ac:	b480      	push	{r7}
 80034ae:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80034b0:	4b04      	ldr	r3, [pc, #16]	; (80034c4 <LL_RCC_GetAHBPrescaler+0x18>)
 80034b2:	689b      	ldr	r3, [r3, #8]
 80034b4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80034b8:	4618      	mov	r0, r3
 80034ba:	46bd      	mov	sp, r7
 80034bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c0:	4770      	bx	lr
 80034c2:	bf00      	nop
 80034c4:	40021000 	.word	0x40021000

080034c8 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80034c8:	b480      	push	{r7}
 80034ca:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 80034cc:	4b04      	ldr	r3, [pc, #16]	; (80034e0 <LL_RCC_GetAPB1Prescaler+0x18>)
 80034ce:	689b      	ldr	r3, [r3, #8]
 80034d0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 80034d4:	4618      	mov	r0, r3
 80034d6:	46bd      	mov	sp, r7
 80034d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034dc:	4770      	bx	lr
 80034de:	bf00      	nop
 80034e0:	40021000 	.word	0x40021000

080034e4 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 80034e4:	b480      	push	{r7}
 80034e6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 80034e8:	4b04      	ldr	r3, [pc, #16]	; (80034fc <LL_RCC_GetAPB2Prescaler+0x18>)
 80034ea:	689b      	ldr	r3, [r3, #8]
 80034ec:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 80034f0:	4618      	mov	r0, r3
 80034f2:	46bd      	mov	sp, r7
 80034f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f8:	4770      	bx	lr
 80034fa:	bf00      	nop
 80034fc:	40021000 	.word	0x40021000

08003500 <LL_RCC_GetUSARTClockSource>:
  *         @arg @ref LL_RCC_USART3_CLKSOURCE_LSE (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetUSARTClockSource(uint32_t USARTx)
{
 8003500:	b480      	push	{r7}
 8003502:	b083      	sub	sp, #12
 8003504:	af00      	add	r7, sp, #0
 8003506:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16U));
 8003508:	4b06      	ldr	r3, [pc, #24]	; (8003524 <LL_RCC_GetUSARTClockSource+0x24>)
 800350a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	401a      	ands	r2, r3
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	041b      	lsls	r3, r3, #16
 8003516:	4313      	orrs	r3, r2
}
 8003518:	4618      	mov	r0, r3
 800351a:	370c      	adds	r7, #12
 800351c:	46bd      	mov	sp, r7
 800351e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003522:	4770      	bx	lr
 8003524:	40021000 	.word	0x40021000

08003528 <LL_RCC_GetUARTClockSource>:
  *         @arg @ref LL_RCC_UART5_CLKSOURCE_SYSCLK
  *         @arg @ref LL_RCC_UART5_CLKSOURCE_HSI
  *         @arg @ref LL_RCC_UART5_CLKSOURCE_LSE
  */
__STATIC_INLINE uint32_t LL_RCC_GetUARTClockSource(uint32_t UARTx)
{
 8003528:	b480      	push	{r7}
 800352a:	b083      	sub	sp, #12
 800352c:	af00      	add	r7, sp, #0
 800352e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, UARTx) | (UARTx << 16U));
 8003530:	4b06      	ldr	r3, [pc, #24]	; (800354c <LL_RCC_GetUARTClockSource+0x24>)
 8003532:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	401a      	ands	r2, r3
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	041b      	lsls	r3, r3, #16
 800353e:	4313      	orrs	r3, r2
}
 8003540:	4618      	mov	r0, r3
 8003542:	370c      	adds	r7, #12
 8003544:	46bd      	mov	sp, r7
 8003546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800354a:	4770      	bx	lr
 800354c:	40021000 	.word	0x40021000

08003550 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8003550:	b480      	push	{r7}
 8003552:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8003554:	4b04      	ldr	r3, [pc, #16]	; (8003568 <LL_RCC_PLL_GetMainSource+0x18>)
 8003556:	68db      	ldr	r3, [r3, #12]
 8003558:	f003 0303 	and.w	r3, r3, #3
}
 800355c:	4618      	mov	r0, r3
 800355e:	46bd      	mov	sp, r7
 8003560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003564:	4770      	bx	lr
 8003566:	bf00      	nop
 8003568:	40021000 	.word	0x40021000

0800356c <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 8 and 86 or 127 depending on devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 800356c:	b480      	push	{r7}
 800356e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8003570:	4b04      	ldr	r3, [pc, #16]	; (8003584 <LL_RCC_PLL_GetN+0x18>)
 8003572:	68db      	ldr	r3, [r3, #12]
 8003574:	0a1b      	lsrs	r3, r3, #8
 8003576:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 800357a:	4618      	mov	r0, r3
 800357c:	46bd      	mov	sp, r7
 800357e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003582:	4770      	bx	lr
 8003584:	40021000 	.word	0x40021000

08003588 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_4
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8003588:	b480      	push	{r7}
 800358a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 800358c:	4b04      	ldr	r3, [pc, #16]	; (80035a0 <LL_RCC_PLL_GetR+0x18>)
 800358e:	68db      	ldr	r3, [r3, #12]
 8003590:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
}
 8003594:	4618      	mov	r0, r3
 8003596:	46bd      	mov	sp, r7
 8003598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800359c:	4770      	bx	lr
 800359e:	bf00      	nop
 80035a0:	40021000 	.word	0x40021000

080035a4 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_16 (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 80035a4:	b480      	push	{r7}
 80035a6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 80035a8:	4b04      	ldr	r3, [pc, #16]	; (80035bc <LL_RCC_PLL_GetDivider+0x18>)
 80035aa:	68db      	ldr	r3, [r3, #12]
 80035ac:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 80035b0:	4618      	mov	r0, r3
 80035b2:	46bd      	mov	sp, r7
 80035b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b8:	4770      	bx	lr
 80035ba:	bf00      	nop
 80035bc:	40021000 	.word	0x40021000

080035c0 <LL_RCC_GetUSARTClockFreq>:
  *         (*) value not defined in all devices.
  * @retval USART clock frequency (in Hz)
  *         - @ref  LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  */
uint32_t LL_RCC_GetUSARTClockFreq(uint32_t USARTxSource)
{
 80035c0:	b580      	push	{r7, lr}
 80035c2:	b084      	sub	sp, #16
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	6078      	str	r0, [r7, #4]
  uint32_t usart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 80035c8:	2300      	movs	r3, #0
 80035ca:	60fb      	str	r3, [r7, #12]

  /* Check parameter */
  assert_param(IS_LL_RCC_USART_CLKSOURCE(USARTxSource));

  if (USARTxSource == LL_RCC_USART1_CLKSOURCE)
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	2b03      	cmp	r3, #3
 80035d0:	d137      	bne.n	8003642 <LL_RCC_GetUSARTClockFreq+0x82>
  {
    /* USART1CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 80035d2:	6878      	ldr	r0, [r7, #4]
 80035d4:	f7ff ff94 	bl	8003500 <LL_RCC_GetUSARTClockSource>
 80035d8:	4603      	mov	r3, r0
 80035da:	f5a3 3340 	sub.w	r3, r3, #196608	; 0x30000
 80035de:	2b03      	cmp	r3, #3
 80035e0:	f200 80b3 	bhi.w	800374a <LL_RCC_GetUSARTClockFreq+0x18a>
 80035e4:	a201      	add	r2, pc, #4	; (adr r2, 80035ec <LL_RCC_GetUSARTClockFreq+0x2c>)
 80035e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035ea:	bf00      	nop
 80035ec:	0800362b 	.word	0x0800362b
 80035f0:	080035fd 	.word	0x080035fd
 80035f4:	08003605 	.word	0x08003605
 80035f8:	08003617 	.word	0x08003617
    {
      case LL_RCC_USART1_CLKSOURCE_SYSCLK: /* USART1 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 80035fc:	f000 f956 	bl	80038ac <RCC_GetSystemClockFreq>
 8003600:	60f8      	str	r0, [r7, #12]
        break;
 8003602:	e0b3      	b.n	800376c <LL_RCC_GetUSARTClockFreq+0x1ac>

      case LL_RCC_USART1_CLKSOURCE_HSI:    /* USART1 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() != 0U)
 8003604:	f7ff feee 	bl	80033e4 <LL_RCC_HSI_IsReady>
 8003608:	4603      	mov	r3, r0
 800360a:	2b00      	cmp	r3, #0
 800360c:	f000 809f 	beq.w	800374e <LL_RCC_GetUSARTClockFreq+0x18e>
        {
          usart_frequency = HSI_VALUE;
 8003610:	4b59      	ldr	r3, [pc, #356]	; (8003778 <LL_RCC_GetUSARTClockFreq+0x1b8>)
 8003612:	60fb      	str	r3, [r7, #12]
        }
        break;
 8003614:	e09b      	b.n	800374e <LL_RCC_GetUSARTClockFreq+0x18e>

      case LL_RCC_USART1_CLKSOURCE_LSE:    /* USART1 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() != 0U)
 8003616:	f7ff fef9 	bl	800340c <LL_RCC_LSE_IsReady>
 800361a:	4603      	mov	r3, r0
 800361c:	2b00      	cmp	r3, #0
 800361e:	f000 8098 	beq.w	8003752 <LL_RCC_GetUSARTClockFreq+0x192>
        {
          usart_frequency = LSE_VALUE;
 8003622:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003626:	60fb      	str	r3, [r7, #12]
        }
        break;
 8003628:	e093      	b.n	8003752 <LL_RCC_GetUSARTClockFreq+0x192>

      case LL_RCC_USART1_CLKSOURCE_PCLK2:  /* USART1 Clock is PCLK2 */
        usart_frequency = RCC_GetPCLK2ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 800362a:	f000 f93f 	bl	80038ac <RCC_GetSystemClockFreq>
 800362e:	4603      	mov	r3, r0
 8003630:	4618      	mov	r0, r3
 8003632:	f000 f9cb 	bl	80039cc <RCC_GetHCLKClockFreq>
 8003636:	4603      	mov	r3, r0
 8003638:	4618      	mov	r0, r3
 800363a:	f000 f9f1 	bl	8003a20 <RCC_GetPCLK2ClockFreq>
 800363e:	60f8      	str	r0, [r7, #12]
        break;
 8003640:	e094      	b.n	800376c <LL_RCC_GetUSARTClockFreq+0x1ac>

      default:
        break;
    }
  }
  else if (USARTxSource == LL_RCC_USART2_CLKSOURCE)
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	2b0c      	cmp	r3, #12
 8003646:	d146      	bne.n	80036d6 <LL_RCC_GetUSARTClockFreq+0x116>
  {
    /* USART2CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 8003648:	6878      	ldr	r0, [r7, #4]
 800364a:	f7ff ff59 	bl	8003500 <LL_RCC_GetUSARTClockSource>
 800364e:	4603      	mov	r3, r0
 8003650:	f5a3 2340 	sub.w	r3, r3, #786432	; 0xc0000
 8003654:	2b0c      	cmp	r3, #12
 8003656:	d87e      	bhi.n	8003756 <LL_RCC_GetUSARTClockFreq+0x196>
 8003658:	a201      	add	r2, pc, #4	; (adr r2, 8003660 <LL_RCC_GetUSARTClockFreq+0xa0>)
 800365a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800365e:	bf00      	nop
 8003660:	080036bf 	.word	0x080036bf
 8003664:	08003757 	.word	0x08003757
 8003668:	08003757 	.word	0x08003757
 800366c:	08003757 	.word	0x08003757
 8003670:	08003695 	.word	0x08003695
 8003674:	08003757 	.word	0x08003757
 8003678:	08003757 	.word	0x08003757
 800367c:	08003757 	.word	0x08003757
 8003680:	0800369d 	.word	0x0800369d
 8003684:	08003757 	.word	0x08003757
 8003688:	08003757 	.word	0x08003757
 800368c:	08003757 	.word	0x08003757
 8003690:	080036ad 	.word	0x080036ad
    {
      case LL_RCC_USART2_CLKSOURCE_SYSCLK: /* USART2 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 8003694:	f000 f90a 	bl	80038ac <RCC_GetSystemClockFreq>
 8003698:	60f8      	str	r0, [r7, #12]
        break;
 800369a:	e067      	b.n	800376c <LL_RCC_GetUSARTClockFreq+0x1ac>

      case LL_RCC_USART2_CLKSOURCE_HSI:    /* USART2 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() != 0U)
 800369c:	f7ff fea2 	bl	80033e4 <LL_RCC_HSI_IsReady>
 80036a0:	4603      	mov	r3, r0
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d059      	beq.n	800375a <LL_RCC_GetUSARTClockFreq+0x19a>
        {
          usart_frequency = HSI_VALUE;
 80036a6:	4b34      	ldr	r3, [pc, #208]	; (8003778 <LL_RCC_GetUSARTClockFreq+0x1b8>)
 80036a8:	60fb      	str	r3, [r7, #12]
        }
        break;
 80036aa:	e056      	b.n	800375a <LL_RCC_GetUSARTClockFreq+0x19a>

      case LL_RCC_USART2_CLKSOURCE_LSE:    /* USART2 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() != 0U)
 80036ac:	f7ff feae 	bl	800340c <LL_RCC_LSE_IsReady>
 80036b0:	4603      	mov	r3, r0
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d053      	beq.n	800375e <LL_RCC_GetUSARTClockFreq+0x19e>
        {
          usart_frequency = LSE_VALUE;
 80036b6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80036ba:	60fb      	str	r3, [r7, #12]
        }
        break;
 80036bc:	e04f      	b.n	800375e <LL_RCC_GetUSARTClockFreq+0x19e>

      case LL_RCC_USART2_CLKSOURCE_PCLK1:  /* USART2 Clock is PCLK1 */
        usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 80036be:	f000 f8f5 	bl	80038ac <RCC_GetSystemClockFreq>
 80036c2:	4603      	mov	r3, r0
 80036c4:	4618      	mov	r0, r3
 80036c6:	f000 f981 	bl	80039cc <RCC_GetHCLKClockFreq>
 80036ca:	4603      	mov	r3, r0
 80036cc:	4618      	mov	r0, r3
 80036ce:	f000 f993 	bl	80039f8 <RCC_GetPCLK1ClockFreq>
 80036d2:	60f8      	str	r0, [r7, #12]
        break;
 80036d4:	e04a      	b.n	800376c <LL_RCC_GetUSARTClockFreq+0x1ac>
    }
  }
  else
  {
#if defined(RCC_CCIPR_USART3SEL)
    if (USARTxSource == LL_RCC_USART3_CLKSOURCE)
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	2b30      	cmp	r3, #48	; 0x30
 80036da:	d147      	bne.n	800376c <LL_RCC_GetUSARTClockFreq+0x1ac>
    {
      /* USART3CLK clock frequency */
      switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 80036dc:	6878      	ldr	r0, [r7, #4]
 80036de:	f7ff ff0f 	bl	8003500 <LL_RCC_GetUSARTClockSource>
 80036e2:	4603      	mov	r3, r0
 80036e4:	f1b3 1f30 	cmp.w	r3, #3145776	; 0x300030
 80036e8:	d01a      	beq.n	8003720 <LL_RCC_GetUSARTClockFreq+0x160>
 80036ea:	f1b3 1f30 	cmp.w	r3, #3145776	; 0x300030
 80036ee:	d838      	bhi.n	8003762 <LL_RCC_GetUSARTClockFreq+0x1a2>
 80036f0:	4a22      	ldr	r2, [pc, #136]	; (800377c <LL_RCC_GetUSARTClockFreq+0x1bc>)
 80036f2:	4293      	cmp	r3, r2
 80036f4:	d00c      	beq.n	8003710 <LL_RCC_GetUSARTClockFreq+0x150>
 80036f6:	4a21      	ldr	r2, [pc, #132]	; (800377c <LL_RCC_GetUSARTClockFreq+0x1bc>)
 80036f8:	4293      	cmp	r3, r2
 80036fa:	d832      	bhi.n	8003762 <LL_RCC_GetUSARTClockFreq+0x1a2>
 80036fc:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003700:	d017      	beq.n	8003732 <LL_RCC_GetUSARTClockFreq+0x172>
 8003702:	4a1f      	ldr	r2, [pc, #124]	; (8003780 <LL_RCC_GetUSARTClockFreq+0x1c0>)
 8003704:	4293      	cmp	r3, r2
 8003706:	d12c      	bne.n	8003762 <LL_RCC_GetUSARTClockFreq+0x1a2>
      {
        case LL_RCC_USART3_CLKSOURCE_SYSCLK: /* USART3 Clock is System Clock */
          usart_frequency = RCC_GetSystemClockFreq();
 8003708:	f000 f8d0 	bl	80038ac <RCC_GetSystemClockFreq>
 800370c:	60f8      	str	r0, [r7, #12]
          break;
 800370e:	e02d      	b.n	800376c <LL_RCC_GetUSARTClockFreq+0x1ac>

        case LL_RCC_USART3_CLKSOURCE_HSI:    /* USART3 Clock is HSI Osc. */
          if (LL_RCC_HSI_IsReady() != 0U)
 8003710:	f7ff fe68 	bl	80033e4 <LL_RCC_HSI_IsReady>
 8003714:	4603      	mov	r3, r0
 8003716:	2b00      	cmp	r3, #0
 8003718:	d025      	beq.n	8003766 <LL_RCC_GetUSARTClockFreq+0x1a6>
          {
            usart_frequency = HSI_VALUE;
 800371a:	4b17      	ldr	r3, [pc, #92]	; (8003778 <LL_RCC_GetUSARTClockFreq+0x1b8>)
 800371c:	60fb      	str	r3, [r7, #12]
          }
          break;
 800371e:	e022      	b.n	8003766 <LL_RCC_GetUSARTClockFreq+0x1a6>

        case LL_RCC_USART3_CLKSOURCE_LSE:    /* USART3 Clock is LSE Osc. */
          if (LL_RCC_LSE_IsReady() != 0U)
 8003720:	f7ff fe74 	bl	800340c <LL_RCC_LSE_IsReady>
 8003724:	4603      	mov	r3, r0
 8003726:	2b00      	cmp	r3, #0
 8003728:	d01f      	beq.n	800376a <LL_RCC_GetUSARTClockFreq+0x1aa>
          {
            usart_frequency = LSE_VALUE;
 800372a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800372e:	60fb      	str	r3, [r7, #12]
          }
          break;
 8003730:	e01b      	b.n	800376a <LL_RCC_GetUSARTClockFreq+0x1aa>

        case LL_RCC_USART3_CLKSOURCE_PCLK1:  /* USART3 Clock is PCLK1 */
          usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8003732:	f000 f8bb 	bl	80038ac <RCC_GetSystemClockFreq>
 8003736:	4603      	mov	r3, r0
 8003738:	4618      	mov	r0, r3
 800373a:	f000 f947 	bl	80039cc <RCC_GetHCLKClockFreq>
 800373e:	4603      	mov	r3, r0
 8003740:	4618      	mov	r0, r3
 8003742:	f000 f959 	bl	80039f8 <RCC_GetPCLK1ClockFreq>
 8003746:	60f8      	str	r0, [r7, #12]
          break;
 8003748:	e010      	b.n	800376c <LL_RCC_GetUSARTClockFreq+0x1ac>
        break;
 800374a:	bf00      	nop
 800374c:	e00e      	b.n	800376c <LL_RCC_GetUSARTClockFreq+0x1ac>
        break;
 800374e:	bf00      	nop
 8003750:	e00c      	b.n	800376c <LL_RCC_GetUSARTClockFreq+0x1ac>
        break;
 8003752:	bf00      	nop
 8003754:	e00a      	b.n	800376c <LL_RCC_GetUSARTClockFreq+0x1ac>
        break;
 8003756:	bf00      	nop
 8003758:	e008      	b.n	800376c <LL_RCC_GetUSARTClockFreq+0x1ac>
        break;
 800375a:	bf00      	nop
 800375c:	e006      	b.n	800376c <LL_RCC_GetUSARTClockFreq+0x1ac>
        break;
 800375e:	bf00      	nop
 8003760:	e004      	b.n	800376c <LL_RCC_GetUSARTClockFreq+0x1ac>

        default:
          break;
 8003762:	bf00      	nop
 8003764:	e002      	b.n	800376c <LL_RCC_GetUSARTClockFreq+0x1ac>
          break;
 8003766:	bf00      	nop
 8003768:	e000      	b.n	800376c <LL_RCC_GetUSARTClockFreq+0x1ac>
          break;
 800376a:	bf00      	nop
      }
    }
#endif /* RCC_CCIPR_USART3SEL */
  }
  return usart_frequency;
 800376c:	68fb      	ldr	r3, [r7, #12]
}
 800376e:	4618      	mov	r0, r3
 8003770:	3710      	adds	r7, #16
 8003772:	46bd      	mov	sp, r7
 8003774:	bd80      	pop	{r7, pc}
 8003776:	bf00      	nop
 8003778:	00f42400 	.word	0x00f42400
 800377c:	00300020 	.word	0x00300020
 8003780:	00300010 	.word	0x00300010

08003784 <LL_RCC_GetUARTClockFreq>:
  *         @arg @ref LL_RCC_UART5_CLKSOURCE
  * @retval UART clock frequency (in Hz)
  *         - @ref  LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  */
uint32_t LL_RCC_GetUARTClockFreq(uint32_t UARTxSource)
{
 8003784:	b580      	push	{r7, lr}
 8003786:	b084      	sub	sp, #16
 8003788:	af00      	add	r7, sp, #0
 800378a:	6078      	str	r0, [r7, #4]
  uint32_t uart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 800378c:	2300      	movs	r3, #0
 800378e:	60fb      	str	r3, [r7, #12]

  /* Check parameter */
  assert_param(IS_LL_RCC_UART_CLKSOURCE(UARTxSource));

#if defined(RCC_CCIPR_UART4SEL)
  if (UARTxSource == LL_RCC_UART4_CLKSOURCE)
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	2bc0      	cmp	r3, #192	; 0xc0
 8003794:	d13b      	bne.n	800380e <LL_RCC_GetUARTClockFreq+0x8a>
  {
    /* UART4CLK clock frequency */
    switch (LL_RCC_GetUARTClockSource(UARTxSource))
 8003796:	6878      	ldr	r0, [r7, #4]
 8003798:	f7ff fec6 	bl	8003528 <LL_RCC_GetUARTClockSource>
 800379c:	4603      	mov	r3, r0
 800379e:	f1b3 1fc0 	cmp.w	r3, #12583104	; 0xc000c0
 80037a2:	d01a      	beq.n	80037da <LL_RCC_GetUARTClockFreq+0x56>
 80037a4:	f1b3 1fc0 	cmp.w	r3, #12583104	; 0xc000c0
 80037a8:	d82c      	bhi.n	8003804 <LL_RCC_GetUARTClockFreq+0x80>
 80037aa:	4a3b      	ldr	r2, [pc, #236]	; (8003898 <LL_RCC_GetUARTClockFreq+0x114>)
 80037ac:	4293      	cmp	r3, r2
 80037ae:	d00c      	beq.n	80037ca <LL_RCC_GetUARTClockFreq+0x46>
 80037b0:	4a39      	ldr	r2, [pc, #228]	; (8003898 <LL_RCC_GetUARTClockFreq+0x114>)
 80037b2:	4293      	cmp	r3, r2
 80037b4:	d826      	bhi.n	8003804 <LL_RCC_GetUARTClockFreq+0x80>
 80037b6:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80037ba:	d017      	beq.n	80037ec <LL_RCC_GetUARTClockFreq+0x68>
 80037bc:	4a37      	ldr	r2, [pc, #220]	; (800389c <LL_RCC_GetUARTClockFreq+0x118>)
 80037be:	4293      	cmp	r3, r2
 80037c0:	d120      	bne.n	8003804 <LL_RCC_GetUARTClockFreq+0x80>
    {
      case LL_RCC_UART4_CLKSOURCE_SYSCLK: /* UART4 Clock is System Clock */
        uart_frequency = RCC_GetSystemClockFreq();
 80037c2:	f000 f873 	bl	80038ac <RCC_GetSystemClockFreq>
 80037c6:	60f8      	str	r0, [r7, #12]
        break;
 80037c8:	e021      	b.n	800380e <LL_RCC_GetUARTClockFreq+0x8a>

      case LL_RCC_UART4_CLKSOURCE_HSI:    /* UART4 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() != 0U)
 80037ca:	f7ff fe0b 	bl	80033e4 <LL_RCC_HSI_IsReady>
 80037ce:	4603      	mov	r3, r0
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d019      	beq.n	8003808 <LL_RCC_GetUARTClockFreq+0x84>
        {
          uart_frequency = HSI_VALUE;
 80037d4:	4b32      	ldr	r3, [pc, #200]	; (80038a0 <LL_RCC_GetUARTClockFreq+0x11c>)
 80037d6:	60fb      	str	r3, [r7, #12]
        }
        break;
 80037d8:	e016      	b.n	8003808 <LL_RCC_GetUARTClockFreq+0x84>

      case LL_RCC_UART4_CLKSOURCE_LSE:    /* UART4 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() != 0U)
 80037da:	f7ff fe17 	bl	800340c <LL_RCC_LSE_IsReady>
 80037de:	4603      	mov	r3, r0
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d013      	beq.n	800380c <LL_RCC_GetUARTClockFreq+0x88>
        {
          uart_frequency = LSE_VALUE;
 80037e4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80037e8:	60fb      	str	r3, [r7, #12]
        }
        break;
 80037ea:	e00f      	b.n	800380c <LL_RCC_GetUARTClockFreq+0x88>

      case LL_RCC_UART4_CLKSOURCE_PCLK1:  /* UART4 Clock is PCLK1 */
        uart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 80037ec:	f000 f85e 	bl	80038ac <RCC_GetSystemClockFreq>
 80037f0:	4603      	mov	r3, r0
 80037f2:	4618      	mov	r0, r3
 80037f4:	f000 f8ea 	bl	80039cc <RCC_GetHCLKClockFreq>
 80037f8:	4603      	mov	r3, r0
 80037fa:	4618      	mov	r0, r3
 80037fc:	f000 f8fc 	bl	80039f8 <RCC_GetPCLK1ClockFreq>
 8003800:	60f8      	str	r0, [r7, #12]
        break;
 8003802:	e004      	b.n	800380e <LL_RCC_GetUARTClockFreq+0x8a>

      default:
        break;
 8003804:	bf00      	nop
 8003806:	e002      	b.n	800380e <LL_RCC_GetUARTClockFreq+0x8a>
        break;
 8003808:	bf00      	nop
 800380a:	e000      	b.n	800380e <LL_RCC_GetUARTClockFreq+0x8a>
        break;
 800380c:	bf00      	nop
    }
  }
#endif /* RCC_CCIPR_UART4SEL */

#if defined(RCC_CCIPR_UART5SEL)
  if (UARTxSource == LL_RCC_UART5_CLKSOURCE)
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003814:	d13b      	bne.n	800388e <LL_RCC_GetUARTClockFreq+0x10a>
  {
    /* UART5CLK clock frequency */
    switch (LL_RCC_GetUARTClockSource(UARTxSource))
 8003816:	6878      	ldr	r0, [r7, #4]
 8003818:	f7ff fe86 	bl	8003528 <LL_RCC_GetUARTClockSource>
 800381c:	4603      	mov	r3, r0
 800381e:	f1b3 2f03 	cmp.w	r3, #50332416	; 0x3000300
 8003822:	d01a      	beq.n	800385a <LL_RCC_GetUARTClockFreq+0xd6>
 8003824:	f1b3 2f03 	cmp.w	r3, #50332416	; 0x3000300
 8003828:	d82c      	bhi.n	8003884 <LL_RCC_GetUARTClockFreq+0x100>
 800382a:	4a1e      	ldr	r2, [pc, #120]	; (80038a4 <LL_RCC_GetUARTClockFreq+0x120>)
 800382c:	4293      	cmp	r3, r2
 800382e:	d00c      	beq.n	800384a <LL_RCC_GetUARTClockFreq+0xc6>
 8003830:	4a1c      	ldr	r2, [pc, #112]	; (80038a4 <LL_RCC_GetUARTClockFreq+0x120>)
 8003832:	4293      	cmp	r3, r2
 8003834:	d826      	bhi.n	8003884 <LL_RCC_GetUARTClockFreq+0x100>
 8003836:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800383a:	d017      	beq.n	800386c <LL_RCC_GetUARTClockFreq+0xe8>
 800383c:	4a1a      	ldr	r2, [pc, #104]	; (80038a8 <LL_RCC_GetUARTClockFreq+0x124>)
 800383e:	4293      	cmp	r3, r2
 8003840:	d120      	bne.n	8003884 <LL_RCC_GetUARTClockFreq+0x100>
    {
      case LL_RCC_UART5_CLKSOURCE_SYSCLK: /* UART5 Clock is System Clock */
        uart_frequency = RCC_GetSystemClockFreq();
 8003842:	f000 f833 	bl	80038ac <RCC_GetSystemClockFreq>
 8003846:	60f8      	str	r0, [r7, #12]
        break;
 8003848:	e021      	b.n	800388e <LL_RCC_GetUARTClockFreq+0x10a>

      case LL_RCC_UART5_CLKSOURCE_HSI:    /* UART5 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() != 0U)
 800384a:	f7ff fdcb 	bl	80033e4 <LL_RCC_HSI_IsReady>
 800384e:	4603      	mov	r3, r0
 8003850:	2b00      	cmp	r3, #0
 8003852:	d019      	beq.n	8003888 <LL_RCC_GetUARTClockFreq+0x104>
        {
          uart_frequency = HSI_VALUE;
 8003854:	4b12      	ldr	r3, [pc, #72]	; (80038a0 <LL_RCC_GetUARTClockFreq+0x11c>)
 8003856:	60fb      	str	r3, [r7, #12]
        }
        break;
 8003858:	e016      	b.n	8003888 <LL_RCC_GetUARTClockFreq+0x104>

      case LL_RCC_UART5_CLKSOURCE_LSE:    /* UART5 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() != 0U)
 800385a:	f7ff fdd7 	bl	800340c <LL_RCC_LSE_IsReady>
 800385e:	4603      	mov	r3, r0
 8003860:	2b00      	cmp	r3, #0
 8003862:	d013      	beq.n	800388c <LL_RCC_GetUARTClockFreq+0x108>
        {
          uart_frequency = LSE_VALUE;
 8003864:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003868:	60fb      	str	r3, [r7, #12]
        }
        break;
 800386a:	e00f      	b.n	800388c <LL_RCC_GetUARTClockFreq+0x108>

      case LL_RCC_UART5_CLKSOURCE_PCLK1:  /* UART5 Clock is PCLK1 */
        uart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 800386c:	f000 f81e 	bl	80038ac <RCC_GetSystemClockFreq>
 8003870:	4603      	mov	r3, r0
 8003872:	4618      	mov	r0, r3
 8003874:	f000 f8aa 	bl	80039cc <RCC_GetHCLKClockFreq>
 8003878:	4603      	mov	r3, r0
 800387a:	4618      	mov	r0, r3
 800387c:	f000 f8bc 	bl	80039f8 <RCC_GetPCLK1ClockFreq>
 8003880:	60f8      	str	r0, [r7, #12]
        break;
 8003882:	e004      	b.n	800388e <LL_RCC_GetUARTClockFreq+0x10a>

      default:
        break;
 8003884:	bf00      	nop
 8003886:	e002      	b.n	800388e <LL_RCC_GetUARTClockFreq+0x10a>
        break;
 8003888:	bf00      	nop
 800388a:	e000      	b.n	800388e <LL_RCC_GetUARTClockFreq+0x10a>
        break;
 800388c:	bf00      	nop
    }
  }
#endif /* RCC_CCIPR_UART5SEL */

  return uart_frequency;
 800388e:	68fb      	ldr	r3, [r7, #12]
}
 8003890:	4618      	mov	r0, r3
 8003892:	3710      	adds	r7, #16
 8003894:	46bd      	mov	sp, r7
 8003896:	bd80      	pop	{r7, pc}
 8003898:	00c00080 	.word	0x00c00080
 800389c:	00c00040 	.word	0x00c00040
 80038a0:	00f42400 	.word	0x00f42400
 80038a4:	03000200 	.word	0x03000200
 80038a8:	03000100 	.word	0x03000100

080038ac <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
static uint32_t RCC_GetSystemClockFreq(void)
{
 80038ac:	b580      	push	{r7, lr}
 80038ae:	b082      	sub	sp, #8
 80038b0:	af00      	add	r7, sp, #0
  uint32_t frequency;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 80038b2:	f7ff fded 	bl	8003490 <LL_RCC_GetSysClkSource>
 80038b6:	4603      	mov	r3, r0
 80038b8:	2b0c      	cmp	r3, #12
 80038ba:	d851      	bhi.n	8003960 <RCC_GetSystemClockFreq+0xb4>
 80038bc:	a201      	add	r2, pc, #4	; (adr r2, 80038c4 <RCC_GetSystemClockFreq+0x18>)
 80038be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038c2:	bf00      	nop
 80038c4:	080038f9 	.word	0x080038f9
 80038c8:	08003961 	.word	0x08003961
 80038cc:	08003961 	.word	0x08003961
 80038d0:	08003961 	.word	0x08003961
 80038d4:	0800394d 	.word	0x0800394d
 80038d8:	08003961 	.word	0x08003961
 80038dc:	08003961 	.word	0x08003961
 80038e0:	08003961 	.word	0x08003961
 80038e4:	08003953 	.word	0x08003953
 80038e8:	08003961 	.word	0x08003961
 80038ec:	08003961 	.word	0x08003961
 80038f0:	08003961 	.word	0x08003961
 80038f4:	08003959 	.word	0x08003959
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
      frequency = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 80038f8:	f7ff fd9c 	bl	8003434 <LL_RCC_MSI_IsEnabledRangeSelect>
 80038fc:	4603      	mov	r3, r0
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d111      	bne.n	8003926 <RCC_GetSystemClockFreq+0x7a>
 8003902:	f7ff fd97 	bl	8003434 <LL_RCC_MSI_IsEnabledRangeSelect>
 8003906:	4603      	mov	r3, r0
 8003908:	2b00      	cmp	r3, #0
 800390a:	d004      	beq.n	8003916 <RCC_GetSystemClockFreq+0x6a>
 800390c:	f7ff fda4 	bl	8003458 <LL_RCC_MSI_GetRange>
 8003910:	4603      	mov	r3, r0
 8003912:	0a1b      	lsrs	r3, r3, #8
 8003914:	e003      	b.n	800391e <RCC_GetSystemClockFreq+0x72>
 8003916:	f7ff fdad 	bl	8003474 <LL_RCC_MSI_GetRangeAfterStandby>
 800391a:	4603      	mov	r3, r0
 800391c:	0a1b      	lsrs	r3, r3, #8
 800391e:	4a28      	ldr	r2, [pc, #160]	; (80039c0 <RCC_GetSystemClockFreq+0x114>)
 8003920:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003924:	e010      	b.n	8003948 <RCC_GetSystemClockFreq+0x9c>
 8003926:	f7ff fd85 	bl	8003434 <LL_RCC_MSI_IsEnabledRangeSelect>
 800392a:	4603      	mov	r3, r0
 800392c:	2b00      	cmp	r3, #0
 800392e:	d004      	beq.n	800393a <RCC_GetSystemClockFreq+0x8e>
 8003930:	f7ff fd92 	bl	8003458 <LL_RCC_MSI_GetRange>
 8003934:	4603      	mov	r3, r0
 8003936:	091b      	lsrs	r3, r3, #4
 8003938:	e003      	b.n	8003942 <RCC_GetSystemClockFreq+0x96>
 800393a:	f7ff fd9b 	bl	8003474 <LL_RCC_MSI_GetRangeAfterStandby>
 800393e:	4603      	mov	r3, r0
 8003940:	091b      	lsrs	r3, r3, #4
 8003942:	4a1f      	ldr	r2, [pc, #124]	; (80039c0 <RCC_GetSystemClockFreq+0x114>)
 8003944:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003948:	607b      	str	r3, [r7, #4]
                                    ((LL_RCC_MSI_IsEnabledRangeSelect() != 0U) ?
                                     LL_RCC_MSI_GetRange() :
                                     LL_RCC_MSI_GetRangeAfterStandby()));
      break;
 800394a:	e033      	b.n	80039b4 <RCC_GetSystemClockFreq+0x108>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 800394c:	4b1d      	ldr	r3, [pc, #116]	; (80039c4 <RCC_GetSystemClockFreq+0x118>)
 800394e:	607b      	str	r3, [r7, #4]
      break;
 8003950:	e030      	b.n	80039b4 <RCC_GetSystemClockFreq+0x108>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 8003952:	4b1d      	ldr	r3, [pc, #116]	; (80039c8 <RCC_GetSystemClockFreq+0x11c>)
 8003954:	607b      	str	r3, [r7, #4]
      break;
 8003956:	e02d      	b.n	80039b4 <RCC_GetSystemClockFreq+0x108>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS();
 8003958:	f000 f876 	bl	8003a48 <RCC_PLL_GetFreqDomain_SYS>
 800395c:	6078      	str	r0, [r7, #4]
      break;
 800395e:	e029      	b.n	80039b4 <RCC_GetSystemClockFreq+0x108>

    default:
      frequency = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8003960:	f7ff fd68 	bl	8003434 <LL_RCC_MSI_IsEnabledRangeSelect>
 8003964:	4603      	mov	r3, r0
 8003966:	2b00      	cmp	r3, #0
 8003968:	d111      	bne.n	800398e <RCC_GetSystemClockFreq+0xe2>
 800396a:	f7ff fd63 	bl	8003434 <LL_RCC_MSI_IsEnabledRangeSelect>
 800396e:	4603      	mov	r3, r0
 8003970:	2b00      	cmp	r3, #0
 8003972:	d004      	beq.n	800397e <RCC_GetSystemClockFreq+0xd2>
 8003974:	f7ff fd70 	bl	8003458 <LL_RCC_MSI_GetRange>
 8003978:	4603      	mov	r3, r0
 800397a:	0a1b      	lsrs	r3, r3, #8
 800397c:	e003      	b.n	8003986 <RCC_GetSystemClockFreq+0xda>
 800397e:	f7ff fd79 	bl	8003474 <LL_RCC_MSI_GetRangeAfterStandby>
 8003982:	4603      	mov	r3, r0
 8003984:	0a1b      	lsrs	r3, r3, #8
 8003986:	4a0e      	ldr	r2, [pc, #56]	; (80039c0 <RCC_GetSystemClockFreq+0x114>)
 8003988:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800398c:	e010      	b.n	80039b0 <RCC_GetSystemClockFreq+0x104>
 800398e:	f7ff fd51 	bl	8003434 <LL_RCC_MSI_IsEnabledRangeSelect>
 8003992:	4603      	mov	r3, r0
 8003994:	2b00      	cmp	r3, #0
 8003996:	d004      	beq.n	80039a2 <RCC_GetSystemClockFreq+0xf6>
 8003998:	f7ff fd5e 	bl	8003458 <LL_RCC_MSI_GetRange>
 800399c:	4603      	mov	r3, r0
 800399e:	091b      	lsrs	r3, r3, #4
 80039a0:	e003      	b.n	80039aa <RCC_GetSystemClockFreq+0xfe>
 80039a2:	f7ff fd67 	bl	8003474 <LL_RCC_MSI_GetRangeAfterStandby>
 80039a6:	4603      	mov	r3, r0
 80039a8:	091b      	lsrs	r3, r3, #4
 80039aa:	4a05      	ldr	r2, [pc, #20]	; (80039c0 <RCC_GetSystemClockFreq+0x114>)
 80039ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80039b0:	607b      	str	r3, [r7, #4]
                                    ((LL_RCC_MSI_IsEnabledRangeSelect() != 0U) ?
                                     LL_RCC_MSI_GetRange() :
                                     LL_RCC_MSI_GetRangeAfterStandby()));
      break;
 80039b2:	bf00      	nop
  }

  return frequency;
 80039b4:	687b      	ldr	r3, [r7, #4]
}
 80039b6:	4618      	mov	r0, r3
 80039b8:	3708      	adds	r7, #8
 80039ba:	46bd      	mov	sp, r7
 80039bc:	bd80      	pop	{r7, pc}
 80039be:	bf00      	nop
 80039c0:	08004258 	.word	0x08004258
 80039c4:	00f42400 	.word	0x00f42400
 80039c8:	007a1200 	.word	0x007a1200

080039cc <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
static uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 80039cc:	b580      	push	{r7, lr}
 80039ce:	b082      	sub	sp, #8
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 80039d4:	f7ff fd6a 	bl	80034ac <LL_RCC_GetAHBPrescaler>
 80039d8:	4603      	mov	r3, r0
 80039da:	091b      	lsrs	r3, r3, #4
 80039dc:	f003 030f 	and.w	r3, r3, #15
 80039e0:	4a04      	ldr	r2, [pc, #16]	; (80039f4 <RCC_GetHCLKClockFreq+0x28>)
 80039e2:	5cd3      	ldrb	r3, [r2, r3]
 80039e4:	461a      	mov	r2, r3
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	40d3      	lsrs	r3, r2
}
 80039ea:	4618      	mov	r0, r3
 80039ec:	3708      	adds	r7, #8
 80039ee:	46bd      	mov	sp, r7
 80039f0:	bd80      	pop	{r7, pc}
 80039f2:	bf00      	nop
 80039f4:	08004240 	.word	0x08004240

080039f8 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
static uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 80039f8:	b580      	push	{r7, lr}
 80039fa:	b082      	sub	sp, #8
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8003a00:	f7ff fd62 	bl	80034c8 <LL_RCC_GetAPB1Prescaler>
 8003a04:	4603      	mov	r3, r0
 8003a06:	0a1b      	lsrs	r3, r3, #8
 8003a08:	4a04      	ldr	r2, [pc, #16]	; (8003a1c <RCC_GetPCLK1ClockFreq+0x24>)
 8003a0a:	5cd3      	ldrb	r3, [r2, r3]
 8003a0c:	461a      	mov	r2, r3
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	40d3      	lsrs	r3, r2
}
 8003a12:	4618      	mov	r0, r3
 8003a14:	3708      	adds	r7, #8
 8003a16:	46bd      	mov	sp, r7
 8003a18:	bd80      	pop	{r7, pc}
 8003a1a:	bf00      	nop
 8003a1c:	08004250 	.word	0x08004250

08003a20 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
static uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 8003a20:	b580      	push	{r7, lr}
 8003a22:	b082      	sub	sp, #8
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8003a28:	f7ff fd5c 	bl	80034e4 <LL_RCC_GetAPB2Prescaler>
 8003a2c:	4603      	mov	r3, r0
 8003a2e:	0adb      	lsrs	r3, r3, #11
 8003a30:	4a04      	ldr	r2, [pc, #16]	; (8003a44 <RCC_GetPCLK2ClockFreq+0x24>)
 8003a32:	5cd3      	ldrb	r3, [r2, r3]
 8003a34:	461a      	mov	r2, r3
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	40d3      	lsrs	r3, r2
}
 8003a3a:	4618      	mov	r0, r3
 8003a3c:	3708      	adds	r7, #8
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	bd80      	pop	{r7, pc}
 8003a42:	bf00      	nop
 8003a44:	08004250 	.word	0x08004250

08003a48 <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
static uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 8003a48:	b590      	push	{r4, r7, lr}
 8003a4a:	b083      	sub	sp, #12
 8003a4c:	af00      	add	r7, sp, #0
  uint32_t pllinputfreq, pllsource;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 8003a4e:	f7ff fd7f 	bl	8003550 <LL_RCC_PLL_GetMainSource>
 8003a52:	6038      	str	r0, [r7, #0]

  switch (pllsource)
 8003a54:	683b      	ldr	r3, [r7, #0]
 8003a56:	2b03      	cmp	r3, #3
 8003a58:	d036      	beq.n	8003ac8 <RCC_PLL_GetFreqDomain_SYS+0x80>
 8003a5a:	683b      	ldr	r3, [r7, #0]
 8003a5c:	2b03      	cmp	r3, #3
 8003a5e:	d836      	bhi.n	8003ace <RCC_PLL_GetFreqDomain_SYS+0x86>
 8003a60:	683b      	ldr	r3, [r7, #0]
 8003a62:	2b01      	cmp	r3, #1
 8003a64:	d003      	beq.n	8003a6e <RCC_PLL_GetFreqDomain_SYS+0x26>
 8003a66:	683b      	ldr	r3, [r7, #0]
 8003a68:	2b02      	cmp	r3, #2
 8003a6a:	d02a      	beq.n	8003ac2 <RCC_PLL_GetFreqDomain_SYS+0x7a>
 8003a6c:	e02f      	b.n	8003ace <RCC_PLL_GetFreqDomain_SYS+0x86>
  {
    case LL_RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8003a6e:	f7ff fce1 	bl	8003434 <LL_RCC_MSI_IsEnabledRangeSelect>
 8003a72:	4603      	mov	r3, r0
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d111      	bne.n	8003a9c <RCC_PLL_GetFreqDomain_SYS+0x54>
 8003a78:	f7ff fcdc 	bl	8003434 <LL_RCC_MSI_IsEnabledRangeSelect>
 8003a7c:	4603      	mov	r3, r0
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d004      	beq.n	8003a8c <RCC_PLL_GetFreqDomain_SYS+0x44>
 8003a82:	f7ff fce9 	bl	8003458 <LL_RCC_MSI_GetRange>
 8003a86:	4603      	mov	r3, r0
 8003a88:	0a1b      	lsrs	r3, r3, #8
 8003a8a:	e003      	b.n	8003a94 <RCC_PLL_GetFreqDomain_SYS+0x4c>
 8003a8c:	f7ff fcf2 	bl	8003474 <LL_RCC_MSI_GetRangeAfterStandby>
 8003a90:	4603      	mov	r3, r0
 8003a92:	0a1b      	lsrs	r3, r3, #8
 8003a94:	4a2f      	ldr	r2, [pc, #188]	; (8003b54 <RCC_PLL_GetFreqDomain_SYS+0x10c>)
 8003a96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a9a:	e010      	b.n	8003abe <RCC_PLL_GetFreqDomain_SYS+0x76>
 8003a9c:	f7ff fcca 	bl	8003434 <LL_RCC_MSI_IsEnabledRangeSelect>
 8003aa0:	4603      	mov	r3, r0
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d004      	beq.n	8003ab0 <RCC_PLL_GetFreqDomain_SYS+0x68>
 8003aa6:	f7ff fcd7 	bl	8003458 <LL_RCC_MSI_GetRange>
 8003aaa:	4603      	mov	r3, r0
 8003aac:	091b      	lsrs	r3, r3, #4
 8003aae:	e003      	b.n	8003ab8 <RCC_PLL_GetFreqDomain_SYS+0x70>
 8003ab0:	f7ff fce0 	bl	8003474 <LL_RCC_MSI_GetRangeAfterStandby>
 8003ab4:	4603      	mov	r3, r0
 8003ab6:	091b      	lsrs	r3, r3, #4
 8003ab8:	4a26      	ldr	r2, [pc, #152]	; (8003b54 <RCC_PLL_GetFreqDomain_SYS+0x10c>)
 8003aba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003abe:	607b      	str	r3, [r7, #4]
                                    ((LL_RCC_MSI_IsEnabledRangeSelect() != 0U) ?
                                     LL_RCC_MSI_GetRange() :
                                     LL_RCC_MSI_GetRangeAfterStandby()));
      break;
 8003ac0:	e02f      	b.n	8003b22 <RCC_PLL_GetFreqDomain_SYS+0xda>

    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 8003ac2:	4b25      	ldr	r3, [pc, #148]	; (8003b58 <RCC_PLL_GetFreqDomain_SYS+0x110>)
 8003ac4:	607b      	str	r3, [r7, #4]
      break;
 8003ac6:	e02c      	b.n	8003b22 <RCC_PLL_GetFreqDomain_SYS+0xda>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 8003ac8:	4b24      	ldr	r3, [pc, #144]	; (8003b5c <RCC_PLL_GetFreqDomain_SYS+0x114>)
 8003aca:	607b      	str	r3, [r7, #4]
      break;
 8003acc:	e029      	b.n	8003b22 <RCC_PLL_GetFreqDomain_SYS+0xda>

    default:
      pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8003ace:	f7ff fcb1 	bl	8003434 <LL_RCC_MSI_IsEnabledRangeSelect>
 8003ad2:	4603      	mov	r3, r0
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d111      	bne.n	8003afc <RCC_PLL_GetFreqDomain_SYS+0xb4>
 8003ad8:	f7ff fcac 	bl	8003434 <LL_RCC_MSI_IsEnabledRangeSelect>
 8003adc:	4603      	mov	r3, r0
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d004      	beq.n	8003aec <RCC_PLL_GetFreqDomain_SYS+0xa4>
 8003ae2:	f7ff fcb9 	bl	8003458 <LL_RCC_MSI_GetRange>
 8003ae6:	4603      	mov	r3, r0
 8003ae8:	0a1b      	lsrs	r3, r3, #8
 8003aea:	e003      	b.n	8003af4 <RCC_PLL_GetFreqDomain_SYS+0xac>
 8003aec:	f7ff fcc2 	bl	8003474 <LL_RCC_MSI_GetRangeAfterStandby>
 8003af0:	4603      	mov	r3, r0
 8003af2:	0a1b      	lsrs	r3, r3, #8
 8003af4:	4a17      	ldr	r2, [pc, #92]	; (8003b54 <RCC_PLL_GetFreqDomain_SYS+0x10c>)
 8003af6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003afa:	e010      	b.n	8003b1e <RCC_PLL_GetFreqDomain_SYS+0xd6>
 8003afc:	f7ff fc9a 	bl	8003434 <LL_RCC_MSI_IsEnabledRangeSelect>
 8003b00:	4603      	mov	r3, r0
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d004      	beq.n	8003b10 <RCC_PLL_GetFreqDomain_SYS+0xc8>
 8003b06:	f7ff fca7 	bl	8003458 <LL_RCC_MSI_GetRange>
 8003b0a:	4603      	mov	r3, r0
 8003b0c:	091b      	lsrs	r3, r3, #4
 8003b0e:	e003      	b.n	8003b18 <RCC_PLL_GetFreqDomain_SYS+0xd0>
 8003b10:	f7ff fcb0 	bl	8003474 <LL_RCC_MSI_GetRangeAfterStandby>
 8003b14:	4603      	mov	r3, r0
 8003b16:	091b      	lsrs	r3, r3, #4
 8003b18:	4a0e      	ldr	r2, [pc, #56]	; (8003b54 <RCC_PLL_GetFreqDomain_SYS+0x10c>)
 8003b1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b1e:	607b      	str	r3, [r7, #4]
                                    ((LL_RCC_MSI_IsEnabledRangeSelect() != 0U) ?
                                     LL_RCC_MSI_GetRange() :
                                     LL_RCC_MSI_GetRangeAfterStandby()));
      break;
 8003b20:	bf00      	nop
  }
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8003b22:	f7ff fd3f 	bl	80035a4 <LL_RCC_PLL_GetDivider>
 8003b26:	4603      	mov	r3, r0
 8003b28:	091b      	lsrs	r3, r3, #4
 8003b2a:	3301      	adds	r3, #1
 8003b2c:	687a      	ldr	r2, [r7, #4]
 8003b2e:	fbb2 f4f3 	udiv	r4, r2, r3
 8003b32:	f7ff fd1b 	bl	800356c <LL_RCC_PLL_GetN>
 8003b36:	4603      	mov	r3, r0
 8003b38:	fb03 f404 	mul.w	r4, r3, r4
 8003b3c:	f7ff fd24 	bl	8003588 <LL_RCC_PLL_GetR>
 8003b40:	4603      	mov	r3, r0
 8003b42:	0e5b      	lsrs	r3, r3, #25
 8003b44:	3301      	adds	r3, #1
 8003b46:	005b      	lsls	r3, r3, #1
 8003b48:	fbb4 f3f3 	udiv	r3, r4, r3
                                        LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
}
 8003b4c:	4618      	mov	r0, r3
 8003b4e:	370c      	adds	r7, #12
 8003b50:	46bd      	mov	sp, r7
 8003b52:	bd90      	pop	{r4, r7, pc}
 8003b54:	08004258 	.word	0x08004258
 8003b58:	00f42400 	.word	0x00f42400
 8003b5c:	007a1200 	.word	0x007a1200

08003b60 <LL_USART_IsEnabled>:
{
 8003b60:	b480      	push	{r7}
 8003b62:	b083      	sub	sp, #12
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE)) ? 1UL : 0UL);
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f003 0301 	and.w	r3, r3, #1
 8003b70:	2b01      	cmp	r3, #1
 8003b72:	d101      	bne.n	8003b78 <LL_USART_IsEnabled+0x18>
 8003b74:	2301      	movs	r3, #1
 8003b76:	e000      	b.n	8003b7a <LL_USART_IsEnabled+0x1a>
 8003b78:	2300      	movs	r3, #0
}
 8003b7a:	4618      	mov	r0, r3
 8003b7c:	370c      	adds	r7, #12
 8003b7e:	46bd      	mov	sp, r7
 8003b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b84:	4770      	bx	lr

08003b86 <LL_USART_SetStopBitsLength>:
{
 8003b86:	b480      	push	{r7}
 8003b88:	b083      	sub	sp, #12
 8003b8a:	af00      	add	r7, sp, #0
 8003b8c:	6078      	str	r0, [r7, #4]
 8003b8e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	685b      	ldr	r3, [r3, #4]
 8003b94:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003b98:	683b      	ldr	r3, [r7, #0]
 8003b9a:	431a      	orrs	r2, r3
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	605a      	str	r2, [r3, #4]
}
 8003ba0:	bf00      	nop
 8003ba2:	370c      	adds	r7, #12
 8003ba4:	46bd      	mov	sp, r7
 8003ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003baa:	4770      	bx	lr

08003bac <LL_USART_SetHWFlowCtrl>:
{
 8003bac:	b480      	push	{r7}
 8003bae:	b083      	sub	sp, #12
 8003bb0:	af00      	add	r7, sp, #0
 8003bb2:	6078      	str	r0, [r7, #4]
 8003bb4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	689b      	ldr	r3, [r3, #8]
 8003bba:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003bbe:	683b      	ldr	r3, [r7, #0]
 8003bc0:	431a      	orrs	r2, r3
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	609a      	str	r2, [r3, #8]
}
 8003bc6:	bf00      	nop
 8003bc8:	370c      	adds	r7, #12
 8003bca:	46bd      	mov	sp, r7
 8003bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd0:	4770      	bx	lr

08003bd2 <LL_USART_SetBaudRate>:
{
 8003bd2:	b480      	push	{r7}
 8003bd4:	b087      	sub	sp, #28
 8003bd6:	af00      	add	r7, sp, #0
 8003bd8:	60f8      	str	r0, [r7, #12]
 8003bda:	60b9      	str	r1, [r7, #8]
 8003bdc:	607a      	str	r2, [r7, #4]
 8003bde:	603b      	str	r3, [r7, #0]
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003be6:	d11a      	bne.n	8003c1e <LL_USART_SetBaudRate+0x4c>
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 8003be8:	68bb      	ldr	r3, [r7, #8]
 8003bea:	005a      	lsls	r2, r3, #1
 8003bec:	683b      	ldr	r3, [r7, #0]
 8003bee:	085b      	lsrs	r3, r3, #1
 8003bf0:	441a      	add	r2, r3
 8003bf2:	683b      	ldr	r3, [r7, #0]
 8003bf4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bf8:	b29b      	uxth	r3, r3
 8003bfa:	617b      	str	r3, [r7, #20]
    brrtemp = usartdiv & 0xFFF0U;
 8003bfc:	697a      	ldr	r2, [r7, #20]
 8003bfe:	f64f 73f0 	movw	r3, #65520	; 0xfff0
 8003c02:	4013      	ands	r3, r2
 8003c04:	613b      	str	r3, [r7, #16]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003c06:	697b      	ldr	r3, [r7, #20]
 8003c08:	085b      	lsrs	r3, r3, #1
 8003c0a:	b29b      	uxth	r3, r3
 8003c0c:	f003 0307 	and.w	r3, r3, #7
 8003c10:	693a      	ldr	r2, [r7, #16]
 8003c12:	4313      	orrs	r3, r2
 8003c14:	613b      	str	r3, [r7, #16]
    USARTx->BRR = brrtemp;
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	693a      	ldr	r2, [r7, #16]
 8003c1a:	60da      	str	r2, [r3, #12]
}
 8003c1c:	e00a      	b.n	8003c34 <LL_USART_SetBaudRate+0x62>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8003c1e:	683b      	ldr	r3, [r7, #0]
 8003c20:	085a      	lsrs	r2, r3, #1
 8003c22:	68bb      	ldr	r3, [r7, #8]
 8003c24:	441a      	add	r2, r3
 8003c26:	683b      	ldr	r3, [r7, #0]
 8003c28:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c2c:	b29b      	uxth	r3, r3
 8003c2e:	461a      	mov	r2, r3
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	60da      	str	r2, [r3, #12]
}
 8003c34:	bf00      	nop
 8003c36:	371c      	adds	r7, #28
 8003c38:	46bd      	mov	sp, r7
 8003c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c3e:	4770      	bx	lr

08003c40 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, const LL_USART_InitTypeDef *USART_InitStruct)
{
 8003c40:	b580      	push	{r7, lr}
 8003c42:	b084      	sub	sp, #16
 8003c44:	af00      	add	r7, sp, #0
 8003c46:	6078      	str	r0, [r7, #4]
 8003c48:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8003c4a:	2301      	movs	r3, #1
 8003c4c:	73fb      	strb	r3, [r7, #15]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 8003c4e:	2300      	movs	r3, #0
 8003c50:	60bb      	str	r3, [r7, #8]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 8003c52:	6878      	ldr	r0, [r7, #4]
 8003c54:	f7ff ff84 	bl	8003b60 <LL_USART_IsEnabled>
 8003c58:	4603      	mov	r3, r0
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d15b      	bne.n	8003d16 <LL_USART_Init+0xd6>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681a      	ldr	r2, [r3, #0]
 8003c62:	4b2f      	ldr	r3, [pc, #188]	; (8003d20 <LL_USART_Init+0xe0>)
 8003c64:	4013      	ands	r3, r2
 8003c66:	683a      	ldr	r2, [r7, #0]
 8003c68:	6851      	ldr	r1, [r2, #4]
 8003c6a:	683a      	ldr	r2, [r7, #0]
 8003c6c:	68d2      	ldr	r2, [r2, #12]
 8003c6e:	4311      	orrs	r1, r2
 8003c70:	683a      	ldr	r2, [r7, #0]
 8003c72:	6912      	ldr	r2, [r2, #16]
 8003c74:	4311      	orrs	r1, r2
 8003c76:	683a      	ldr	r2, [r7, #0]
 8003c78:	6992      	ldr	r2, [r2, #24]
 8003c7a:	430a      	orrs	r2, r1
 8003c7c:	431a      	orrs	r2, r3
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	601a      	str	r2, [r3, #0]
    /*---------------------------- USART CR2 Configuration ---------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 8003c82:	683b      	ldr	r3, [r7, #0]
 8003c84:	689b      	ldr	r3, [r3, #8]
 8003c86:	4619      	mov	r1, r3
 8003c88:	6878      	ldr	r0, [r7, #4]
 8003c8a:	f7ff ff7c 	bl	8003b86 <LL_USART_SetStopBitsLength>
    /*---------------------------- USART CR3 Configuration ---------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to
     *   USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 8003c8e:	683b      	ldr	r3, [r7, #0]
 8003c90:	695b      	ldr	r3, [r3, #20]
 8003c92:	4619      	mov	r1, r3
 8003c94:	6878      	ldr	r0, [r7, #4]
 8003c96:	f7ff ff89 	bl	8003bac <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration ---------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    if (USARTx == USART1)
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	4a21      	ldr	r2, [pc, #132]	; (8003d24 <LL_USART_Init+0xe4>)
 8003c9e:	4293      	cmp	r3, r2
 8003ca0:	d104      	bne.n	8003cac <LL_USART_Init+0x6c>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART1_CLKSOURCE);
 8003ca2:	2003      	movs	r0, #3
 8003ca4:	f7ff fc8c 	bl	80035c0 <LL_RCC_GetUSARTClockFreq>
 8003ca8:	60b8      	str	r0, [r7, #8]
 8003caa:	e023      	b.n	8003cf4 <LL_USART_Init+0xb4>
    }
    else if (USARTx == USART2)
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	4a1e      	ldr	r2, [pc, #120]	; (8003d28 <LL_USART_Init+0xe8>)
 8003cb0:	4293      	cmp	r3, r2
 8003cb2:	d104      	bne.n	8003cbe <LL_USART_Init+0x7e>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART2_CLKSOURCE);
 8003cb4:	200c      	movs	r0, #12
 8003cb6:	f7ff fc83 	bl	80035c0 <LL_RCC_GetUSARTClockFreq>
 8003cba:	60b8      	str	r0, [r7, #8]
 8003cbc:	e01a      	b.n	8003cf4 <LL_USART_Init+0xb4>
    }
#if defined(USART3)
    else if (USARTx == USART3)
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	4a1a      	ldr	r2, [pc, #104]	; (8003d2c <LL_USART_Init+0xec>)
 8003cc2:	4293      	cmp	r3, r2
 8003cc4:	d104      	bne.n	8003cd0 <LL_USART_Init+0x90>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART3_CLKSOURCE);
 8003cc6:	2030      	movs	r0, #48	; 0x30
 8003cc8:	f7ff fc7a 	bl	80035c0 <LL_RCC_GetUSARTClockFreq>
 8003ccc:	60b8      	str	r0, [r7, #8]
 8003cce:	e011      	b.n	8003cf4 <LL_USART_Init+0xb4>
    }
#endif /* USART3 */
#if defined(UART4)
    else if (USARTx == UART4)
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	4a17      	ldr	r2, [pc, #92]	; (8003d30 <LL_USART_Init+0xf0>)
 8003cd4:	4293      	cmp	r3, r2
 8003cd6:	d104      	bne.n	8003ce2 <LL_USART_Init+0xa2>
    {
      periphclk = LL_RCC_GetUARTClockFreq(LL_RCC_UART4_CLKSOURCE);
 8003cd8:	20c0      	movs	r0, #192	; 0xc0
 8003cda:	f7ff fd53 	bl	8003784 <LL_RCC_GetUARTClockFreq>
 8003cde:	60b8      	str	r0, [r7, #8]
 8003ce0:	e008      	b.n	8003cf4 <LL_USART_Init+0xb4>
    }
#endif /* UART4 */
#if defined(UART5)
    else if (USARTx == UART5)
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	4a13      	ldr	r2, [pc, #76]	; (8003d34 <LL_USART_Init+0xf4>)
 8003ce6:	4293      	cmp	r3, r2
 8003ce8:	d104      	bne.n	8003cf4 <LL_USART_Init+0xb4>
    {
      periphclk = LL_RCC_GetUARTClockFreq(LL_RCC_UART5_CLKSOURCE);
 8003cea:	f44f 7040 	mov.w	r0, #768	; 0x300
 8003cee:	f7ff fd49 	bl	8003784 <LL_RCC_GetUARTClockFreq>
 8003cf2:	60b8      	str	r0, [r7, #8]
       - prescaler value is required
    #endif
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8003cf4:	68bb      	ldr	r3, [r7, #8]
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d00d      	beq.n	8003d16 <LL_USART_Init+0xd6>
        && (USART_InitStruct->BaudRate != 0U))
 8003cfa:	683b      	ldr	r3, [r7, #0]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d009      	beq.n	8003d16 <LL_USART_Init+0xd6>
    {
      status = SUCCESS;
 8003d02:	2300      	movs	r3, #0
 8003d04:	73fb      	strb	r3, [r7, #15]
      LL_USART_SetBaudRate(USARTx,
                           periphclk,
#if defined(USART_PRESC_PRESCALER)
                           USART_InitStruct->PrescalerValue,
#endif /* USART_PRESC_PRESCALER */
                           USART_InitStruct->OverSampling,
 8003d06:	683b      	ldr	r3, [r7, #0]
 8003d08:	699a      	ldr	r2, [r3, #24]
                           USART_InitStruct->BaudRate);
 8003d0a:	683b      	ldr	r3, [r7, #0]
 8003d0c:	681b      	ldr	r3, [r3, #0]
      LL_USART_SetBaudRate(USARTx,
 8003d0e:	68b9      	ldr	r1, [r7, #8]
 8003d10:	6878      	ldr	r0, [r7, #4]
 8003d12:	f7ff ff5e 	bl	8003bd2 <LL_USART_SetBaudRate>
    LL_USART_SetPrescaler(USARTx, USART_InitStruct->PrescalerValue);
#endif /* USART_PRESC_PRESCALER */
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 8003d16:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d18:	4618      	mov	r0, r3
 8003d1a:	3710      	adds	r7, #16
 8003d1c:	46bd      	mov	sp, r7
 8003d1e:	bd80      	pop	{r7, pc}
 8003d20:	efff69f3 	.word	0xefff69f3
 8003d24:	40013800 	.word	0x40013800
 8003d28:	40004400 	.word	0x40004400
 8003d2c:	40004800 	.word	0x40004800
 8003d30:	40004c00 	.word	0x40004c00
 8003d34:	40005000 	.word	0x40005000

08003d38 <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 8003d38:	b480      	push	{r7}
 8003d3a:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 8003d3c:	bf00      	nop
 8003d3e:	46bd      	mov	sp, r7
 8003d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d44:	4770      	bx	lr
	...

08003d48 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8003d48:	b580      	push	{r7, lr}
 8003d4a:	b086      	sub	sp, #24
 8003d4c:	af04      	add	r7, sp, #16
 8003d4e:	4603      	mov	r3, r0
 8003d50:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8003d52:	f04f 33ff 	mov.w	r3, #4294967295
 8003d56:	9302      	str	r3, [sp, #8]
 8003d58:	2301      	movs	r3, #1
 8003d5a:	9301      	str	r3, [sp, #4]
 8003d5c:	1dfb      	adds	r3, r7, #7
 8003d5e:	9300      	str	r3, [sp, #0]
 8003d60:	2301      	movs	r3, #1
 8003d62:	2200      	movs	r2, #0
 8003d64:	2178      	movs	r1, #120	; 0x78
 8003d66:	4803      	ldr	r0, [pc, #12]	; (8003d74 <ssd1306_WriteCommand+0x2c>)
 8003d68:	f7fd fa8a 	bl	8001280 <HAL_I2C_Mem_Write>
}
 8003d6c:	bf00      	nop
 8003d6e:	3708      	adds	r7, #8
 8003d70:	46bd      	mov	sp, r7
 8003d72:	bd80      	pop	{r7, pc}
 8003d74:	20000030 	.word	0x20000030

08003d78 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8003d78:	b580      	push	{r7, lr}
 8003d7a:	b086      	sub	sp, #24
 8003d7c:	af04      	add	r7, sp, #16
 8003d7e:	6078      	str	r0, [r7, #4]
 8003d80:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 8003d82:	683b      	ldr	r3, [r7, #0]
 8003d84:	b29b      	uxth	r3, r3
 8003d86:	f04f 32ff 	mov.w	r2, #4294967295
 8003d8a:	9202      	str	r2, [sp, #8]
 8003d8c:	9301      	str	r3, [sp, #4]
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	9300      	str	r3, [sp, #0]
 8003d92:	2301      	movs	r3, #1
 8003d94:	2240      	movs	r2, #64	; 0x40
 8003d96:	2178      	movs	r1, #120	; 0x78
 8003d98:	4803      	ldr	r0, [pc, #12]	; (8003da8 <ssd1306_WriteData+0x30>)
 8003d9a:	f7fd fa71 	bl	8001280 <HAL_I2C_Mem_Write>
}
 8003d9e:	bf00      	nop
 8003da0:	3708      	adds	r7, #8
 8003da2:	46bd      	mov	sp, r7
 8003da4:	bd80      	pop	{r7, pc}
 8003da6:	bf00      	nop
 8003da8:	20000030 	.word	0x20000030

08003dac <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 8003dac:	b580      	push	{r7, lr}
 8003dae:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 8003db0:	f7ff ffc2 	bl	8003d38 <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8003db4:	2064      	movs	r0, #100	; 0x64
 8003db6:	f7fc fefb 	bl	8000bb0 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 8003dba:	2000      	movs	r0, #0
 8003dbc:	f000 f9da 	bl	8004174 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8003dc0:	2020      	movs	r0, #32
 8003dc2:	f7ff ffc1 	bl	8003d48 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 8003dc6:	2000      	movs	r0, #0
 8003dc8:	f7ff ffbe 	bl	8003d48 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8003dcc:	20b0      	movs	r0, #176	; 0xb0
 8003dce:	f7ff ffbb 	bl	8003d48 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8003dd2:	20c8      	movs	r0, #200	; 0xc8
 8003dd4:	f7ff ffb8 	bl	8003d48 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8003dd8:	2000      	movs	r0, #0
 8003dda:	f7ff ffb5 	bl	8003d48 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8003dde:	2010      	movs	r0, #16
 8003de0:	f7ff ffb2 	bl	8003d48 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8003de4:	2040      	movs	r0, #64	; 0x40
 8003de6:	f7ff ffaf 	bl	8003d48 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 8003dea:	20ff      	movs	r0, #255	; 0xff
 8003dec:	f000 f9ae 	bl	800414c <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8003df0:	20a1      	movs	r0, #161	; 0xa1
 8003df2:	f7ff ffa9 	bl	8003d48 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 8003df6:	20a6      	movs	r0, #166	; 0xa6
 8003df8:	f7ff ffa6 	bl	8003d48 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8003dfc:	20a8      	movs	r0, #168	; 0xa8
 8003dfe:	f7ff ffa3 	bl	8003d48 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 8003e02:	203f      	movs	r0, #63	; 0x3f
 8003e04:	f7ff ffa0 	bl	8003d48 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8003e08:	20a4      	movs	r0, #164	; 0xa4
 8003e0a:	f7ff ff9d 	bl	8003d48 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8003e0e:	20d3      	movs	r0, #211	; 0xd3
 8003e10:	f7ff ff9a 	bl	8003d48 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8003e14:	2000      	movs	r0, #0
 8003e16:	f7ff ff97 	bl	8003d48 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8003e1a:	20d5      	movs	r0, #213	; 0xd5
 8003e1c:	f7ff ff94 	bl	8003d48 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8003e20:	20f0      	movs	r0, #240	; 0xf0
 8003e22:	f7ff ff91 	bl	8003d48 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8003e26:	20d9      	movs	r0, #217	; 0xd9
 8003e28:	f7ff ff8e 	bl	8003d48 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8003e2c:	2022      	movs	r0, #34	; 0x22
 8003e2e:	f7ff ff8b 	bl	8003d48 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 8003e32:	20da      	movs	r0, #218	; 0xda
 8003e34:	f7ff ff88 	bl	8003d48 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 8003e38:	2012      	movs	r0, #18
 8003e3a:	f7ff ff85 	bl	8003d48 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 8003e3e:	20db      	movs	r0, #219	; 0xdb
 8003e40:	f7ff ff82 	bl	8003d48 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8003e44:	2020      	movs	r0, #32
 8003e46:	f7ff ff7f 	bl	8003d48 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8003e4a:	208d      	movs	r0, #141	; 0x8d
 8003e4c:	f7ff ff7c 	bl	8003d48 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8003e50:	2014      	movs	r0, #20
 8003e52:	f7ff ff79 	bl	8003d48 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 8003e56:	2001      	movs	r0, #1
 8003e58:	f000 f98c 	bl	8004174 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 8003e5c:	2000      	movs	r0, #0
 8003e5e:	f000 f80f 	bl	8003e80 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 8003e62:	f000 f831 	bl	8003ec8 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8003e66:	4b05      	ldr	r3, [pc, #20]	; (8003e7c <ssd1306_Init+0xd0>)
 8003e68:	2200      	movs	r2, #0
 8003e6a:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8003e6c:	4b03      	ldr	r3, [pc, #12]	; (8003e7c <ssd1306_Init+0xd0>)
 8003e6e:	2200      	movs	r2, #0
 8003e70:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 8003e72:	4b02      	ldr	r3, [pc, #8]	; (8003e7c <ssd1306_Init+0xd0>)
 8003e74:	2201      	movs	r2, #1
 8003e76:	711a      	strb	r2, [r3, #4]
}
 8003e78:	bf00      	nop
 8003e7a:	bd80      	pop	{r7, pc}
 8003e7c:	200004a0 	.word	0x200004a0

08003e80 <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 8003e80:	b480      	push	{r7}
 8003e82:	b085      	sub	sp, #20
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	4603      	mov	r3, r0
 8003e88:	71fb      	strb	r3, [r7, #7]
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8003e8a:	2300      	movs	r3, #0
 8003e8c:	60fb      	str	r3, [r7, #12]
 8003e8e:	e00d      	b.n	8003eac <ssd1306_Fill+0x2c>
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 8003e90:	79fb      	ldrb	r3, [r7, #7]
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d101      	bne.n	8003e9a <ssd1306_Fill+0x1a>
 8003e96:	2100      	movs	r1, #0
 8003e98:	e000      	b.n	8003e9c <ssd1306_Fill+0x1c>
 8003e9a:	21ff      	movs	r1, #255	; 0xff
 8003e9c:	4a09      	ldr	r2, [pc, #36]	; (8003ec4 <ssd1306_Fill+0x44>)
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	4413      	add	r3, r2
 8003ea2:	460a      	mov	r2, r1
 8003ea4:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	3301      	adds	r3, #1
 8003eaa:	60fb      	str	r3, [r7, #12]
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003eb2:	d3ed      	bcc.n	8003e90 <ssd1306_Fill+0x10>
    }
}
 8003eb4:	bf00      	nop
 8003eb6:	bf00      	nop
 8003eb8:	3714      	adds	r7, #20
 8003eba:	46bd      	mov	sp, r7
 8003ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec0:	4770      	bx	lr
 8003ec2:	bf00      	nop
 8003ec4:	200000a0 	.word	0x200000a0

08003ec8 <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 8003ec8:	b580      	push	{r7, lr}
 8003eca:	b082      	sub	sp, #8
 8003ecc:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8003ece:	2300      	movs	r3, #0
 8003ed0:	71fb      	strb	r3, [r7, #7]
 8003ed2:	e016      	b.n	8003f02 <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8003ed4:	79fb      	ldrb	r3, [r7, #7]
 8003ed6:	3b50      	subs	r3, #80	; 0x50
 8003ed8:	b2db      	uxtb	r3, r3
 8003eda:	4618      	mov	r0, r3
 8003edc:	f7ff ff34 	bl	8003d48 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 8003ee0:	2000      	movs	r0, #0
 8003ee2:	f7ff ff31 	bl	8003d48 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 8003ee6:	2010      	movs	r0, #16
 8003ee8:	f7ff ff2e 	bl	8003d48 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8003eec:	79fb      	ldrb	r3, [r7, #7]
 8003eee:	01db      	lsls	r3, r3, #7
 8003ef0:	4a08      	ldr	r2, [pc, #32]	; (8003f14 <ssd1306_UpdateScreen+0x4c>)
 8003ef2:	4413      	add	r3, r2
 8003ef4:	2180      	movs	r1, #128	; 0x80
 8003ef6:	4618      	mov	r0, r3
 8003ef8:	f7ff ff3e 	bl	8003d78 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8003efc:	79fb      	ldrb	r3, [r7, #7]
 8003efe:	3301      	adds	r3, #1
 8003f00:	71fb      	strb	r3, [r7, #7]
 8003f02:	79fb      	ldrb	r3, [r7, #7]
 8003f04:	2b07      	cmp	r3, #7
 8003f06:	d9e5      	bls.n	8003ed4 <ssd1306_UpdateScreen+0xc>
    }
}
 8003f08:	bf00      	nop
 8003f0a:	bf00      	nop
 8003f0c:	3708      	adds	r7, #8
 8003f0e:	46bd      	mov	sp, r7
 8003f10:	bd80      	pop	{r7, pc}
 8003f12:	bf00      	nop
 8003f14:	200000a0 	.word	0x200000a0

08003f18 <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8003f18:	b480      	push	{r7}
 8003f1a:	b083      	sub	sp, #12
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	4603      	mov	r3, r0
 8003f20:	71fb      	strb	r3, [r7, #7]
 8003f22:	460b      	mov	r3, r1
 8003f24:	71bb      	strb	r3, [r7, #6]
 8003f26:	4613      	mov	r3, r2
 8003f28:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8003f2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	db3d      	blt.n	8003fae <ssd1306_DrawPixel+0x96>
 8003f32:	79bb      	ldrb	r3, [r7, #6]
 8003f34:	2b3f      	cmp	r3, #63	; 0x3f
 8003f36:	d83a      	bhi.n	8003fae <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 8003f38:	797b      	ldrb	r3, [r7, #5]
 8003f3a:	2b01      	cmp	r3, #1
 8003f3c:	d11a      	bne.n	8003f74 <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8003f3e:	79fa      	ldrb	r2, [r7, #7]
 8003f40:	79bb      	ldrb	r3, [r7, #6]
 8003f42:	08db      	lsrs	r3, r3, #3
 8003f44:	b2d8      	uxtb	r0, r3
 8003f46:	4603      	mov	r3, r0
 8003f48:	01db      	lsls	r3, r3, #7
 8003f4a:	4413      	add	r3, r2
 8003f4c:	4a1b      	ldr	r2, [pc, #108]	; (8003fbc <ssd1306_DrawPixel+0xa4>)
 8003f4e:	5cd3      	ldrb	r3, [r2, r3]
 8003f50:	b25a      	sxtb	r2, r3
 8003f52:	79bb      	ldrb	r3, [r7, #6]
 8003f54:	f003 0307 	and.w	r3, r3, #7
 8003f58:	2101      	movs	r1, #1
 8003f5a:	fa01 f303 	lsl.w	r3, r1, r3
 8003f5e:	b25b      	sxtb	r3, r3
 8003f60:	4313      	orrs	r3, r2
 8003f62:	b259      	sxtb	r1, r3
 8003f64:	79fa      	ldrb	r2, [r7, #7]
 8003f66:	4603      	mov	r3, r0
 8003f68:	01db      	lsls	r3, r3, #7
 8003f6a:	4413      	add	r3, r2
 8003f6c:	b2c9      	uxtb	r1, r1
 8003f6e:	4a13      	ldr	r2, [pc, #76]	; (8003fbc <ssd1306_DrawPixel+0xa4>)
 8003f70:	54d1      	strb	r1, [r2, r3]
 8003f72:	e01d      	b.n	8003fb0 <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8003f74:	79fa      	ldrb	r2, [r7, #7]
 8003f76:	79bb      	ldrb	r3, [r7, #6]
 8003f78:	08db      	lsrs	r3, r3, #3
 8003f7a:	b2d8      	uxtb	r0, r3
 8003f7c:	4603      	mov	r3, r0
 8003f7e:	01db      	lsls	r3, r3, #7
 8003f80:	4413      	add	r3, r2
 8003f82:	4a0e      	ldr	r2, [pc, #56]	; (8003fbc <ssd1306_DrawPixel+0xa4>)
 8003f84:	5cd3      	ldrb	r3, [r2, r3]
 8003f86:	b25a      	sxtb	r2, r3
 8003f88:	79bb      	ldrb	r3, [r7, #6]
 8003f8a:	f003 0307 	and.w	r3, r3, #7
 8003f8e:	2101      	movs	r1, #1
 8003f90:	fa01 f303 	lsl.w	r3, r1, r3
 8003f94:	b25b      	sxtb	r3, r3
 8003f96:	43db      	mvns	r3, r3
 8003f98:	b25b      	sxtb	r3, r3
 8003f9a:	4013      	ands	r3, r2
 8003f9c:	b259      	sxtb	r1, r3
 8003f9e:	79fa      	ldrb	r2, [r7, #7]
 8003fa0:	4603      	mov	r3, r0
 8003fa2:	01db      	lsls	r3, r3, #7
 8003fa4:	4413      	add	r3, r2
 8003fa6:	b2c9      	uxtb	r1, r1
 8003fa8:	4a04      	ldr	r2, [pc, #16]	; (8003fbc <ssd1306_DrawPixel+0xa4>)
 8003faa:	54d1      	strb	r1, [r2, r3]
 8003fac:	e000      	b.n	8003fb0 <ssd1306_DrawPixel+0x98>
        return;
 8003fae:	bf00      	nop
    }
}
 8003fb0:	370c      	adds	r7, #12
 8003fb2:	46bd      	mov	sp, r7
 8003fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb8:	4770      	bx	lr
 8003fba:	bf00      	nop
 8003fbc:	200000a0 	.word	0x200000a0

08003fc0 <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 8003fc0:	b590      	push	{r4, r7, lr}
 8003fc2:	b089      	sub	sp, #36	; 0x24
 8003fc4:	af00      	add	r7, sp, #0
 8003fc6:	4604      	mov	r4, r0
 8003fc8:	1d38      	adds	r0, r7, #4
 8003fca:	e880 0006 	stmia.w	r0, {r1, r2}
 8003fce:	461a      	mov	r2, r3
 8003fd0:	4623      	mov	r3, r4
 8003fd2:	73fb      	strb	r3, [r7, #15]
 8003fd4:	4613      	mov	r3, r2
 8003fd6:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 8003fd8:	7bfb      	ldrb	r3, [r7, #15]
 8003fda:	2b1f      	cmp	r3, #31
 8003fdc:	d902      	bls.n	8003fe4 <ssd1306_WriteChar+0x24>
 8003fde:	7bfb      	ldrb	r3, [r7, #15]
 8003fe0:	2b7e      	cmp	r3, #126	; 0x7e
 8003fe2:	d901      	bls.n	8003fe8 <ssd1306_WriteChar+0x28>
        return 0;
 8003fe4:	2300      	movs	r3, #0
 8003fe6:	e06d      	b.n	80040c4 <ssd1306_WriteChar+0x104>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8003fe8:	4b38      	ldr	r3, [pc, #224]	; (80040cc <ssd1306_WriteChar+0x10c>)
 8003fea:	881b      	ldrh	r3, [r3, #0]
 8003fec:	461a      	mov	r2, r3
 8003fee:	793b      	ldrb	r3, [r7, #4]
 8003ff0:	4413      	add	r3, r2
 8003ff2:	2b80      	cmp	r3, #128	; 0x80
 8003ff4:	dc06      	bgt.n	8004004 <ssd1306_WriteChar+0x44>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 8003ff6:	4b35      	ldr	r3, [pc, #212]	; (80040cc <ssd1306_WriteChar+0x10c>)
 8003ff8:	885b      	ldrh	r3, [r3, #2]
 8003ffa:	461a      	mov	r2, r3
 8003ffc:	797b      	ldrb	r3, [r7, #5]
 8003ffe:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8004000:	2b40      	cmp	r3, #64	; 0x40
 8004002:	dd01      	ble.n	8004008 <ssd1306_WriteChar+0x48>
    {
        // Not enough space on current line
        return 0;
 8004004:	2300      	movs	r3, #0
 8004006:	e05d      	b.n	80040c4 <ssd1306_WriteChar+0x104>
    }
    
    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 8004008:	2300      	movs	r3, #0
 800400a:	61fb      	str	r3, [r7, #28]
 800400c:	e04c      	b.n	80040a8 <ssd1306_WriteChar+0xe8>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 800400e:	68ba      	ldr	r2, [r7, #8]
 8004010:	7bfb      	ldrb	r3, [r7, #15]
 8004012:	3b20      	subs	r3, #32
 8004014:	7979      	ldrb	r1, [r7, #5]
 8004016:	fb01 f303 	mul.w	r3, r1, r3
 800401a:	4619      	mov	r1, r3
 800401c:	69fb      	ldr	r3, [r7, #28]
 800401e:	440b      	add	r3, r1
 8004020:	005b      	lsls	r3, r3, #1
 8004022:	4413      	add	r3, r2
 8004024:	881b      	ldrh	r3, [r3, #0]
 8004026:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 8004028:	2300      	movs	r3, #0
 800402a:	61bb      	str	r3, [r7, #24]
 800402c:	e034      	b.n	8004098 <ssd1306_WriteChar+0xd8>
            if((b << j) & 0x8000)  {
 800402e:	697a      	ldr	r2, [r7, #20]
 8004030:	69bb      	ldr	r3, [r7, #24]
 8004032:	fa02 f303 	lsl.w	r3, r2, r3
 8004036:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800403a:	2b00      	cmp	r3, #0
 800403c:	d012      	beq.n	8004064 <ssd1306_WriteChar+0xa4>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 800403e:	4b23      	ldr	r3, [pc, #140]	; (80040cc <ssd1306_WriteChar+0x10c>)
 8004040:	881b      	ldrh	r3, [r3, #0]
 8004042:	b2da      	uxtb	r2, r3
 8004044:	69bb      	ldr	r3, [r7, #24]
 8004046:	b2db      	uxtb	r3, r3
 8004048:	4413      	add	r3, r2
 800404a:	b2d8      	uxtb	r0, r3
 800404c:	4b1f      	ldr	r3, [pc, #124]	; (80040cc <ssd1306_WriteChar+0x10c>)
 800404e:	885b      	ldrh	r3, [r3, #2]
 8004050:	b2da      	uxtb	r2, r3
 8004052:	69fb      	ldr	r3, [r7, #28]
 8004054:	b2db      	uxtb	r3, r3
 8004056:	4413      	add	r3, r2
 8004058:	b2db      	uxtb	r3, r3
 800405a:	7bba      	ldrb	r2, [r7, #14]
 800405c:	4619      	mov	r1, r3
 800405e:	f7ff ff5b 	bl	8003f18 <ssd1306_DrawPixel>
 8004062:	e016      	b.n	8004092 <ssd1306_WriteChar+0xd2>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8004064:	4b19      	ldr	r3, [pc, #100]	; (80040cc <ssd1306_WriteChar+0x10c>)
 8004066:	881b      	ldrh	r3, [r3, #0]
 8004068:	b2da      	uxtb	r2, r3
 800406a:	69bb      	ldr	r3, [r7, #24]
 800406c:	b2db      	uxtb	r3, r3
 800406e:	4413      	add	r3, r2
 8004070:	b2d8      	uxtb	r0, r3
 8004072:	4b16      	ldr	r3, [pc, #88]	; (80040cc <ssd1306_WriteChar+0x10c>)
 8004074:	885b      	ldrh	r3, [r3, #2]
 8004076:	b2da      	uxtb	r2, r3
 8004078:	69fb      	ldr	r3, [r7, #28]
 800407a:	b2db      	uxtb	r3, r3
 800407c:	4413      	add	r3, r2
 800407e:	b2d9      	uxtb	r1, r3
 8004080:	7bbb      	ldrb	r3, [r7, #14]
 8004082:	2b00      	cmp	r3, #0
 8004084:	bf0c      	ite	eq
 8004086:	2301      	moveq	r3, #1
 8004088:	2300      	movne	r3, #0
 800408a:	b2db      	uxtb	r3, r3
 800408c:	461a      	mov	r2, r3
 800408e:	f7ff ff43 	bl	8003f18 <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 8004092:	69bb      	ldr	r3, [r7, #24]
 8004094:	3301      	adds	r3, #1
 8004096:	61bb      	str	r3, [r7, #24]
 8004098:	793b      	ldrb	r3, [r7, #4]
 800409a:	461a      	mov	r2, r3
 800409c:	69bb      	ldr	r3, [r7, #24]
 800409e:	4293      	cmp	r3, r2
 80040a0:	d3c5      	bcc.n	800402e <ssd1306_WriteChar+0x6e>
    for(i = 0; i < Font.FontHeight; i++) {
 80040a2:	69fb      	ldr	r3, [r7, #28]
 80040a4:	3301      	adds	r3, #1
 80040a6:	61fb      	str	r3, [r7, #28]
 80040a8:	797b      	ldrb	r3, [r7, #5]
 80040aa:	461a      	mov	r2, r3
 80040ac:	69fb      	ldr	r3, [r7, #28]
 80040ae:	4293      	cmp	r3, r2
 80040b0:	d3ad      	bcc.n	800400e <ssd1306_WriteChar+0x4e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 80040b2:	4b06      	ldr	r3, [pc, #24]	; (80040cc <ssd1306_WriteChar+0x10c>)
 80040b4:	881a      	ldrh	r2, [r3, #0]
 80040b6:	793b      	ldrb	r3, [r7, #4]
 80040b8:	b29b      	uxth	r3, r3
 80040ba:	4413      	add	r3, r2
 80040bc:	b29a      	uxth	r2, r3
 80040be:	4b03      	ldr	r3, [pc, #12]	; (80040cc <ssd1306_WriteChar+0x10c>)
 80040c0:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 80040c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80040c4:	4618      	mov	r0, r3
 80040c6:	3724      	adds	r7, #36	; 0x24
 80040c8:	46bd      	mov	sp, r7
 80040ca:	bd90      	pop	{r4, r7, pc}
 80040cc:	200004a0 	.word	0x200004a0

080040d0 <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 80040d0:	b580      	push	{r7, lr}
 80040d2:	b084      	sub	sp, #16
 80040d4:	af00      	add	r7, sp, #0
 80040d6:	60f8      	str	r0, [r7, #12]
 80040d8:	1d38      	adds	r0, r7, #4
 80040da:	e880 0006 	stmia.w	r0, {r1, r2}
 80040de:	70fb      	strb	r3, [r7, #3]
    while (*str) {
 80040e0:	e012      	b.n	8004108 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	7818      	ldrb	r0, [r3, #0]
 80040e6:	78fb      	ldrb	r3, [r7, #3]
 80040e8:	1d3a      	adds	r2, r7, #4
 80040ea:	ca06      	ldmia	r2, {r1, r2}
 80040ec:	f7ff ff68 	bl	8003fc0 <ssd1306_WriteChar>
 80040f0:	4603      	mov	r3, r0
 80040f2:	461a      	mov	r2, r3
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	781b      	ldrb	r3, [r3, #0]
 80040f8:	429a      	cmp	r2, r3
 80040fa:	d002      	beq.n	8004102 <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	781b      	ldrb	r3, [r3, #0]
 8004100:	e008      	b.n	8004114 <ssd1306_WriteString+0x44>
        }
        str++;
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	3301      	adds	r3, #1
 8004106:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	781b      	ldrb	r3, [r3, #0]
 800410c:	2b00      	cmp	r3, #0
 800410e:	d1e8      	bne.n	80040e2 <ssd1306_WriteString+0x12>
    }
    
    // Everything ok
    return *str;
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	781b      	ldrb	r3, [r3, #0]
}
 8004114:	4618      	mov	r0, r3
 8004116:	3710      	adds	r7, #16
 8004118:	46bd      	mov	sp, r7
 800411a:	bd80      	pop	{r7, pc}

0800411c <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 800411c:	b480      	push	{r7}
 800411e:	b083      	sub	sp, #12
 8004120:	af00      	add	r7, sp, #0
 8004122:	4603      	mov	r3, r0
 8004124:	460a      	mov	r2, r1
 8004126:	71fb      	strb	r3, [r7, #7]
 8004128:	4613      	mov	r3, r2
 800412a:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 800412c:	79fb      	ldrb	r3, [r7, #7]
 800412e:	b29a      	uxth	r2, r3
 8004130:	4b05      	ldr	r3, [pc, #20]	; (8004148 <ssd1306_SetCursor+0x2c>)
 8004132:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8004134:	79bb      	ldrb	r3, [r7, #6]
 8004136:	b29a      	uxth	r2, r3
 8004138:	4b03      	ldr	r3, [pc, #12]	; (8004148 <ssd1306_SetCursor+0x2c>)
 800413a:	805a      	strh	r2, [r3, #2]
}
 800413c:	bf00      	nop
 800413e:	370c      	adds	r7, #12
 8004140:	46bd      	mov	sp, r7
 8004142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004146:	4770      	bx	lr
 8004148:	200004a0 	.word	0x200004a0

0800414c <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 800414c:	b580      	push	{r7, lr}
 800414e:	b084      	sub	sp, #16
 8004150:	af00      	add	r7, sp, #0
 8004152:	4603      	mov	r3, r0
 8004154:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 8004156:	2381      	movs	r3, #129	; 0x81
 8004158:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 800415a:	7bfb      	ldrb	r3, [r7, #15]
 800415c:	4618      	mov	r0, r3
 800415e:	f7ff fdf3 	bl	8003d48 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 8004162:	79fb      	ldrb	r3, [r7, #7]
 8004164:	4618      	mov	r0, r3
 8004166:	f7ff fdef 	bl	8003d48 <ssd1306_WriteCommand>
}
 800416a:	bf00      	nop
 800416c:	3710      	adds	r7, #16
 800416e:	46bd      	mov	sp, r7
 8004170:	bd80      	pop	{r7, pc}
	...

08004174 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 8004174:	b580      	push	{r7, lr}
 8004176:	b084      	sub	sp, #16
 8004178:	af00      	add	r7, sp, #0
 800417a:	4603      	mov	r3, r0
 800417c:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 800417e:	79fb      	ldrb	r3, [r7, #7]
 8004180:	2b00      	cmp	r3, #0
 8004182:	d005      	beq.n	8004190 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 8004184:	23af      	movs	r3, #175	; 0xaf
 8004186:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 8004188:	4b08      	ldr	r3, [pc, #32]	; (80041ac <ssd1306_SetDisplayOn+0x38>)
 800418a:	2201      	movs	r2, #1
 800418c:	715a      	strb	r2, [r3, #5]
 800418e:	e004      	b.n	800419a <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 8004190:	23ae      	movs	r3, #174	; 0xae
 8004192:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 8004194:	4b05      	ldr	r3, [pc, #20]	; (80041ac <ssd1306_SetDisplayOn+0x38>)
 8004196:	2200      	movs	r2, #0
 8004198:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 800419a:	7bfb      	ldrb	r3, [r7, #15]
 800419c:	4618      	mov	r0, r3
 800419e:	f7ff fdd3 	bl	8003d48 <ssd1306_WriteCommand>
}
 80041a2:	bf00      	nop
 80041a4:	3710      	adds	r7, #16
 80041a6:	46bd      	mov	sp, r7
 80041a8:	bd80      	pop	{r7, pc}
 80041aa:	bf00      	nop
 80041ac:	200004a0 	.word	0x200004a0

080041b0 <memset>:
 80041b0:	4402      	add	r2, r0
 80041b2:	4603      	mov	r3, r0
 80041b4:	4293      	cmp	r3, r2
 80041b6:	d100      	bne.n	80041ba <memset+0xa>
 80041b8:	4770      	bx	lr
 80041ba:	f803 1b01 	strb.w	r1, [r3], #1
 80041be:	e7f9      	b.n	80041b4 <memset+0x4>

080041c0 <__libc_init_array>:
 80041c0:	b570      	push	{r4, r5, r6, lr}
 80041c2:	4d0d      	ldr	r5, [pc, #52]	; (80041f8 <__libc_init_array+0x38>)
 80041c4:	4c0d      	ldr	r4, [pc, #52]	; (80041fc <__libc_init_array+0x3c>)
 80041c6:	1b64      	subs	r4, r4, r5
 80041c8:	10a4      	asrs	r4, r4, #2
 80041ca:	2600      	movs	r6, #0
 80041cc:	42a6      	cmp	r6, r4
 80041ce:	d109      	bne.n	80041e4 <__libc_init_array+0x24>
 80041d0:	4d0b      	ldr	r5, [pc, #44]	; (8004200 <__libc_init_array+0x40>)
 80041d2:	4c0c      	ldr	r4, [pc, #48]	; (8004204 <__libc_init_array+0x44>)
 80041d4:	f000 f818 	bl	8004208 <_init>
 80041d8:	1b64      	subs	r4, r4, r5
 80041da:	10a4      	asrs	r4, r4, #2
 80041dc:	2600      	movs	r6, #0
 80041de:	42a6      	cmp	r6, r4
 80041e0:	d105      	bne.n	80041ee <__libc_init_array+0x2e>
 80041e2:	bd70      	pop	{r4, r5, r6, pc}
 80041e4:	f855 3b04 	ldr.w	r3, [r5], #4
 80041e8:	4798      	blx	r3
 80041ea:	3601      	adds	r6, #1
 80041ec:	e7ee      	b.n	80041cc <__libc_init_array+0xc>
 80041ee:	f855 3b04 	ldr.w	r3, [r5], #4
 80041f2:	4798      	blx	r3
 80041f4:	3601      	adds	r6, #1
 80041f6:	e7f2      	b.n	80041de <__libc_init_array+0x1e>
 80041f8:	080055d4 	.word	0x080055d4
 80041fc:	080055d4 	.word	0x080055d4
 8004200:	080055d4 	.word	0x080055d4
 8004204:	080055d8 	.word	0x080055d8

08004208 <_init>:
 8004208:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800420a:	bf00      	nop
 800420c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800420e:	bc08      	pop	{r3}
 8004210:	469e      	mov	lr, r3
 8004212:	4770      	bx	lr

08004214 <_fini>:
 8004214:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004216:	bf00      	nop
 8004218:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800421a:	bc08      	pop	{r3}
 800421c:	469e      	mov	lr, r3
 800421e:	4770      	bx	lr
